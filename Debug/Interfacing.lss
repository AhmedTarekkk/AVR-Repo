
Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00004b64  00004bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800086  00800086  00004c1e  2**0
                  ALLOC
  3 .stab         00005010  00000000  00000000  00004c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a5f  00000000  00000000  00009c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b68f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b93f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e473  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f220  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f60d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__vector_1>
       8:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_2>
       c:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__vector_10>
      2c:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <main>
      8a:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIM0_Initialization>:

static void(*CallIntOver)(void)=NULL;
static void(*CallIntComp)(void)=NULL;

void TIM0_Initialization(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIM0_Initialization+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	TCNT0_reg &= Clear_reg;
     b50:	e2 e5       	ldi	r30, 0x52	; 82
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	e2 e5       	ldi	r30, 0x52	; 82
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	10 82       	st	Z, r1
	TCCR0_reg &= Clear_reg;
     b5c:	e3 e5       	ldi	r30, 0x53	; 83
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	e3 e5       	ldi	r30, 0x53	; 83
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	10 82       	st	Z, r1
	/*** Selecting Waveform Generation Mode ***/
	#if		(SIGNAL_MODE == Normal_Mode)
		TCCR0_reg |= Normal_Mode;
     b68:	a3 e5       	ldi	r26, 0x53	; 83
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e3 e5       	ldi	r30, 0x53	; 83
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8c 93       	st	X, r24
	#elif	(CLOCK_Prescaler == Clk_64)
		TCCR0_reg |= Clk_64;
	#elif	(CLOCK_Prescaler == Clk_256)
		TCCR0_reg |= Clk_256;
	#elif	(CLOCK_Prescaler == Clk_1024)
		TCCR0_reg |= Clk_1024;
     b74:	a3 e5       	ldi	r26, 0x53	; 83
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e3 e5       	ldi	r30, 0x53	; 83
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	85 60       	ori	r24, 0x05	; 5
     b80:	8c 93       	st	X, r24
		TCCR0_reg |= Ext_clk_RisingEdge;
	#endif

	/*** Selecting Compare Output Mode ***/
	#if		(COMPARE_OUTPUT_MODE == OC0_DISCONNECTED)
		TCCR0_reg |= OC0_DISCONNECTED;
     b82:	a3 e5       	ldi	r26, 0x53	; 83
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e3 e5       	ldi	r30, 0x53	; 83
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	8c 93       	st	X, r24
	#elif	(SIGNAL_MODE == OC0_SET_ON_COMPARE_MATCH)
		TCCR0_reg |= OC0_SET_ON_COMPARE_MATCH;
	#endif

	/*** Clearing interrupt flags ***/
	SET_Bit(TIFR_reg, 0);
     b8e:	a8 e5       	ldi	r26, 0x58	; 88
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 e5       	ldi	r30, 0x58	; 88
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	81 60       	ori	r24, 0x01	; 1
     b9a:	8c 93       	st	X, r24
	SET_Bit(TIFR_reg, 1);
     b9c:	a8 e5       	ldi	r26, 0x58	; 88
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e8 e5       	ldi	r30, 0x58	; 88
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	82 60       	ori	r24, 0x02	; 2
     ba8:	8c 93       	st	X, r24
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <TIM0_CompIntEnable>:

void TIM0_CompIntEnable(void)
{
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
	SET_Bit(TIMSK_reg,1);
     bbc:	a9 e5       	ldi	r26, 0x59	; 89
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e9 e5       	ldi	r30, 0x59	; 89
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	82 60       	ori	r24, 0x02	; 2
     bc8:	8c 93       	st	X, r24
}
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <TIM0_CompIntDisable>:

void TIM0_CompIntDisable(void)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_Bit(TIMSK_reg,1);
     bd8:	a9 e5       	ldi	r26, 0x59	; 89
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e9 e5       	ldi	r30, 0x59	; 89
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8d 7f       	andi	r24, 0xFD	; 253
     be4:	8c 93       	st	X, r24
}
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <TIM0_OverFlowIntEnable>:

void TIM0_OverFlowIntEnable(void)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	SET_Bit(TIMSK_reg,0);
     bf4:	a9 e5       	ldi	r26, 0x59	; 89
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e9 e5       	ldi	r30, 0x59	; 89
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	81 60       	ori	r24, 0x01	; 1
     c00:	8c 93       	st	X, r24
}
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <TIM0_OverFlowIntDisable>:

void TIM0_OverFlowIntDisable(void)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_Bit(TIMSK_reg,0);
     c10:	a9 e5       	ldi	r26, 0x59	; 89
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e9 e5       	ldi	r30, 0x59	; 89
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8e 7f       	andi	r24, 0xFE	; 254
     c1c:	8c 93       	st	X, r24
}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <TIM0_SetCompValue>:

void TIM0_SetCompValue(uint8 Value)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	89 83       	std	Y+1, r24	; 0x01
	if(Value<=255)
	{
		OCR0_reg=Value;
     c30:	ec e5       	ldi	r30, 0x5C	; 92
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	80 83       	st	Z, r24
	}
	else
	{
		OCR0_reg=0xFF;
	}
}
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <TIM0_SetTimerValue>:

void TIM0_SetTimerValue(uint8 Value)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	0f 92       	push	r0
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	89 83       	std	Y+1, r24	; 0x01
	if(Value <= 255)
	{
		TCNT0_reg = Value ;
     c4c:	e2 e5       	ldi	r30, 0x52	; 82
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	80 83       	st	Z, r24
	}
	else
	{
		TCNT0_reg = 0xFF ;
	}
}
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <TIM0_OverFlowCallBack>:

void TIM0_OverFlowCallBack(void (*Copy_ptr) (void))
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <TIM0_OverFlowCallBack+0x6>
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
	CallIntOver = Copy_ptr;
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	90 93 87 00 	sts	0x0087, r25
     c72:	80 93 86 00 	sts	0x0086, r24
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <TIM0_CompareCallBack>:

void TIM0_CompareCallBack(void (*Copy_ptr) (void))
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <TIM0_CompareCallBack+0x6>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
	CallIntComp = Copy_ptr;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	90 93 89 00 	sts	0x0089, r25
     c96:	80 93 88 00 	sts	0x0088, r24
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	cf 91       	pop	r28
     ca0:	df 91       	pop	r29
     ca2:	08 95       	ret

00000ca4 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));

void __vector_10(void)
{
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	CallIntComp();
     cce:	e0 91 88 00 	lds	r30, 0x0088
     cd2:	f0 91 89 00 	lds	r31, 0x0089
     cd6:	09 95       	icall
}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <__vector_11>:

void __vector_11(void) __attribute__((signal , used));

void __vector_11(void)
{
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	CallIntOver();
     d28:	e0 91 86 00 	lds	r30, 0x0086
     d2c:	f0 91 87 00 	lds	r31, 0x0087
     d30:	09 95       	icall
}
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <GIE_Enable_Global>:

#ifndef REPO_MCAL_GIE_GIE_C_
#define REPO_MCAL_GIE_GIE_C_

void GIE_Enable_Global(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	SET_Bit(SREG_Reg,7);
     d60:	af e5       	ldi	r26, 0x5F	; 95
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ef e5       	ldi	r30, 0x5F	; 95
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	80 68       	ori	r24, 0x80	; 128
     d6c:	8c 93       	st	X, r24
}
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <GIE_Disable_Global>:

void GIE_Disable_Global(void)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_Bit(SREG_Reg,7);
     d7c:	af e5       	ldi	r26, 0x5F	; 95
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	ef e5       	ldi	r30, 0x5F	; 95
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 77       	andi	r24, 0x7F	; 127
     d88:	8c 93       	st	X, r24
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <EXTI_Initialization>:
void (*CallBackPtr0) (void) = NULL ;
void (*CallBackPtr1) (void) = NULL ;
void (*CallBackPtr2) (void) = NULL ;

void EXTI_Initialization(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	MCUCR_Reg &= EXTI_Clear_msk ;
     d98:	a5 e5       	ldi	r26, 0x55	; 85
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e5       	ldi	r30, 0x55	; 85
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	80 7f       	andi	r24, 0xF0	; 240
     da4:	8c 93       	st	X, r24
	CLEAR_Bit(MCUCSR_Reg,6);
     da6:	a4 e5       	ldi	r26, 0x54	; 84
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e4 e5       	ldi	r30, 0x54	; 84
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 7b       	andi	r24, 0xBF	; 191
     db2:	8c 93       	st	X, r24
/* ******************** Selecting Mode ******************* */
	/* **************** INT0 ************ */
	#if EXTI0_MODE == EXTI_Low_Level
		MCUCR_Reg |= EXTI_Low_Level ;
     db4:	a5 e5       	ldi	r26, 0x55	; 85
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e5 e5       	ldi	r30, 0x55	; 85
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8c 93       	st	X, r24
	#if EXTI1_MODE == EXTI_Low_Level
		MCUCR_Reg |= (EXTI_Low_Level << 2) ;
	#elif EXTI1_MODE == EXTI_Any_Logical_Change
		MCUCR_Reg |= (EXTI_Any_Logical_Change << 2) ;
	#elif EXTI1_MODE == EXTI_Falling_Edge
		MCUCR_Reg |= (EXTI_Falling_Edge << 2) ;
     dc0:	a5 e5       	ldi	r26, 0x55	; 85
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e5 e5       	ldi	r30, 0x55	; 85
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	88 60       	ori	r24, 0x08	; 8
     dcc:	8c 93       	st	X, r24
		MCUCR_Reg |= (EXTI_Rising_Edge << 2) ;
	#endif

	/* **************** INT2 ************ */
	#if EXTI2_MODE == EXTI_Falling_Edge
		MCUCSR_Reg |= (EXTI_Falling_Edge << 6) ;
     dce:	a4 e5       	ldi	r26, 0x54	; 84
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e4 e5       	ldi	r30, 0x54	; 84
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 68       	ori	r24, 0x80	; 128
     dda:	8c 93       	st	X, r24
	#endif

/* ******************** Selecting State ******************* */
	/* **************** INT0 ************ */
	#if EXTI_INT0_INIT_STATE == EXTI_Disable_State
		CLEAR_Bit(GICR_Reg,6) ;
     ddc:	ab e5       	ldi	r26, 0x5B	; 91
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	eb e5       	ldi	r30, 0x5B	; 91
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 7b       	andi	r24, 0xBF	; 191
     de8:	8c 93       	st	X, r24
	#elif EXTI_INT0_INIT_STATE == EXTI_Enable_State
		SET_Bit(GICR_Reg,6) ;
	#endif
	/* **************** INT1 ************ */
	#if EXTI_INT1_INIT_STATE == EXTI_Disable_State
		CLEAR_Bit(GICR_Reg,7) ;
     dea:	ab e5       	ldi	r26, 0x5B	; 91
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	eb e5       	ldi	r30, 0x5B	; 91
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8f 77       	andi	r24, 0x7F	; 127
     df6:	8c 93       	st	X, r24
	#elif EXTI_INT1_INIT_STATE == EXTI_Enable_State
		SET_Bit(GICR_Reg,7) ;
	#endif
	/* **************** INT2 ************ */
	#if EXTI_INT2_INIT_STATE == EXTI_Disable_State
		CLEAR_Bit(GICR_Reg,5) ;
     df8:	ab e5       	ldi	r26, 0x5B	; 91
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	eb e5       	ldi	r30, 0x5B	; 91
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8f 7d       	andi	r24, 0xDF	; 223
     e04:	8c 93       	st	X, r24
	#elif EXTI_INT2_INIT_STATE == EXTI_Enable_State
		SET_Bit(GICR_Reg,5) ;
	#endif
/* ******************** Clearing Flag ******************* */
	SET_Bit(GIFR_Reg,5);
     e06:	aa e5       	ldi	r26, 0x5A	; 90
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e5       	ldi	r30, 0x5A	; 90
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 62       	ori	r24, 0x20	; 32
     e12:	8c 93       	st	X, r24
	SET_Bit(GIFR_Reg,6);
     e14:	aa e5       	ldi	r26, 0x5A	; 90
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ea e5       	ldi	r30, 0x5A	; 90
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 64       	ori	r24, 0x40	; 64
     e20:	8c 93       	st	X, r24
	SET_Bit(GIFR_Reg,7);
     e22:	aa e5       	ldi	r26, 0x5A	; 90
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ea e5       	ldi	r30, 0x5A	; 90
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 68       	ori	r24, 0x80	; 128
     e2e:	8c 93       	st	X, r24
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <EXTI_Enable_INT0>:

void EXTI_Enable_INT0(void)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	SET_Bit(GICR_Reg,6);
     e3e:	ab e5       	ldi	r26, 0x5B	; 91
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	eb e5       	ldi	r30, 0x5B	; 91
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 64       	ori	r24, 0x40	; 64
     e4a:	8c 93       	st	X, r24
}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <EXTI_Disable_INT0>:

void EXTI_Disable_INT0(void)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	CLEAR_Bit(GICR_Reg,6);
     e5a:	ab e5       	ldi	r26, 0x5B	; 91
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	eb e5       	ldi	r30, 0x5B	; 91
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8f 7b       	andi	r24, 0xBF	; 191
     e66:	8c 93       	st	X, r24
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <EXTI_ISR0>:
/********************** INT0 ISR *********************/
void EXTI_ISR0( void (*CopyFunctPtr) (void) )
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <EXTI_ISR0+0x6>
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr0 = CopyFunctPtr;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	90 93 8b 00 	sts	0x008B, r25
     e84:	80 93 8a 00 	sts	0x008A, r24
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <__vector_1>:

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	6f 93       	push	r22
     ea6:	7f 93       	push	r23
     ea8:	8f 93       	push	r24
     eaa:	9f 93       	push	r25
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr0 != NULL)
     ebc:	80 91 8a 00 	lds	r24, 0x008A
     ec0:	90 91 8b 00 	lds	r25, 0x008B
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	29 f0       	breq	.+10     	; 0xed2 <__vector_1+0x40>
	{
		CallBackPtr0();
     ec8:	e0 91 8a 00 	lds	r30, 0x008A
     ecc:	f0 91 8b 00 	lds	r31, 0x008B
     ed0:	09 95       	icall
	}
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <EXTI_ISR1>:
/********************** INT1 ISR *********************/
void EXTI_ISR1( void (*CopyFunctPtr) (void) )
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <EXTI_ISR1+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr1 = CopyFunctPtr;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	90 93 8d 00 	sts	0x008D, r25
     f0e:	80 93 8c 00 	sts	0x008C, r24
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void)
{
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr1 != NULL)
     f46:	80 91 8c 00 	lds	r24, 0x008C
     f4a:	90 91 8d 00 	lds	r25, 0x008D
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	29 f0       	breq	.+10     	; 0xf5c <__vector_2+0x40>
	{
		CallBackPtr1();
     f52:	e0 91 8c 00 	lds	r30, 0x008C
     f56:	f0 91 8d 00 	lds	r31, 0x008D
     f5a:	09 95       	icall
	}
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <EXTI_ISR2>:
/********************** INT2 ISR *********************/
void EXTI_ISR2( void (*CopyFunctPtr) (void) )
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <EXTI_ISR2+0x6>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr2 = CopyFunctPtr;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	90 93 8f 00 	sts	0x008F, r25
     f98:	80 93 8e 00 	sts	0x008E, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
     fa6:	1f 92       	push	r1
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	0f 92       	push	r0
     fae:	11 24       	eor	r1, r1
     fb0:	2f 93       	push	r18
     fb2:	3f 93       	push	r19
     fb4:	4f 93       	push	r20
     fb6:	5f 93       	push	r21
     fb8:	6f 93       	push	r22
     fba:	7f 93       	push	r23
     fbc:	8f 93       	push	r24
     fbe:	9f 93       	push	r25
     fc0:	af 93       	push	r26
     fc2:	bf 93       	push	r27
     fc4:	ef 93       	push	r30
     fc6:	ff 93       	push	r31
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr2 != NULL)
     fd0:	80 91 8e 00 	lds	r24, 0x008E
     fd4:	90 91 8f 00 	lds	r25, 0x008F
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	29 f0       	breq	.+10     	; 0xfe6 <__vector_3+0x40>
	{
		CallBackPtr2();
     fdc:	e0 91 8e 00 	lds	r30, 0x008E
     fe0:	f0 91 8f 00 	lds	r31, 0x008F
     fe4:	09 95       	icall
	}
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <DIO_SetPortDirection>:
#include "../../LIB/Bit_Math.h"
#include "../../LIB/STD_types.h"
#include "DIO_types.h"

void DIO_SetPortDirection(DIO_PORT_ID port_ID , DIO_Direction direction)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <DIO_SetPortDirection+0x6>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <DIO_SetPortDirection+0x8>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <DIO_SetPortDirection+0xa>
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6a 83       	std	Y+2, r22	; 0x02
	if(Output == direction)
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	99 f5       	brne	.+102    	; 0x108a <DIO_SetPortDirection+0x7e>
	{
		switch(port_ID)
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3e 83       	std	Y+6, r19	; 0x06
    102c:	2d 83       	std	Y+5, r18	; 0x05
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	d1 f0       	breq	.+52     	; 0x106c <DIO_SetPortDirection+0x60>
    1038:	2d 81       	ldd	r18, Y+5	; 0x05
    103a:	3e 81       	ldd	r19, Y+6	; 0x06
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	2c f4       	brge	.+10     	; 0x104c <DIO_SetPortDirection+0x40>
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	61 f0       	breq	.+24     	; 0x1062 <DIO_SetPortDirection+0x56>
    104a:	50 c0       	rjmp	.+160    	; 0x10ec <DIO_SetPortDirection+0xe0>
    104c:	2d 81       	ldd	r18, Y+5	; 0x05
    104e:	3e 81       	ldd	r19, Y+6	; 0x06
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	81 f0       	breq	.+32     	; 0x1076 <DIO_SetPortDirection+0x6a>
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	81 f0       	breq	.+32     	; 0x1080 <DIO_SetPortDirection+0x74>
    1060:	45 c0       	rjmp	.+138    	; 0x10ec <DIO_SetPortDirection+0xe0>
		{
			case PORTA: DDRA_Reg = 0xff ; break;
    1062:	ea e3       	ldi	r30, 0x3A	; 58
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
    106a:	40 c0       	rjmp	.+128    	; 0x10ec <DIO_SetPortDirection+0xe0>
			case PORTB: DDRB_Reg = 0xff ; break;
    106c:	e7 e3       	ldi	r30, 0x37	; 55
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	80 83       	st	Z, r24
    1074:	3b c0       	rjmp	.+118    	; 0x10ec <DIO_SetPortDirection+0xe0>
			case PORTC: DDRC_Reg = 0xff ; break;
    1076:	e4 e3       	ldi	r30, 0x34	; 52
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	80 83       	st	Z, r24
    107e:	36 c0       	rjmp	.+108    	; 0x10ec <DIO_SetPortDirection+0xe0>
			case PORTD: DDRD_Reg = 0xff ; break;
    1080:	e1 e3       	ldi	r30, 0x31	; 49
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	80 83       	st	Z, r24
    1088:	31 c0       	rjmp	.+98     	; 0x10ec <DIO_SetPortDirection+0xe0>
		}
	}
	else if(Input == direction)
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	88 23       	and	r24, r24
    108e:	71 f5       	brne	.+92     	; 0x10ec <DIO_SetPortDirection+0xe0>
	{
		switch(port_ID)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3c 83       	std	Y+4, r19	; 0x04
    1098:	2b 83       	std	Y+3, r18	; 0x03
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	c9 f0       	breq	.+50     	; 0x10d6 <DIO_SetPortDirection+0xca>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <DIO_SetPortDirection+0xac>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	61 f0       	breq	.+24     	; 0x10ce <DIO_SetPortDirection+0xc2>
    10b6:	1a c0       	rjmp	.+52     	; 0x10ec <DIO_SetPortDirection+0xe0>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	71 f0       	breq	.+28     	; 0x10de <DIO_SetPortDirection+0xd2>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	91 05       	cpc	r25, r1
    10ca:	69 f0       	breq	.+26     	; 0x10e6 <DIO_SetPortDirection+0xda>
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <DIO_SetPortDirection+0xe0>
		{
			case PORTA: DDRA_Reg = 0x00 ; break;
    10ce:	ea e3       	ldi	r30, 0x3A	; 58
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	10 82       	st	Z, r1
    10d4:	0b c0       	rjmp	.+22     	; 0x10ec <DIO_SetPortDirection+0xe0>
			case PORTB: DDRB_Reg = 0x00 ; break;
    10d6:	e7 e3       	ldi	r30, 0x37	; 55
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	10 82       	st	Z, r1
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <DIO_SetPortDirection+0xe0>
			case PORTC: DDRC_Reg = 0x00 ; break;
    10de:	e4 e3       	ldi	r30, 0x34	; 52
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	10 82       	st	Z, r1
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <DIO_SetPortDirection+0xe0>
			case PORTD: DDRD_Reg = 0x00 ; break;
    10e6:	e1 e3       	ldi	r30, 0x31	; 49
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	10 82       	st	Z, r1
		}
	}
}
    10ec:	26 96       	adiw	r28, 0x06	; 6
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <DIO_SetPortValue>:


void DIO_SetPortValue(DIO_PORT_ID port_ID , unsigned char value )
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <DIO_SetPortValue+0x6>
    1104:	00 d0       	rcall	.+0      	; 0x1106 <DIO_SetPortValue+0x8>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_ID)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	3c 83       	std	Y+4, r19	; 0x04
    1116:	2b 83       	std	Y+3, r18	; 0x03
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	91 05       	cpc	r25, r1
    1120:	d1 f0       	breq	.+52     	; 0x1156 <DIO_SetPortValue+0x58>
    1122:	2b 81       	ldd	r18, Y+3	; 0x03
    1124:	3c 81       	ldd	r19, Y+4	; 0x04
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	2c f4       	brge	.+10     	; 0x1136 <DIO_SetPortValue+0x38>
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	61 f0       	breq	.+24     	; 0x114c <DIO_SetPortValue+0x4e>
    1134:	1e c0       	rjmp	.+60     	; 0x1172 <DIO_SetPortValue+0x74>
    1136:	2b 81       	ldd	r18, Y+3	; 0x03
    1138:	3c 81       	ldd	r19, Y+4	; 0x04
    113a:	22 30       	cpi	r18, 0x02	; 2
    113c:	31 05       	cpc	r19, r1
    113e:	81 f0       	breq	.+32     	; 0x1160 <DIO_SetPortValue+0x62>
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	91 05       	cpc	r25, r1
    1148:	81 f0       	breq	.+32     	; 0x116a <DIO_SetPortValue+0x6c>
    114a:	13 c0       	rjmp	.+38     	; 0x1172 <DIO_SetPortValue+0x74>
	{
		case PORTA: PORTA_Reg = value ; break ;
    114c:	eb e3       	ldi	r30, 0x3B	; 59
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 83       	st	Z, r24
    1154:	0e c0       	rjmp	.+28     	; 0x1172 <DIO_SetPortValue+0x74>
		case PORTB: PORTB_Reg = value ; break ;
    1156:	e8 e3       	ldi	r30, 0x38	; 56
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <DIO_SetPortValue+0x74>
		case PORTC: PORTC_Reg = value ; break ;
    1160:	e5 e3       	ldi	r30, 0x35	; 53
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	80 83       	st	Z, r24
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <DIO_SetPortValue+0x74>
		case PORTD: PORTD_Reg = value ; break ;
    116a:	e2 e3       	ldi	r30, 0x32	; 50
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	80 83       	st	Z, r24
	}
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <DIO_SetPinDirection>:


void DIO_SetPinDirection(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID , DIO_Direction direction)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	27 97       	sbiw	r28, 0x07	; 7
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	6a 83       	std	Y+2, r22	; 0x02
    1198:	4b 83       	std	Y+3, r20	; 0x03
	if(port_ID <= PORTD && pin_ID <= Pin7)
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <DIO_SetPinDirection+0x22>
    11a0:	ee c0       	rjmp	.+476    	; 0x137e <DIO_SetPinDirection+0x1fe>
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <DIO_SetPinDirection+0x2a>
    11a8:	ea c0       	rjmp	.+468    	; 0x137e <DIO_SetPinDirection+0x1fe>
	{
		if(Output == direction)
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <DIO_SetPinDirection+0x32>
    11b0:	6f c0       	rjmp	.+222    	; 0x1290 <DIO_SetPinDirection+0x110>
		{
			switch(port_ID)
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3f 83       	std	Y+7, r19	; 0x07
    11ba:	2e 83       	std	Y+6, r18	; 0x06
    11bc:	8e 81       	ldd	r24, Y+6	; 0x06
    11be:	9f 81       	ldd	r25, Y+7	; 0x07
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	49 f1       	breq	.+82     	; 0x1218 <DIO_SetPinDirection+0x98>
    11c6:	2e 81       	ldd	r18, Y+6	; 0x06
    11c8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	2c f4       	brge	.+10     	; 0x11da <DIO_SetPinDirection+0x5a>
    11d0:	8e 81       	ldd	r24, Y+6	; 0x06
    11d2:	9f 81       	ldd	r25, Y+7	; 0x07
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <DIO_SetPinDirection+0x70>
    11d8:	d2 c0       	rjmp	.+420    	; 0x137e <DIO_SetPinDirection+0x1fe>
    11da:	2e 81       	ldd	r18, Y+6	; 0x06
    11dc:	3f 81       	ldd	r19, Y+7	; 0x07
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	71 f1       	breq	.+92     	; 0x1240 <DIO_SetPinDirection+0xc0>
    11e4:	8e 81       	ldd	r24, Y+6	; 0x06
    11e6:	9f 81       	ldd	r25, Y+7	; 0x07
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	91 05       	cpc	r25, r1
    11ec:	e9 f1       	breq	.+122    	; 0x1268 <DIO_SetPinDirection+0xe8>
    11ee:	c7 c0       	rjmp	.+398    	; 0x137e <DIO_SetPinDirection+0x1fe>
			{
				case PORTA : SET_Bit(DDRA_Reg , pin_ID) ; break;
    11f0:	aa e3       	ldi	r26, 0x3A	; 58
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_SetPinDirection+0x8e>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_SetPinDirection+0x8a>
    1212:	84 2b       	or	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	b3 c0       	rjmp	.+358    	; 0x137e <DIO_SetPinDirection+0x1fe>
				case PORTB : SET_Bit(DDRB_Reg , pin_ID) ; break;
    1218:	a7 e3       	ldi	r26, 0x37	; 55
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e7 e3       	ldi	r30, 0x37	; 55
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_SetPinDirection+0xb6>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_SetPinDirection+0xb2>
    123a:	84 2b       	or	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	9f c0       	rjmp	.+318    	; 0x137e <DIO_SetPinDirection+0x1fe>
				case PORTC : SET_Bit(DDRC_Reg , pin_ID) ; break;
    1240:	a4 e3       	ldi	r26, 0x34	; 52
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e4 e3       	ldi	r30, 0x34	; 52
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_SetPinDirection+0xde>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_SetPinDirection+0xda>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	8b c0       	rjmp	.+278    	; 0x137e <DIO_SetPinDirection+0x1fe>
				case PORTD : SET_Bit(DDRD_Reg , pin_ID) ; break;
    1268:	a1 e3       	ldi	r26, 0x31	; 49
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e1 e3       	ldi	r30, 0x31	; 49
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_SetPinDirection+0x106>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_SetPinDirection+0x102>
    128a:	84 2b       	or	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	77 c0       	rjmp	.+238    	; 0x137e <DIO_SetPinDirection+0x1fe>
			}
		}
		else if(Input == direction)
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 23       	and	r24, r24
    1294:	09 f0       	breq	.+2      	; 0x1298 <DIO_SetPinDirection+0x118>
    1296:	73 c0       	rjmp	.+230    	; 0x137e <DIO_SetPinDirection+0x1fe>
		{
			switch(port_ID)
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3d 83       	std	Y+5, r19	; 0x05
    12a0:	2c 83       	std	Y+4, r18	; 0x04
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	59 f1       	breq	.+86     	; 0x1302 <DIO_SetPinDirection+0x182>
    12ac:	2c 81       	ldd	r18, Y+4	; 0x04
    12ae:	3d 81       	ldd	r19, Y+5	; 0x05
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <DIO_SetPinDirection+0x140>
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	69 f0       	breq	.+26     	; 0x12d8 <DIO_SetPinDirection+0x158>
    12be:	5f c0       	rjmp	.+190    	; 0x137e <DIO_SetPinDirection+0x1fe>
    12c0:	2c 81       	ldd	r18, Y+4	; 0x04
    12c2:	3d 81       	ldd	r19, Y+5	; 0x05
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	89 f1       	breq	.+98     	; 0x132c <DIO_SetPinDirection+0x1ac>
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	9d 81       	ldd	r25, Y+5	; 0x05
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 05       	cpc	r25, r1
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <DIO_SetPinDirection+0x156>
    12d4:	40 c0       	rjmp	.+128    	; 0x1356 <DIO_SetPinDirection+0x1d6>
    12d6:	53 c0       	rjmp	.+166    	; 0x137e <DIO_SetPinDirection+0x1fe>
			{
				case PORTA : CLEAR_Bit(DDRA_Reg , pin_ID) ; break;
    12d8:	aa e3       	ldi	r26, 0x3A	; 58
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ea e3       	ldi	r30, 0x3A	; 58
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_SetPinDirection+0x176>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_SetPinDirection+0x172>
    12fa:	80 95       	com	r24
    12fc:	84 23       	and	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	3e c0       	rjmp	.+124    	; 0x137e <DIO_SetPinDirection+0x1fe>
				case PORTB : CLEAR_Bit(DDRB_Reg , pin_ID) ; break;
    1302:	a7 e3       	ldi	r26, 0x37	; 55
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e3       	ldi	r30, 0x37	; 55
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_SetPinDirection+0x1a0>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_SetPinDirection+0x19c>
    1324:	80 95       	com	r24
    1326:	84 23       	and	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	29 c0       	rjmp	.+82     	; 0x137e <DIO_SetPinDirection+0x1fe>
				case PORTC : CLEAR_Bit(DDRC_Reg , pin_ID) ; break;
    132c:	a4 e3       	ldi	r26, 0x34	; 52
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e4 e3       	ldi	r30, 0x34	; 52
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_SetPinDirection+0x1ca>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_SetPinDirection+0x1c6>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	14 c0       	rjmp	.+40     	; 0x137e <DIO_SetPinDirection+0x1fe>
				case PORTD : CLEAR_Bit(DDRD_Reg , pin_ID) ; break;
    1356:	a1 e3       	ldi	r26, 0x31	; 49
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e1 e3       	ldi	r30, 0x31	; 49
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_SetPinDirection+0x1f4>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_SetPinDirection+0x1f0>
    1378:	80 95       	com	r24
    137a:	84 23       	and	r24, r20
    137c:	8c 93       	st	X, r24
			}
		}
	}
}
    137e:	27 96       	adiw	r28, 0x07	; 7
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DIO_SetPinValue>:


void DIO_SetPinValue(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID , STD_levelTypes value )
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	27 97       	sbiw	r28, 0x07	; 7
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	6a 83       	std	Y+2, r22	; 0x02
    13a8:	4b 83       	std	Y+3, r20	; 0x03
	if(port_ID <= PORTD && pin_ID <= Pin7)
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <DIO_SetPinValue+0x22>
    13b0:	ee c0       	rjmp	.+476    	; 0x158e <DIO_SetPinValue+0x1fe>
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <DIO_SetPinValue+0x2a>
    13b8:	ea c0       	rjmp	.+468    	; 0x158e <DIO_SetPinValue+0x1fe>
	{
		if(value == HIGH)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	09 f0       	breq	.+2      	; 0x13c2 <DIO_SetPinValue+0x32>
    13c0:	6f c0       	rjmp	.+222    	; 0x14a0 <DIO_SetPinValue+0x110>
		{
			switch(port_ID)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3f 83       	std	Y+7, r19	; 0x07
    13ca:	2e 83       	std	Y+6, r18	; 0x06
    13cc:	8e 81       	ldd	r24, Y+6	; 0x06
    13ce:	9f 81       	ldd	r25, Y+7	; 0x07
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	49 f1       	breq	.+82     	; 0x1428 <DIO_SetPinValue+0x98>
    13d6:	2e 81       	ldd	r18, Y+6	; 0x06
    13d8:	3f 81       	ldd	r19, Y+7	; 0x07
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	2c f4       	brge	.+10     	; 0x13ea <DIO_SetPinValue+0x5a>
    13e0:	8e 81       	ldd	r24, Y+6	; 0x06
    13e2:	9f 81       	ldd	r25, Y+7	; 0x07
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	61 f0       	breq	.+24     	; 0x1400 <DIO_SetPinValue+0x70>
    13e8:	d2 c0       	rjmp	.+420    	; 0x158e <DIO_SetPinValue+0x1fe>
    13ea:	2e 81       	ldd	r18, Y+6	; 0x06
    13ec:	3f 81       	ldd	r19, Y+7	; 0x07
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	71 f1       	breq	.+92     	; 0x1450 <DIO_SetPinValue+0xc0>
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	9f 81       	ldd	r25, Y+7	; 0x07
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	91 05       	cpc	r25, r1
    13fc:	e9 f1       	breq	.+122    	; 0x1478 <DIO_SetPinValue+0xe8>
    13fe:	c7 c0       	rjmp	.+398    	; 0x158e <DIO_SetPinValue+0x1fe>
			{
				case PORTA : SET_Bit(PORTA_Reg , pin_ID) ; break;
    1400:	ab e3       	ldi	r26, 0x3B	; 59
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	eb e3       	ldi	r30, 0x3B	; 59
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_SetPinValue+0x8e>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_SetPinValue+0x8a>
    1422:	84 2b       	or	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	b3 c0       	rjmp	.+358    	; 0x158e <DIO_SetPinValue+0x1fe>
				case PORTB : SET_Bit(PORTB_Reg , pin_ID) ; break;
    1428:	a8 e3       	ldi	r26, 0x38	; 56
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e8 e3       	ldi	r30, 0x38	; 56
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_SetPinValue+0xb6>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_SetPinValue+0xb2>
    144a:	84 2b       	or	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	9f c0       	rjmp	.+318    	; 0x158e <DIO_SetPinValue+0x1fe>
				case PORTC : SET_Bit(PORTC_Reg , pin_ID) ; break;
    1450:	a5 e3       	ldi	r26, 0x35	; 53
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e3       	ldi	r30, 0x35	; 53
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_SetPinValue+0xde>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_SetPinValue+0xda>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	8b c0       	rjmp	.+278    	; 0x158e <DIO_SetPinValue+0x1fe>
				case PORTD : SET_Bit(PORTD_Reg , pin_ID) ; break;
    1478:	a2 e3       	ldi	r26, 0x32	; 50
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e2 e3       	ldi	r30, 0x32	; 50
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_SetPinValue+0x106>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_SetPinValue+0x102>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	77 c0       	rjmp	.+238    	; 0x158e <DIO_SetPinValue+0x1fe>
			}
		}
		else if(value == LOW)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	88 23       	and	r24, r24
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <DIO_SetPinValue+0x118>
    14a6:	73 c0       	rjmp	.+230    	; 0x158e <DIO_SetPinValue+0x1fe>
		{
			switch(port_ID)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3d 83       	std	Y+5, r19	; 0x05
    14b0:	2c 83       	std	Y+4, r18	; 0x04
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	59 f1       	breq	.+86     	; 0x1512 <DIO_SetPinValue+0x182>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <DIO_SetPinValue+0x140>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	69 f0       	breq	.+26     	; 0x14e8 <DIO_SetPinValue+0x158>
    14ce:	5f c0       	rjmp	.+190    	; 0x158e <DIO_SetPinValue+0x1fe>
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	89 f1       	breq	.+98     	; 0x153c <DIO_SetPinValue+0x1ac>
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <DIO_SetPinValue+0x156>
    14e4:	40 c0       	rjmp	.+128    	; 0x1566 <DIO_SetPinValue+0x1d6>
    14e6:	53 c0       	rjmp	.+166    	; 0x158e <DIO_SetPinValue+0x1fe>
			{
				case PORTA : CLEAR_Bit(PORTA_Reg , pin_ID) ; break;
    14e8:	ab e3       	ldi	r26, 0x3B	; 59
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	eb e3       	ldi	r30, 0x3B	; 59
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_SetPinValue+0x176>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_SetPinValue+0x172>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	3e c0       	rjmp	.+124    	; 0x158e <DIO_SetPinValue+0x1fe>
				case PORTB : CLEAR_Bit(PORTB_Reg , pin_ID) ; break;
    1512:	a8 e3       	ldi	r26, 0x38	; 56
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e8 e3       	ldi	r30, 0x38	; 56
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_SetPinValue+0x1a0>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_SetPinValue+0x19c>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	29 c0       	rjmp	.+82     	; 0x158e <DIO_SetPinValue+0x1fe>
				case PORTC : CLEAR_Bit(PORTC_Reg , pin_ID) ; break;
    153c:	a5 e3       	ldi	r26, 0x35	; 53
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e5 e3       	ldi	r30, 0x35	; 53
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_SetPinValue+0x1ca>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_SetPinValue+0x1c6>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	14 c0       	rjmp	.+40     	; 0x158e <DIO_SetPinValue+0x1fe>
				case PORTD : CLEAR_Bit(PORTD_Reg , pin_ID) ; break;
    1566:	a2 e3       	ldi	r26, 0x32	; 50
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e2 e3       	ldi	r30, 0x32	; 50
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_SetPinValue+0x1f4>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_SetPinValue+0x1f0>
    1588:	80 95       	com	r24
    158a:	84 23       	and	r24, r20
    158c:	8c 93       	st	X, r24
			}
		}
	}
}
    158e:	27 96       	adiw	r28, 0x07	; 7
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <DIO_GetPinValue>:


STD_levelTypes DIO_GetPinValue(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID )
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_GetPinValue+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_GetPinValue+0x8>
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	6b 83       	std	Y+3, r22	; 0x03
	STD_levelTypes PinValue;
	if(port_ID <= PORTD && pin_ID <= Pin7)
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <DIO_GetPinValue+0x1a>
    15b8:	6b c0       	rjmp	.+214    	; 0x1690 <DIO_GetPinValue+0xf0>
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	88 30       	cpi	r24, 0x08	; 8
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <DIO_GetPinValue+0x22>
    15c0:	67 c0       	rjmp	.+206    	; 0x1690 <DIO_GetPinValue+0xf0>
	{
		switch(port_ID)
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3d 83       	std	Y+5, r19	; 0x05
    15ca:	2c 83       	std	Y+4, r18	; 0x04
    15cc:	4c 81       	ldd	r20, Y+4	; 0x04
    15ce:	5d 81       	ldd	r21, Y+5	; 0x05
    15d0:	41 30       	cpi	r20, 0x01	; 1
    15d2:	51 05       	cpc	r21, r1
    15d4:	41 f1       	breq	.+80     	; 0x1626 <DIO_GetPinValue+0x86>
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	91 05       	cpc	r25, r1
    15de:	34 f4       	brge	.+12     	; 0x15ec <DIO_GetPinValue+0x4c>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	21 15       	cp	r18, r1
    15e6:	31 05       	cpc	r19, r1
    15e8:	61 f0       	breq	.+24     	; 0x1602 <DIO_GetPinValue+0x62>
    15ea:	52 c0       	rjmp	.+164    	; 0x1690 <DIO_GetPinValue+0xf0>
    15ec:	4c 81       	ldd	r20, Y+4	; 0x04
    15ee:	5d 81       	ldd	r21, Y+5	; 0x05
    15f0:	42 30       	cpi	r20, 0x02	; 2
    15f2:	51 05       	cpc	r21, r1
    15f4:	51 f1       	breq	.+84     	; 0x164a <DIO_GetPinValue+0xaa>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	9d 81       	ldd	r25, Y+5	; 0x05
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	b9 f1       	breq	.+110    	; 0x166e <DIO_GetPinValue+0xce>
    1600:	47 c0       	rjmp	.+142    	; 0x1690 <DIO_GetPinValue+0xf0>
		{
			case PORTA : PinValue = GET_Bit(PINA_Reg , pin_ID) ; break;
    1602:	e9 e3       	ldi	r30, 0x39	; 57
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a9 01       	movw	r20, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_GetPinValue+0x7a>
    1616:	55 95       	asr	r21
    1618:	47 95       	ror	r20
    161a:	8a 95       	dec	r24
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_GetPinValue+0x76>
    161e:	ca 01       	movw	r24, r20
    1620:	81 70       	andi	r24, 0x01	; 1
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	35 c0       	rjmp	.+106    	; 0x1690 <DIO_GetPinValue+0xf0>
			case PORTB : PinValue = GET_Bit(PINB_Reg , pin_ID) ; break;
    1626:	e6 e3       	ldi	r30, 0x36	; 54
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a9 01       	movw	r20, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_GetPinValue+0x9e>
    163a:	55 95       	asr	r21
    163c:	47 95       	ror	r20
    163e:	8a 95       	dec	r24
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_GetPinValue+0x9a>
    1642:	ca 01       	movw	r24, r20
    1644:	81 70       	andi	r24, 0x01	; 1
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	23 c0       	rjmp	.+70     	; 0x1690 <DIO_GetPinValue+0xf0>
			case PORTC : PinValue = GET_Bit(PINC_Reg , pin_ID) ; break;
    164a:	e3 e3       	ldi	r30, 0x33	; 51
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a9 01       	movw	r20, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_GetPinValue+0xc2>
    165e:	55 95       	asr	r21
    1660:	47 95       	ror	r20
    1662:	8a 95       	dec	r24
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_GetPinValue+0xbe>
    1666:	ca 01       	movw	r24, r20
    1668:	81 70       	andi	r24, 0x01	; 1
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	11 c0       	rjmp	.+34     	; 0x1690 <DIO_GetPinValue+0xf0>
			case PORTD : PinValue = GET_Bit(PIND_Reg , pin_ID) ; break;
    166e:	e0 e3       	ldi	r30, 0x30	; 48
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a9 01       	movw	r20, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_GetPinValue+0xe6>
    1682:	55 95       	asr	r21
    1684:	47 95       	ror	r20
    1686:	8a 95       	dec	r24
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_GetPinValue+0xe2>
    168a:	ca 01       	movw	r24, r20
    168c:	81 70       	andi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return PinValue;
    1690:	89 81       	ldd	r24, Y+1	; 0x01
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <DIO_ToggleBit>:

void DIO_ToggleBit(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID )
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <DIO_ToggleBit+0x6>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <DIO_ToggleBit+0x8>
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_ID <= PORTD && pin_ID <= Pin7)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <DIO_ToggleBit+0x18>
    16b8:	72 c0       	rjmp	.+228    	; 0x179e <DIO_ToggleBit+0xfc>
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	88 30       	cpi	r24, 0x08	; 8
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <DIO_ToggleBit+0x20>
    16c0:	6e c0       	rjmp	.+220    	; 0x179e <DIO_ToggleBit+0xfc>
	{
		switch(port_ID)
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3c 83       	std	Y+4, r19	; 0x04
    16ca:	2b 83       	std	Y+3, r18	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	91 05       	cpc	r25, r1
    16d4:	49 f1       	breq	.+82     	; 0x1728 <DIO_ToggleBit+0x86>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	2c f4       	brge	.+10     	; 0x16ea <DIO_ToggleBit+0x48>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	61 f0       	breq	.+24     	; 0x1700 <DIO_ToggleBit+0x5e>
    16e8:	5a c0       	rjmp	.+180    	; 0x179e <DIO_ToggleBit+0xfc>
    16ea:	2b 81       	ldd	r18, Y+3	; 0x03
    16ec:	3c 81       	ldd	r19, Y+4	; 0x04
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	71 f1       	breq	.+92     	; 0x1750 <DIO_ToggleBit+0xae>
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	e9 f1       	breq	.+122    	; 0x1778 <DIO_ToggleBit+0xd6>
    16fe:	4f c0       	rjmp	.+158    	; 0x179e <DIO_ToggleBit+0xfc>
		{
			case PORTA : TOGGLE_Bit(PORTA_Reg,pin_ID) ; break;
    1700:	ab e3       	ldi	r26, 0x3B	; 59
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e3       	ldi	r30, 0x3B	; 59
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_ToggleBit+0x7c>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_ToggleBit+0x78>
    1722:	84 27       	eor	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	3b c0       	rjmp	.+118    	; 0x179e <DIO_ToggleBit+0xfc>
			case PORTB : TOGGLE_Bit(PORTB_Reg,pin_ID) ; break;
    1728:	a8 e3       	ldi	r26, 0x38	; 56
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e8 e3       	ldi	r30, 0x38	; 56
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_ToggleBit+0xa4>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_ToggleBit+0xa0>
    174a:	84 27       	eor	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	27 c0       	rjmp	.+78     	; 0x179e <DIO_ToggleBit+0xfc>
			case PORTC : TOGGLE_Bit(PORTC_Reg,pin_ID) ; break;
    1750:	a5 e3       	ldi	r26, 0x35	; 53
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e3       	ldi	r30, 0x35	; 53
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_ToggleBit+0xcc>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_ToggleBit+0xc8>
    1772:	84 27       	eor	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	13 c0       	rjmp	.+38     	; 0x179e <DIO_ToggleBit+0xfc>
			case PORTD : TOGGLE_Bit(PORTD_Reg,pin_ID) ; break;
    1778:	a2 e3       	ldi	r26, 0x32	; 50
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e2 e3       	ldi	r30, 0x32	; 50
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_ToggleBit+0xf4>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_ToggleBit+0xf0>
    179a:	84 27       	eor	r24, r20
    179c:	8c 93       	st	X, r24
		}
	}

}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <ADC_Initialize>:

#include "ADC.h"


void ADC_Initialize(void)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
/************** Selecting Voltage Reference **************/
	ADMUX_Reg &= ADC_VOLTAGE_REF_clr_msk ;
    17b4:	a7 e2       	ldi	r26, 0x27	; 39
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e7 e2       	ldi	r30, 0x27	; 39
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8f 73       	andi	r24, 0x3F	; 63
    17c0:	8c 93       	st	X, r24
	ADMUX_Reg |= ADC_VOLTAGE_REF_SELECTOR_msk ;
    17c2:	a7 e2       	ldi	r26, 0x27	; 39
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e7 e2       	ldi	r30, 0x27	; 39
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8c 93       	st	X, r24
	#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
		SET_Bit(ADCSRA_Reg,5);
		SFIOR_Reg &= ADC_AUTO_TRIG_SRC_clr_msk ;
		SFIOR_Reg |= ADC_AUTO_TRIG_SRCE_SELECTOR ;
	#elif ADC_MODE_SELECTOR == ADC_MODE_SINGLE_CONVERSION
		CLEAR_Bit(ADCSRA_Reg,5);
    17ce:	a6 e2       	ldi	r26, 0x26	; 38
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e6 e2       	ldi	r30, 0x26	; 38
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 7d       	andi	r24, 0xDF	; 223
    17da:	8c 93       	st	X, r24
	#endif
/*********************************************************/

/*************** Selecting ADC Adjustment ****************/
	#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
		CLEAR_Bit(ADMUX_Reg,5);
    17dc:	a7 e2       	ldi	r26, 0x27	; 39
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e7 e2       	ldi	r30, 0x27	; 39
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 7d       	andi	r24, 0xDF	; 223
    17e8:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg,5);
	#endif
/*********************************************************/

/*************** Clearing Interrupt Flag *****************/
		SET_Bit(ADCSRA_Reg,4);
    17ea:	a6 e2       	ldi	r26, 0x26	; 38
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e6 e2       	ldi	r30, 0x26	; 38
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 61       	ori	r24, 0x10	; 16
    17f6:	8c 93       	st	X, r24
/*********************************************************/

/******************** Enabling ADC ***********************/
		SET_Bit(ADCSRA_Reg,7);
    17f8:	a6 e2       	ldi	r26, 0x26	; 38
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e6 e2       	ldi	r30, 0x26	; 38
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	8c 93       	st	X, r24
}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <ADC_StartConversion>:

void ADC_StartConversion(ADC_Channel_types ADC_Channel)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	0f 92       	push	r0
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	89 83       	std	Y+1, r24	; 0x01
/***************** Selecting ADC Channel ********************/
	ADMUX_Reg &= ADC_CHANNEL_SELECTOR_clr_msl ;
    1818:	a7 e2       	ldi	r26, 0x27	; 39
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e7 e2       	ldi	r30, 0x27	; 39
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	80 7e       	andi	r24, 0xE0	; 224
    1824:	8c 93       	st	X, r24
	ADMUX_Reg |= ADC_Channel ;
    1826:	a7 e2       	ldi	r26, 0x27	; 39
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e7 e2       	ldi	r30, 0x27	; 39
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	90 81       	ld	r25, Z
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	89 2b       	or	r24, r25
    1834:	8c 93       	st	X, r24
/************************************************************/

/***************** ADC Start Conversion *********************/
	SET_Bit(ADCSRA_Reg , 6);
    1836:	a6 e2       	ldi	r26, 0x26	; 38
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e6 e2       	ldi	r30, 0x26	; 38
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	80 64       	ori	r24, 0x40	; 64
    1842:	8c 93       	st	X, r24
}
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <ADC_GetResult>:

uint16 ADC_GetResult(void)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	while(GET_Bit(ADCSRA_Reg,6));
    1854:	e6 e2       	ldi	r30, 0x26	; 38
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	82 95       	swap	r24
    185c:	86 95       	lsr	r24
    185e:	86 95       	lsr	r24
    1860:	83 70       	andi	r24, 0x03	; 3
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	90 70       	andi	r25, 0x00	; 0
    186a:	88 23       	and	r24, r24
    186c:	99 f7       	brne	.-26     	; 0x1854 <ADC_GetResult+0x8>
	return ADCLH_Reg;
    186e:	e4 e2       	ldi	r30, 0x24	; 36
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
}
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <Seven_Segmant_Initialization>:
 */

#include "Seven_Segmant.h"

void Seven_Segmant_Initialization()
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORTA, Pin4, Output); //A
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	64 e0       	ldi	r22, 0x04	; 4
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, Pin5, Output); //B
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	65 e0       	ldi	r22, 0x05	; 5
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, Pin6, Output); //C
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	66 e0       	ldi	r22, 0x06	; 6
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, Pin7, Output); //D
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	67 e0       	ldi	r22, 0x07	; 7
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>

	DIO_SetPinDirection(PORTB, Pin0, Output);
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	41 e0       	ldi	r20, 0x01	; 1
    18b2:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB, Pin1, Output);
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <Seven_Segmant_Enable1>:

void Seven_Segmant_Enable1()
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, Pin0, HIGH);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <Seven_Segmant_Enable2>:

void Seven_Segmant_Enable2()
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, Pin1, HIGH);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <Seven_Segmant_Disable1>:

void Seven_Segmant_Disable1()
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, Pin0, LOW);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
}
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <Seven_Segmant_Disable2>:

void Seven_Segmant_Disable2()
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, Pin1, LOW);
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <Seven_Segmant_Write_Number>:

void Seven_Segmant_Write_Number(unsigned char number)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	0f 92       	push	r0
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	89 83       	std	Y+1, r24	; 0x01
	if(number < 10)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	8a 30       	cpi	r24, 0x0A	; 10
    1936:	30 f5       	brcc	.+76     	; 0x1984 <Seven_Segmant_Write_Number+0x5e>
	{
		DIO_SetPinValue(PORTA, Pin4, GET_Bit(number , 0)); //A
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	98 2f       	mov	r25, r24
    193c:	91 70       	andi	r25, 0x01	; 1
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	64 e0       	ldi	r22, 0x04	; 4
    1942:	49 2f       	mov	r20, r25
    1944:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA, Pin5, GET_Bit(number , 1)); //B
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	86 95       	lsr	r24
    194c:	98 2f       	mov	r25, r24
    194e:	91 70       	andi	r25, 0x01	; 1
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	65 e0       	ldi	r22, 0x05	; 5
    1954:	49 2f       	mov	r20, r25
    1956:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA, Pin6, GET_Bit(number , 2)); //C
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	86 95       	lsr	r24
    195e:	86 95       	lsr	r24
    1960:	98 2f       	mov	r25, r24
    1962:	91 70       	andi	r25, 0x01	; 1
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	66 e0       	ldi	r22, 0x06	; 6
    1968:	49 2f       	mov	r20, r25
    196a:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA, Pin7, GET_Bit(number , 3)); //D
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	86 95       	lsr	r24
    1972:	86 95       	lsr	r24
    1974:	86 95       	lsr	r24
    1976:	98 2f       	mov	r25, r24
    1978:	91 70       	andi	r25, 0x01	; 1
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	67 e0       	ldi	r22, 0x07	; 7
    197e:	49 2f       	mov	r20, r25
    1980:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	}
}
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <LCD_WriteCmd>:
#include "../../MCAL/DIO/DIO.h"

static uint8 InitSetupFinished = 0;

void LCD_WriteCmd(uint8 Cmd)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	ab 97       	sbiw	r28, 0x2b	; 43
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_SetPinValue(PORTB, Pin1, LOW); //Rs = 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB, Pin2, LOW); //Rw = 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	62 e0       	ldi	r22, 0x02	; 2
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	DIO_SetPinValue(PORTC, Pin4, GET_Bit(Cmd,4));
    19b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b8:	82 95       	swap	r24
    19ba:	8f 70       	andi	r24, 0x0F	; 15
    19bc:	98 2f       	mov	r25, r24
    19be:	91 70       	andi	r25, 0x01	; 1
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	64 e0       	ldi	r22, 0x04	; 4
    19c4:	49 2f       	mov	r20, r25
    19c6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin5, GET_Bit(Cmd,5));
    19ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    19cc:	82 95       	swap	r24
    19ce:	86 95       	lsr	r24
    19d0:	87 70       	andi	r24, 0x07	; 7
    19d2:	98 2f       	mov	r25, r24
    19d4:	91 70       	andi	r25, 0x01	; 1
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	65 e0       	ldi	r22, 0x05	; 5
    19da:	49 2f       	mov	r20, r25
    19dc:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin6, GET_Bit(Cmd,6));
    19e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e2:	82 95       	swap	r24
    19e4:	86 95       	lsr	r24
    19e6:	86 95       	lsr	r24
    19e8:	83 70       	andi	r24, 0x03	; 3
    19ea:	98 2f       	mov	r25, r24
    19ec:	91 70       	andi	r25, 0x01	; 1
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	66 e0       	ldi	r22, 0x06	; 6
    19f2:	49 2f       	mov	r20, r25
    19f4:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin7, GET_Bit(Cmd,7));
    19f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19fa:	98 2f       	mov	r25, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	99 27       	eor	r25, r25
    1a00:	99 1f       	adc	r25, r25
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	67 e0       	ldi	r22, 0x07	; 7
    1a06:	49 2f       	mov	r20, r25
    1a08:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	DIO_SetPinValue(PORTB, Pin3, HIGH);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	63 e0       	ldi	r22, 0x03	; 3
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 e8       	ldi	r26, 0x80	; 128
    1a1c:	bf e3       	ldi	r27, 0x3F	; 63
    1a1e:	8f a3       	std	Y+39, r24	; 0x27
    1a20:	98 a7       	std	Y+40, r25	; 0x28
    1a22:	a9 a7       	std	Y+41, r26	; 0x29
    1a24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6f a1       	ldd	r22, Y+39	; 0x27
    1a28:	78 a5       	ldd	r23, Y+40	; 0x28
    1a2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a e7       	ldi	r20, 0x7A	; 122
    1a34:	55 e4       	ldi	r21, 0x45	; 69
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8b a3       	std	Y+35, r24	; 0x23
    1a40:	9c a3       	std	Y+36, r25	; 0x24
    1a42:	ad a3       	std	Y+37, r26	; 0x25
    1a44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a46:	6b a1       	ldd	r22, Y+35	; 0x23
    1a48:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <LCD_WriteCmd+0xdc>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9a a3       	std	Y+34, r25	; 0x22
    1a64:	89 a3       	std	Y+33, r24	; 0x21
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <LCD_WriteCmd+0x15a>
	else if (__tmp > 65535)
    1a68:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <LCD_WriteCmd+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6f a1       	ldd	r22, Y+39	; 0x27
    1a82:	78 a5       	ldd	r23, Y+40	; 0x28
    1a84:	89 a5       	ldd	r24, Y+41	; 0x29
    1a86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9a a3       	std	Y+34, r25	; 0x22
    1aa6:	89 a3       	std	Y+33, r24	; 0x21
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_WriteCmd+0x13c>
    1aaa:	80 e9       	ldi	r24, 0x90	; 144
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	98 a3       	std	Y+32, r25	; 0x20
    1ab0:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ab4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_WriteCmd+0x12a>
    1aba:	98 a3       	std	Y+32, r25	; 0x20
    1abc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9a a3       	std	Y+34, r25	; 0x22
    1ac6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aca:	9a a1       	ldd	r25, Y+34	; 0x22
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <LCD_WriteCmd+0x11e>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <LCD_WriteCmd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9a a3       	std	Y+34, r25	; 0x22
    1ae4:	89 a3       	std	Y+33, r24	; 0x21
    1ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aea:	9e 8f       	std	Y+30, r25	; 0x1e
    1aec:	8d 8f       	std	Y+29, r24	; 0x1d
    1aee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_WriteCmd+0x166>
    1af6:	9e 8f       	std	Y+30, r25	; 0x1e
    1af8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_SetPinValue(PORTB, Pin3, LOW);
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	63 e0       	ldi	r22, 0x03	; 3
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	if(InitSetupFinished)
    1b04:	80 91 90 00 	lds	r24, 0x0090
    1b08:	88 23       	and	r24, r24
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <LCD_WriteCmd+0x182>
    1b0c:	a2 c0       	rjmp	.+324    	; 0x1c52 <LCD_WriteCmd+0x2c6>
	{

	DIO_SetPinValue(PORTC, Pin4, GET_Bit(Cmd,0));
    1b0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b10:	98 2f       	mov	r25, r24
    1b12:	91 70       	andi	r25, 0x01	; 1
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	64 e0       	ldi	r22, 0x04	; 4
    1b18:	49 2f       	mov	r20, r25
    1b1a:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin5, GET_Bit(Cmd,1));
    1b1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b20:	86 95       	lsr	r24
    1b22:	98 2f       	mov	r25, r24
    1b24:	91 70       	andi	r25, 0x01	; 1
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	65 e0       	ldi	r22, 0x05	; 5
    1b2a:	49 2f       	mov	r20, r25
    1b2c:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin6, GET_Bit(Cmd,2));
    1b30:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b32:	86 95       	lsr	r24
    1b34:	86 95       	lsr	r24
    1b36:	98 2f       	mov	r25, r24
    1b38:	91 70       	andi	r25, 0x01	; 1
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	66 e0       	ldi	r22, 0x06	; 6
    1b3e:	49 2f       	mov	r20, r25
    1b40:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin7, GET_Bit(Cmd,3));
    1b44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b46:	86 95       	lsr	r24
    1b48:	86 95       	lsr	r24
    1b4a:	86 95       	lsr	r24
    1b4c:	98 2f       	mov	r25, r24
    1b4e:	91 70       	andi	r25, 0x01	; 1
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	67 e0       	ldi	r22, 0x07	; 7
    1b54:	49 2f       	mov	r20, r25
    1b56:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	DIO_SetPinValue(PORTB, Pin3, HIGH);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	63 e0       	ldi	r22, 0x03	; 3
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a0 e8       	ldi	r26, 0x80	; 128
    1b6a:	bf e3       	ldi	r27, 0x3F	; 63
    1b6c:	89 8f       	std	Y+25, r24	; 0x19
    1b6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b70:	ab 8f       	std	Y+27, r26	; 0x1b
    1b72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	69 8d       	ldd	r22, Y+25	; 0x19
    1b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a e7       	ldi	r20, 0x7A	; 122
    1b82:	55 e4       	ldi	r21, 0x45	; 69
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	8d 8b       	std	Y+21, r24	; 0x15
    1b8e:	9e 8b       	std	Y+22, r25	; 0x16
    1b90:	af 8b       	std	Y+23, r26	; 0x17
    1b92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b94:	6d 89       	ldd	r22, Y+21	; 0x15
    1b96:	7e 89       	ldd	r23, Y+22	; 0x16
    1b98:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <LCD_WriteCmd+0x22a>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	3f c0       	rjmp	.+126    	; 0x1c34 <LCD_WriteCmd+0x2a8>
	else if (__tmp > 65535)
    1bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bba:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	4c f5       	brge	.+82     	; 0x1c20 <LCD_WriteCmd+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9c 8b       	std	Y+20, r25	; 0x14
    1bf4:	8b 8b       	std	Y+19, r24	; 0x13
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <LCD_WriteCmd+0x28a>
    1bf8:	80 e9       	ldi	r24, 0x90	; 144
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	9a 8b       	std	Y+18, r25	; 0x12
    1bfe:	89 8b       	std	Y+17, r24	; 0x11
    1c00:	89 89       	ldd	r24, Y+17	; 0x11
    1c02:	9a 89       	ldd	r25, Y+18	; 0x12
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_WriteCmd+0x278>
    1c08:	9a 8b       	std	Y+18, r25	; 0x12
    1c0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	9c 8b       	std	Y+20, r25	; 0x14
    1c14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	8b 89       	ldd	r24, Y+19	; 0x13
    1c18:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <LCD_WriteCmd+0x26c>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <LCD_WriteCmd+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	6d 89       	ldd	r22, Y+21	; 0x15
    1c22:	7e 89       	ldd	r23, Y+22	; 0x16
    1c24:	8f 89       	ldd	r24, Y+23	; 0x17
    1c26:	98 8d       	ldd	r25, Y+24	; 0x18
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9c 8b       	std	Y+20, r25	; 0x14
    1c32:	8b 8b       	std	Y+19, r24	; 0x13
    1c34:	8b 89       	ldd	r24, Y+19	; 0x13
    1c36:	9c 89       	ldd	r25, Y+20	; 0x14
    1c38:	98 8b       	std	Y+16, r25	; 0x10
    1c3a:	8f 87       	std	Y+15, r24	; 0x0f
    1c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3e:	98 89       	ldd	r25, Y+16	; 0x10
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_WriteCmd+0x2b4>
    1c44:	98 8b       	std	Y+16, r25	; 0x10
    1c46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(PORTB, Pin3, LOW);
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	63 e0       	ldi	r22, 0x03	; 3
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e0       	ldi	r26, 0x00	; 0
    1c58:	b0 e4       	ldi	r27, 0x40	; 64
    1c5a:	8b 87       	std	Y+11, r24	; 0x0b
    1c5c:	9c 87       	std	Y+12, r25	; 0x0c
    1c5e:	ad 87       	std	Y+13, r26	; 0x0d
    1c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a e7       	ldi	r20, 0x7A	; 122
    1c70:	55 e4       	ldi	r21, 0x45	; 69
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8f 83       	std	Y+7, r24	; 0x07
    1c7c:	98 87       	std	Y+8, r25	; 0x08
    1c7e:	a9 87       	std	Y+9, r26	; 0x09
    1c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_WriteCmd+0x318>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_WriteCmd+0x396>
	else if (__tmp > 65535)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_WriteCmd+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_WriteCmd+0x378>
    1ce6:	80 e9       	ldi	r24, 0x90	; 144
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	8b 83       	std	Y+3, r24	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_WriteCmd+0x366>
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_WriteCmd+0x35a>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_WriteCmd+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_WriteCmd+0x3a2>
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01

	}

	_delay_ms(2);
}
    1d36:	ab 96       	adiw	r28, 0x2b	; 43
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <LCD_Initialization>:

void LCD_Initialization()
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	e8 97       	sbiw	r28, 0x38	; 56
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(PORTC, Output);
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTB, Output);
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_SetPortDirection>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a0 ef       	ldi	r26, 0xF0	; 240
    1d72:	b1 e4       	ldi	r27, 0x41	; 65
    1d74:	8d ab       	std	Y+53, r24	; 0x35
    1d76:	9e ab       	std	Y+54, r25	; 0x36
    1d78:	af ab       	std	Y+55, r26	; 0x37
    1d7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d80:	8f a9       	ldd	r24, Y+55	; 0x37
    1d82:	98 ad       	ldd	r25, Y+56	; 0x38
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a e7       	ldi	r20, 0x7A	; 122
    1d8a:	55 e4       	ldi	r21, 0x45	; 69
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	89 ab       	std	Y+49, r24	; 0x31
    1d96:	9a ab       	std	Y+50, r25	; 0x32
    1d98:	ab ab       	std	Y+51, r26	; 0x33
    1d9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1da0:	8b a9       	ldd	r24, Y+51	; 0x33
    1da2:	9c a9       	ldd	r25, Y+52	; 0x34
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <LCD_Initialization+0x76>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	98 ab       	std	Y+48, r25	; 0x30
    1dba:	8f a7       	std	Y+47, r24	; 0x2f
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <LCD_Initialization+0xf4>
	else if (__tmp > 65535)
    1dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <LCD_Initialization+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dda:	8f a9       	ldd	r24, Y+55	; 0x37
    1ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	98 ab       	std	Y+48, r25	; 0x30
    1dfc:	8f a7       	std	Y+47, r24	; 0x2f
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <LCD_Initialization+0xd6>
    1e00:	80 e9       	ldi	r24, 0x90	; 144
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	9e a7       	std	Y+46, r25	; 0x2e
    1e06:	8d a7       	std	Y+45, r24	; 0x2d
    1e08:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_Initialization+0xc4>
    1e10:	9e a7       	std	Y+46, r25	; 0x2e
    1e12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e16:	98 a9       	ldd	r25, Y+48	; 0x30
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	98 ab       	std	Y+48, r25	; 0x30
    1e1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e20:	98 a9       	ldd	r25, Y+48	; 0x30
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <LCD_Initialization+0xb8>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <LCD_Initialization+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	98 ab       	std	Y+48, r25	; 0x30
    1e3a:	8f a7       	std	Y+47, r24	; 0x2f
    1e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e40:	9c a7       	std	Y+44, r25	; 0x2c
    1e42:	8b a7       	std	Y+43, r24	; 0x2b
    1e44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e46:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_Initialization+0x100>
    1e4c:	9c a7       	std	Y+44, r25	; 0x2c
    1e4e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(30);

	LCD_WriteCmd(0x20);
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
	LCD_WriteCmd(0x20);
    1e56:	80 e2       	ldi	r24, 0x20	; 32
    1e58:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
	LCD_WriteCmd(0x80);
    1e5c:	80 e8       	ldi	r24, 0x80	; 128
    1e5e:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	8f a3       	std	Y+39, r24	; 0x27
    1e6c:	98 a7       	std	Y+40, r25	; 0x28
    1e6e:	a9 a7       	std	Y+41, r26	; 0x29
    1e70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6f a1       	ldd	r22, Y+39	; 0x27
    1e74:	78 a5       	ldd	r23, Y+40	; 0x28
    1e76:	89 a5       	ldd	r24, Y+41	; 0x29
    1e78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a e7       	ldi	r20, 0x7A	; 122
    1e80:	55 e4       	ldi	r21, 0x45	; 69
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8b a3       	std	Y+35, r24	; 0x23
    1e8c:	9c a3       	std	Y+36, r25	; 0x24
    1e8e:	ad a3       	std	Y+37, r26	; 0x25
    1e90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e92:	6b a1       	ldd	r22, Y+35	; 0x23
    1e94:	7c a1       	ldd	r23, Y+36	; 0x24
    1e96:	8d a1       	ldd	r24, Y+37	; 0x25
    1e98:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <LCD_Initialization+0x16c>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9a a3       	std	Y+34, r25	; 0x22
    1eb0:	89 a3       	std	Y+33, r24	; 0x21
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <LCD_Initialization+0x1ea>
	else if (__tmp > 65535)
    1eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eba:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <LCD_Initialization+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ece:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9a a3       	std	Y+34, r25	; 0x22
    1ef2:	89 a3       	std	Y+33, r24	; 0x21
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_Initialization+0x1cc>
    1ef6:	80 e9       	ldi	r24, 0x90	; 144
    1ef8:	91 e0       	ldi	r25, 0x01	; 1
    1efa:	98 a3       	std	Y+32, r25	; 0x20
    1efc:	8f 8f       	std	Y+31, r24	; 0x1f
    1efe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f00:	98 a1       	ldd	r25, Y+32	; 0x20
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_Initialization+0x1ba>
    1f06:	98 a3       	std	Y+32, r25	; 0x20
    1f08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9a a3       	std	Y+34, r25	; 0x22
    1f12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	89 a1       	ldd	r24, Y+33	; 0x21
    1f16:	9a a1       	ldd	r25, Y+34	; 0x22
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LCD_Initialization+0x1ae>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <LCD_Initialization+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f20:	7c a1       	ldd	r23, Y+36	; 0x24
    1f22:	8d a1       	ldd	r24, Y+37	; 0x25
    1f24:	9e a1       	ldd	r25, Y+38	; 0x26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	9e 8f       	std	Y+30, r25	; 0x1e
    1f38:	8d 8f       	std	Y+29, r24	; 0x1d
    1f3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_Initialization+0x1f6>
    1f42:	9e 8f       	std	Y+30, r25	; 0x1e
    1f44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_WriteCmd(0x00);
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
	LCD_WriteCmd(0xF0);
    1f4c:	80 ef       	ldi	r24, 0xF0	; 240
    1f4e:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 e8       	ldi	r26, 0x80	; 128
    1f58:	bf e3       	ldi	r27, 0x3F	; 63
    1f5a:	89 8f       	std	Y+25, r24	; 0x19
    1f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a e7       	ldi	r20, 0x7A	; 122
    1f70:	55 e4       	ldi	r21, 0x45	; 69
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8d 8b       	std	Y+21, r24	; 0x15
    1f7c:	9e 8b       	std	Y+22, r25	; 0x16
    1f7e:	af 8b       	std	Y+23, r26	; 0x17
    1f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <LCD_Initialization+0x25c>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <LCD_Initialization+0x2da>
	else if (__tmp > 65535)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	3f ef       	ldi	r19, 0xFF	; 255
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	57 e4       	ldi	r21, 0x47	; 71
    1fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	4c f5       	brge	.+82     	; 0x200e <LCD_Initialization+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <LCD_Initialization+0x2bc>
    1fe6:	80 e9       	ldi	r24, 0x90	; 144
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_Initialization+0x2aa>
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <LCD_Initialization+0x29e>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <LCD_Initialization+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	98 89       	ldd	r25, Y+16	; 0x10
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_Initialization+0x2e6>
    2032:	98 8b       	std	Y+16, r25	; 0x10
    2034:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	LCD_WriteCmd(0x00);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
	LCD_WriteCmd(0x10);
    203c:	80 e1       	ldi	r24, 0x10	; 16
    203e:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e0       	ldi	r26, 0x00	; 0
    2048:	b0 e4       	ldi	r27, 0x40	; 64
    204a:	8b 87       	std	Y+11, r24	; 0x0b
    204c:	9c 87       	std	Y+12, r25	; 0x0c
    204e:	ad 87       	std	Y+13, r26	; 0x0d
    2050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6b 85       	ldd	r22, Y+11	; 0x0b
    2054:	7c 85       	ldd	r23, Y+12	; 0x0c
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a e7       	ldi	r20, 0x7A	; 122
    2060:	55 e4       	ldi	r21, 0x45	; 69
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8f 83       	std	Y+7, r24	; 0x07
    206c:	98 87       	std	Y+8, r25	; 0x08
    206e:	a9 87       	std	Y+9, r26	; 0x09
    2070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_Initialization+0x34c>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <LCD_Initialization+0x3ca>
	else if (__tmp > 65535)
    2094:	6f 81       	ldd	r22, Y+7	; 0x07
    2096:	78 85       	ldd	r23, Y+8	; 0x08
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <LCD_Initialization+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <LCD_Initialization+0x3ac>
    20d6:	80 e9       	ldi	r24, 0x90	; 144
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_Initialization+0x39a>
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <LCD_Initialization+0x38e>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <LCD_Initialization+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_Initialization+0x3d6>
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	InitSetupFinished = 1 ;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 93 90 00 	sts	0x0090, r24

}
    212c:	e8 96       	adiw	r28, 0x38	; 56
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <LCD_WriteData>:

void LCD_WriteData(uint8 Data)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	ab 97       	sbiw	r28, 0x2b	; 43
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_SetPinValue(PORTB, Pin1, HIGH); //Rs = 1
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB, Pin2, LOW); //Rw = 0
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	62 e0       	ldi	r22, 0x02	; 2
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	DIO_SetPinValue(PORTC, Pin4, GET_Bit(Data,4));
    2168:	8b a5       	ldd	r24, Y+43	; 0x2b
    216a:	82 95       	swap	r24
    216c:	8f 70       	andi	r24, 0x0F	; 15
    216e:	98 2f       	mov	r25, r24
    2170:	91 70       	andi	r25, 0x01	; 1
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	64 e0       	ldi	r22, 0x04	; 4
    2176:	49 2f       	mov	r20, r25
    2178:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin5, GET_Bit(Data,5));
    217c:	8b a5       	ldd	r24, Y+43	; 0x2b
    217e:	82 95       	swap	r24
    2180:	86 95       	lsr	r24
    2182:	87 70       	andi	r24, 0x07	; 7
    2184:	98 2f       	mov	r25, r24
    2186:	91 70       	andi	r25, 0x01	; 1
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	65 e0       	ldi	r22, 0x05	; 5
    218c:	49 2f       	mov	r20, r25
    218e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin6, GET_Bit(Data,6));
    2192:	8b a5       	ldd	r24, Y+43	; 0x2b
    2194:	82 95       	swap	r24
    2196:	86 95       	lsr	r24
    2198:	86 95       	lsr	r24
    219a:	83 70       	andi	r24, 0x03	; 3
    219c:	98 2f       	mov	r25, r24
    219e:	91 70       	andi	r25, 0x01	; 1
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	66 e0       	ldi	r22, 0x06	; 6
    21a4:	49 2f       	mov	r20, r25
    21a6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin7, GET_Bit(Data,7));
    21aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ac:	98 2f       	mov	r25, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	99 27       	eor	r25, r25
    21b2:	99 1f       	adc	r25, r25
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	67 e0       	ldi	r22, 0x07	; 7
    21b8:	49 2f       	mov	r20, r25
    21ba:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	DIO_SetPinValue(PORTB, Pin3, HIGH);
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	63 e0       	ldi	r22, 0x03	; 3
    21c2:	41 e0       	ldi	r20, 0x01	; 1
    21c4:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	a0 e8       	ldi	r26, 0x80	; 128
    21ce:	bf e3       	ldi	r27, 0x3F	; 63
    21d0:	8f a3       	std	Y+39, r24	; 0x27
    21d2:	98 a7       	std	Y+40, r25	; 0x28
    21d4:	a9 a7       	std	Y+41, r26	; 0x29
    21d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d8:	6f a1       	ldd	r22, Y+39	; 0x27
    21da:	78 a5       	ldd	r23, Y+40	; 0x28
    21dc:	89 a5       	ldd	r24, Y+41	; 0x29
    21de:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4a e7       	ldi	r20, 0x7A	; 122
    21e6:	55 e4       	ldi	r21, 0x45	; 69
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	8b a3       	std	Y+35, r24	; 0x23
    21f2:	9c a3       	std	Y+36, r25	; 0x24
    21f4:	ad a3       	std	Y+37, r26	; 0x25
    21f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21f8:	6b a1       	ldd	r22, Y+35	; 0x23
    21fa:	7c a1       	ldd	r23, Y+36	; 0x24
    21fc:	8d a1       	ldd	r24, Y+37	; 0x25
    21fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220c:	88 23       	and	r24, r24
    220e:	2c f4       	brge	.+10     	; 0x221a <LCD_WriteData+0xdc>
		__ticks = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9a a3       	std	Y+34, r25	; 0x22
    2216:	89 a3       	std	Y+33, r24	; 0x21
    2218:	3f c0       	rjmp	.+126    	; 0x2298 <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    221a:	6b a1       	ldd	r22, Y+35	; 0x23
    221c:	7c a1       	ldd	r23, Y+36	; 0x24
    221e:	8d a1       	ldd	r24, Y+37	; 0x25
    2220:	9e a1       	ldd	r25, Y+38	; 0x26
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	4f e7       	ldi	r20, 0x7F	; 127
    2228:	57 e4       	ldi	r21, 0x47	; 71
    222a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222e:	18 16       	cp	r1, r24
    2230:	4c f5       	brge	.+82     	; 0x2284 <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2232:	6f a1       	ldd	r22, Y+39	; 0x27
    2234:	78 a5       	ldd	r23, Y+40	; 0x28
    2236:	89 a5       	ldd	r24, Y+41	; 0x29
    2238:	9a a5       	ldd	r25, Y+42	; 0x2a
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	51 e4       	ldi	r21, 0x41	; 65
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	9a a3       	std	Y+34, r25	; 0x22
    2258:	89 a3       	std	Y+33, r24	; 0x21
    225a:	0f c0       	rjmp	.+30     	; 0x227a <LCD_WriteData+0x13c>
    225c:	80 e9       	ldi	r24, 0x90	; 144
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	98 a3       	std	Y+32, r25	; 0x20
    2262:	8f 8f       	std	Y+31, r24	; 0x1f
    2264:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2266:	98 a1       	ldd	r25, Y+32	; 0x20
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_WriteData+0x12a>
    226c:	98 a3       	std	Y+32, r25	; 0x20
    226e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	89 a1       	ldd	r24, Y+33	; 0x21
    2272:	9a a1       	ldd	r25, Y+34	; 0x22
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	9a a3       	std	Y+34, r25	; 0x22
    2278:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227a:	89 a1       	ldd	r24, Y+33	; 0x21
    227c:	9a a1       	ldd	r25, Y+34	; 0x22
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	69 f7       	brne	.-38     	; 0x225c <LCD_WriteData+0x11e>
    2282:	14 c0       	rjmp	.+40     	; 0x22ac <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2284:	6b a1       	ldd	r22, Y+35	; 0x23
    2286:	7c a1       	ldd	r23, Y+36	; 0x24
    2288:	8d a1       	ldd	r24, Y+37	; 0x25
    228a:	9e a1       	ldd	r25, Y+38	; 0x26
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9a a3       	std	Y+34, r25	; 0x22
    2296:	89 a3       	std	Y+33, r24	; 0x21
    2298:	89 a1       	ldd	r24, Y+33	; 0x21
    229a:	9a a1       	ldd	r25, Y+34	; 0x22
    229c:	9e 8f       	std	Y+30, r25	; 0x1e
    229e:	8d 8f       	std	Y+29, r24	; 0x1d
    22a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_WriteData+0x166>
    22a8:	9e 8f       	std	Y+30, r25	; 0x1e
    22aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_SetPinValue(PORTB, Pin3, LOW);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	63 e0       	ldi	r22, 0x03	; 3
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	DIO_SetPinValue(PORTC, Pin4, GET_Bit(Data,0));
    22b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b8:	98 2f       	mov	r25, r24
    22ba:	91 70       	andi	r25, 0x01	; 1
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	64 e0       	ldi	r22, 0x04	; 4
    22c0:	49 2f       	mov	r20, r25
    22c2:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin5, GET_Bit(Data,1));
    22c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c8:	86 95       	lsr	r24
    22ca:	98 2f       	mov	r25, r24
    22cc:	91 70       	andi	r25, 0x01	; 1
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	65 e0       	ldi	r22, 0x05	; 5
    22d2:	49 2f       	mov	r20, r25
    22d4:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin6, GET_Bit(Data,2));
    22d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22da:	86 95       	lsr	r24
    22dc:	86 95       	lsr	r24
    22de:	98 2f       	mov	r25, r24
    22e0:	91 70       	andi	r25, 0x01	; 1
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	66 e0       	ldi	r22, 0x06	; 6
    22e6:	49 2f       	mov	r20, r25
    22e8:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	DIO_SetPinValue(PORTC, Pin7, GET_Bit(Data,3));
    22ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ee:	86 95       	lsr	r24
    22f0:	86 95       	lsr	r24
    22f2:	86 95       	lsr	r24
    22f4:	98 2f       	mov	r25, r24
    22f6:	91 70       	andi	r25, 0x01	; 1
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	67 e0       	ldi	r22, 0x07	; 7
    22fc:	49 2f       	mov	r20, r25
    22fe:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	DIO_SetPinValue(PORTB, Pin3, HIGH);
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	63 e0       	ldi	r22, 0x03	; 3
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a0 e8       	ldi	r26, 0x80	; 128
    2312:	bf e3       	ldi	r27, 0x3F	; 63
    2314:	89 8f       	std	Y+25, r24	; 0x19
    2316:	9a 8f       	std	Y+26, r25	; 0x1a
    2318:	ab 8f       	std	Y+27, r26	; 0x1b
    231a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231c:	69 8d       	ldd	r22, Y+25	; 0x19
    231e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2320:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2322:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a e7       	ldi	r20, 0x7A	; 122
    232a:	55 e4       	ldi	r21, 0x45	; 69
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	8d 8b       	std	Y+21, r24	; 0x15
    2336:	9e 8b       	std	Y+22, r25	; 0x16
    2338:	af 8b       	std	Y+23, r26	; 0x17
    233a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    233c:	6d 89       	ldd	r22, Y+21	; 0x15
    233e:	7e 89       	ldd	r23, Y+22	; 0x16
    2340:	8f 89       	ldd	r24, Y+23	; 0x17
    2342:	98 8d       	ldd	r25, Y+24	; 0x18
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2350:	88 23       	and	r24, r24
    2352:	2c f4       	brge	.+10     	; 0x235e <LCD_WriteData+0x220>
		__ticks = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9c 8b       	std	Y+20, r25	; 0x14
    235a:	8b 8b       	std	Y+19, r24	; 0x13
    235c:	3f c0       	rjmp	.+126    	; 0x23dc <LCD_WriteData+0x29e>
	else if (__tmp > 65535)
    235e:	6d 89       	ldd	r22, Y+21	; 0x15
    2360:	7e 89       	ldd	r23, Y+22	; 0x16
    2362:	8f 89       	ldd	r24, Y+23	; 0x17
    2364:	98 8d       	ldd	r25, Y+24	; 0x18
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	4f e7       	ldi	r20, 0x7F	; 127
    236c:	57 e4       	ldi	r21, 0x47	; 71
    236e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2372:	18 16       	cp	r1, r24
    2374:	4c f5       	brge	.+82     	; 0x23c8 <LCD_WriteData+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2376:	69 8d       	ldd	r22, Y+25	; 0x19
    2378:	7a 8d       	ldd	r23, Y+26	; 0x1a
    237a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    237c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9c 8b       	std	Y+20, r25	; 0x14
    239c:	8b 8b       	std	Y+19, r24	; 0x13
    239e:	0f c0       	rjmp	.+30     	; 0x23be <LCD_WriteData+0x280>
    23a0:	80 e9       	ldi	r24, 0x90	; 144
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	9a 8b       	std	Y+18, r25	; 0x12
    23a6:	89 8b       	std	Y+17, r24	; 0x11
    23a8:	89 89       	ldd	r24, Y+17	; 0x11
    23aa:	9a 89       	ldd	r25, Y+18	; 0x12
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_WriteData+0x26e>
    23b0:	9a 8b       	std	Y+18, r25	; 0x12
    23b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b4:	8b 89       	ldd	r24, Y+19	; 0x13
    23b6:	9c 89       	ldd	r25, Y+20	; 0x14
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	9c 8b       	std	Y+20, r25	; 0x14
    23bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23be:	8b 89       	ldd	r24, Y+19	; 0x13
    23c0:	9c 89       	ldd	r25, Y+20	; 0x14
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <LCD_WriteData+0x262>
    23c6:	14 c0       	rjmp	.+40     	; 0x23f0 <LCD_WriteData+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ca:	7e 89       	ldd	r23, Y+22	; 0x16
    23cc:	8f 89       	ldd	r24, Y+23	; 0x17
    23ce:	98 8d       	ldd	r25, Y+24	; 0x18
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9c 8b       	std	Y+20, r25	; 0x14
    23da:	8b 8b       	std	Y+19, r24	; 0x13
    23dc:	8b 89       	ldd	r24, Y+19	; 0x13
    23de:	9c 89       	ldd	r25, Y+20	; 0x14
    23e0:	98 8b       	std	Y+16, r25	; 0x10
    23e2:	8f 87       	std	Y+15, r24	; 0x0f
    23e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e6:	98 89       	ldd	r25, Y+16	; 0x10
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_WriteData+0x2aa>
    23ec:	98 8b       	std	Y+16, r25	; 0x10
    23ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(PORTB, Pin3, LOW);
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	63 e0       	ldi	r22, 0x03	; 3
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	a0 e0       	ldi	r26, 0x00	; 0
    2400:	b0 e4       	ldi	r27, 0x40	; 64
    2402:	8b 87       	std	Y+11, r24	; 0x0b
    2404:	9c 87       	std	Y+12, r25	; 0x0c
    2406:	ad 87       	std	Y+13, r26	; 0x0d
    2408:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240a:	6b 85       	ldd	r22, Y+11	; 0x0b
    240c:	7c 85       	ldd	r23, Y+12	; 0x0c
    240e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2410:	9e 85       	ldd	r25, Y+14	; 0x0e
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4a e7       	ldi	r20, 0x7A	; 122
    2418:	55 e4       	ldi	r21, 0x45	; 69
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	8f 83       	std	Y+7, r24	; 0x07
    2424:	98 87       	std	Y+8, r25	; 0x08
    2426:	a9 87       	std	Y+9, r26	; 0x09
    2428:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e8       	ldi	r20, 0x80	; 128
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243e:	88 23       	and	r24, r24
    2440:	2c f4       	brge	.+10     	; 0x244c <LCD_WriteData+0x30e>
		__ticks = 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	3f c0       	rjmp	.+126    	; 0x24ca <LCD_WriteData+0x38c>
	else if (__tmp > 65535)
    244c:	6f 81       	ldd	r22, Y+7	; 0x07
    244e:	78 85       	ldd	r23, Y+8	; 0x08
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	3f ef       	ldi	r19, 0xFF	; 255
    2458:	4f e7       	ldi	r20, 0x7F	; 127
    245a:	57 e4       	ldi	r21, 0x47	; 71
    245c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2460:	18 16       	cp	r1, r24
    2462:	4c f5       	brge	.+82     	; 0x24b6 <LCD_WriteData+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2464:	6b 85       	ldd	r22, Y+11	; 0x0b
    2466:	7c 85       	ldd	r23, Y+12	; 0x0c
    2468:	8d 85       	ldd	r24, Y+13	; 0x0d
    246a:	9e 85       	ldd	r25, Y+14	; 0x0e
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <LCD_WriteData+0x36e>
    248e:	80 e9       	ldi	r24, 0x90	; 144
    2490:	91 e0       	ldi	r25, 0x01	; 1
    2492:	9c 83       	std	Y+4, r25	; 0x04
    2494:	8b 83       	std	Y+3, r24	; 0x03
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <LCD_WriteData+0x35c>
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a2:	8d 81       	ldd	r24, Y+5	; 0x05
    24a4:	9e 81       	ldd	r25, Y+6	; 0x06
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	69 f7       	brne	.-38     	; 0x248e <LCD_WriteData+0x350>
    24b4:	14 c0       	rjmp	.+40     	; 0x24de <LCD_WriteData+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b6:	6f 81       	ldd	r22, Y+7	; 0x07
    24b8:	78 85       	ldd	r23, Y+8	; 0x08
    24ba:	89 85       	ldd	r24, Y+9	; 0x09
    24bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	9e 81       	ldd	r25, Y+6	; 0x06
    24ce:	9a 83       	std	Y+2, r25	; 0x02
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_WriteData+0x398>
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
}
    24de:	ab 96       	adiw	r28, 0x2b	; 43
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <LCD_GoToPos>:

void LCD_GoToPos(uint8 Row , uint8 Col)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <LCD_GoToPos+0x6>
    24f6:	0f 92       	push	r0
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	8a 83       	std	Y+2, r24	; 0x02
    24fe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	if(Row < 2 && Col < 16)
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	82 30       	cpi	r24, 0x02	; 2
    2504:	c8 f4       	brcc	.+50     	; 0x2538 <LCD_GoToPos+0x48>
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	80 31       	cpi	r24, 0x10	; 16
    250a:	b0 f4       	brcc	.+44     	; 0x2538 <LCD_GoToPos+0x48>
	{
		Address =  (Row * 0x40) + Col ;
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	00 24       	eor	r0, r0
    2514:	96 95       	lsr	r25
    2516:	87 95       	ror	r24
    2518:	07 94       	ror	r0
    251a:	96 95       	lsr	r25
    251c:	87 95       	ror	r24
    251e:	07 94       	ror	r0
    2520:	98 2f       	mov	r25, r24
    2522:	80 2d       	mov	r24, r0
    2524:	98 2f       	mov	r25, r24
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	89 0f       	add	r24, r25
    252a:	89 83       	std	Y+1, r24	; 0x01
		SET_Bit(Address,7) ;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	80 68       	ori	r24, 0x80	; 128
    2530:	89 83       	std	Y+1, r24	; 0x01
		LCD_WriteCmd(Address) ;
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
	}

}
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <LCD_WriteString>:

void LCD_WriteString(uint8* String , uint8 Row , uint8 Col)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <LCD_WriteString+0x6>
    254a:	00 d0       	rcall	.+0      	; 0x254c <LCD_WriteString+0x8>
    254c:	00 d0       	rcall	.+0      	; 0x254e <LCD_WriteString+0xa>
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	9c 83       	std	Y+4, r25	; 0x04
    2554:	8b 83       	std	Y+3, r24	; 0x03
    2556:	6d 83       	std	Y+5, r22	; 0x05
    2558:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPos(Row , Col);
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	6e 81       	ldd	r22, Y+6	; 0x06
    255e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_GoToPos>
	uint8 i = 0 ;
    2562:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Line0 = 0 ;
    2564:	19 82       	std	Y+1, r1	; 0x01
    2566:	6d c0       	rjmp	.+218    	; 0x2642 <LCD_WriteString+0xfe>
	while(*(String+i) != '\0' && ( (i + Col) + (Row * 16) ) < 32 )
	{
		if(((i + Col) + (Row * 16)) < 16)
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	8e 81       	ldd	r24, Y+6	; 0x06
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	28 0f       	add	r18, r24
    2576:	39 1f       	adc	r19, r25
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	82 95       	swap	r24
    2580:	92 95       	swap	r25
    2582:	90 7f       	andi	r25, 0xF0	; 240
    2584:	98 27       	eor	r25, r24
    2586:	80 7f       	andi	r24, 0xF0	; 240
    2588:	98 27       	eor	r25, r24
    258a:	82 0f       	add	r24, r18
    258c:	93 1f       	adc	r25, r19
    258e:	80 31       	cpi	r24, 0x10	; 16
    2590:	91 05       	cpc	r25, r1
    2592:	7c f4       	brge	.+30     	; 0x25b2 <LCD_WriteString+0x6e>
		{
			LCD_WriteData(*(String+i));
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	9c 81       	ldd	r25, Y+4	; 0x04
    259e:	fc 01       	movw	r30, r24
    25a0:	e2 0f       	add	r30, r18
    25a2:	f3 1f       	adc	r31, r19
    25a4:	80 81       	ld	r24, Z
    25a6:	0e 94 9f 10 	call	0x213e	; 0x213e <LCD_WriteData>
			i++;
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	8a 83       	std	Y+2, r24	; 0x02
    25b0:	48 c0       	rjmp	.+144    	; 0x2642 <LCD_WriteString+0xfe>
		}
		else if(((i + Col) + (Row * 16)) == 16 && Line0 == 0)
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	8e 81       	ldd	r24, Y+6	; 0x06
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	28 0f       	add	r18, r24
    25c0:	39 1f       	adc	r19, r25
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	82 95       	swap	r24
    25ca:	92 95       	swap	r25
    25cc:	90 7f       	andi	r25, 0xF0	; 240
    25ce:	98 27       	eor	r25, r24
    25d0:	80 7f       	andi	r24, 0xF0	; 240
    25d2:	98 27       	eor	r25, r24
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	80 31       	cpi	r24, 0x10	; 16
    25da:	91 05       	cpc	r25, r1
    25dc:	59 f4       	brne	.+22     	; 0x25f4 <LCD_WriteString+0xb0>
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	88 23       	and	r24, r24
    25e2:	41 f4       	brne	.+16     	; 0x25f4 <LCD_WriteString+0xb0>
		{
			LCD_GoToPos(1 , 0);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_GoToPos>
			Line0++;
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	8f 5f       	subi	r24, 0xFF	; 255
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	27 c0       	rjmp	.+78     	; 0x2642 <LCD_WriteString+0xfe>
		}
		else if(((i + Col) + (Row * 16)) < 32 && Line0 == 1)
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	8e 81       	ldd	r24, Y+6	; 0x06
    25fc:	88 2f       	mov	r24, r24
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	28 0f       	add	r18, r24
    2602:	39 1f       	adc	r19, r25
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	82 95       	swap	r24
    260c:	92 95       	swap	r25
    260e:	90 7f       	andi	r25, 0xF0	; 240
    2610:	98 27       	eor	r25, r24
    2612:	80 7f       	andi	r24, 0xF0	; 240
    2614:	98 27       	eor	r25, r24
    2616:	82 0f       	add	r24, r18
    2618:	93 1f       	adc	r25, r19
    261a:	80 32       	cpi	r24, 0x20	; 32
    261c:	91 05       	cpc	r25, r1
    261e:	8c f4       	brge	.+34     	; 0x2642 <LCD_WriteString+0xfe>
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	71 f4       	brne	.+28     	; 0x2642 <LCD_WriteString+0xfe>
		{
			LCD_WriteData(*(String+i));
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	80 81       	ld	r24, Z
    2638:	0e 94 9f 10 	call	0x213e	; 0x213e <LCD_WriteData>
			i++;
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	8f 5f       	subi	r24, 0xFF	; 255
    2640:	8a 83       	std	Y+2, r24	; 0x02
void LCD_WriteString(uint8* String , uint8 Row , uint8 Col)
{
	LCD_GoToPos(Row , Col);
	uint8 i = 0 ;
	uint8 Line0 = 0 ;
	while(*(String+i) != '\0' && ( (i + Col) + (Row * 16) ) < 32 )
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	80 81       	ld	r24, Z
    2654:	88 23       	and	r24, r24
    2656:	b9 f0       	breq	.+46     	; 0x2686 <LCD_WriteString+0x142>
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	8e 81       	ldd	r24, Y+6	; 0x06
    2660:	88 2f       	mov	r24, r24
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	28 0f       	add	r18, r24
    2666:	39 1f       	adc	r19, r25
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	88 2f       	mov	r24, r24
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	82 95       	swap	r24
    2670:	92 95       	swap	r25
    2672:	90 7f       	andi	r25, 0xF0	; 240
    2674:	98 27       	eor	r25, r24
    2676:	80 7f       	andi	r24, 0xF0	; 240
    2678:	98 27       	eor	r25, r24
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	80 32       	cpi	r24, 0x20	; 32
    2680:	91 05       	cpc	r25, r1
    2682:	0c f4       	brge	.+2      	; 0x2686 <LCD_WriteString+0x142>
    2684:	71 cf       	rjmp	.-286    	; 0x2568 <LCD_WriteString+0x24>
			LCD_WriteData(*(String+i));
			i++;
		}

	}
}
    2686:	26 96       	adiw	r28, 0x06	; 6
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <LCD_StorePattern>:

void LCD_StorePattern(uint8* Pattern,uint8 Index)
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	00 d0       	rcall	.+0      	; 0x269e <LCD_StorePattern+0x6>
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <LCD_StorePattern+0x8>
    26a0:	0f 92       	push	r0
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
    26aa:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Adress;
	if(Index < 8)
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	88 30       	cpi	r24, 0x08	; 8
    26b0:	18 f5       	brcc	.+70     	; 0x26f8 <LCD_StorePattern+0x60>
	{
		Adress = 0x00 + 8*Index ;
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	88 2f       	mov	r24, r24
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	8a 83       	std	Y+2, r24	; 0x02
		SET_Bit(Adress , 6);
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	80 64       	ori	r24, 0x40	; 64
    26ca:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteCmd(Adress);
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
		for(uint8 i = 0 ; i < 8 ; i++)
    26d2:	19 82       	std	Y+1, r1	; 0x01
    26d4:	0e c0       	rjmp	.+28     	; 0x26f2 <LCD_StorePattern+0x5a>
		{
			LCD_WriteData(Pattern[i]);
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	fc 01       	movw	r30, r24
    26e2:	e2 0f       	add	r30, r18
    26e4:	f3 1f       	adc	r31, r19
    26e6:	80 81       	ld	r24, Z
    26e8:	0e 94 9f 10 	call	0x213e	; 0x213e <LCD_WriteData>
	if(Index < 8)
	{
		Adress = 0x00 + 8*Index ;
		SET_Bit(Adress , 6);
		LCD_WriteCmd(Adress);
		for(uint8 i = 0 ; i < 8 ; i++)
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	8f 5f       	subi	r24, 0xFF	; 255
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	88 30       	cpi	r24, 0x08	; 8
    26f6:	78 f3       	brcs	.-34     	; 0x26d6 <LCD_StorePattern+0x3e>
		{
			LCD_WriteData(Pattern[i]);
		}
	}
	LCD_WriteCmd(0x02); // Return Ac to DDRAM
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_WriteCmd>
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <LCD_WritePattern>:

void LCD_WritePattern(uint8 Index , uint8 Row , uint8 Col)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	00 d0       	rcall	.+0      	; 0x2714 <LCD_WritePattern+0x6>
    2714:	0f 92       	push	r0
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	6a 83       	std	Y+2, r22	; 0x02
    271e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToPos(Row , Col);
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	6b 81       	ldd	r22, Y+3	; 0x03
    2724:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_GoToPos>
	LCD_WriteData(Index);
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	0e 94 9f 10 	call	0x213e	; 0x213e <LCD_WriteData>
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <ADC_Lab>:
#include "../MCAL/DIO/DIO.h"
#include "../HAL/LCD/LCD.h"
#include <util/delay.h>

void ADC_Lab(void)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	2c 97       	sbiw	r28, 0x0c	; 12
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
	uint16 value ;
	uint8 stringvalue[8] ;
	DIO_SetPortDirection(PORTC, Output) ;
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTB, Output) ;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_SetPortDirection>
	DIO_SetPinDirection(PORTA, Pin0, Input);
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	STD_levelTypes Button = LOW;
    2768:	1a 82       	std	Y+2, r1	; 0x02
	STD_levelTypes Button2 = LOW;
    276a:	19 82       	std	Y+1, r1	; 0x01
	ADC_Initialize();
    276c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <ADC_Initialize>
	LCD_Initialization();
    2770:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <LCD_Initialization>
	while(1)
	{
		Button = DIO_GetPinValue(PORTA, Pin0);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    277c:	8a 83       	std	Y+2, r24	; 0x02
		if(Button == HIGH && Button2 == LOW)
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	e9 f4       	brne	.+58     	; 0x27be <ADC_Lab+0x84>
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	88 23       	and	r24, r24
    2788:	d1 f4       	brne	.+52     	; 0x27be <ADC_Lab+0x84>
			{
				ADC_StartConversion(ADC_Channel_1);
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	0e 94 06 0c 	call	0x180c	; 0x180c <ADC_StartConversion>
				value = ADC_GetResult();
    2790:	0e 94 26 0c 	call	0x184c	; 0x184c <ADC_GetResult>
    2794:	9c 83       	std	Y+4, r25	; 0x04
    2796:	8b 83       	std	Y+3, r24	; 0x03
				itoa(value/2,stringvalue,10) ;
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	96 95       	lsr	r25
    279e:	87 95       	ror	r24
    27a0:	9e 01       	movw	r18, r28
    27a2:	2b 5f       	subi	r18, 0xFB	; 251
    27a4:	3f 4f       	sbci	r19, 0xFF	; 255
    27a6:	b9 01       	movw	r22, r18
    27a8:	4a e0       	ldi	r20, 0x0A	; 10
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <itoa>
				LCD_WriteString(stringvalue, 0, 5);
    27b0:	ce 01       	movw	r24, r28
    27b2:	05 96       	adiw	r24, 0x05	; 5
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	45 e0       	ldi	r20, 0x05	; 5
    27b8:	0e 94 a2 12 	call	0x2544	; 0x2544 <LCD_WriteString>
    27bc:	0c c0       	rjmp	.+24     	; 0x27d6 <ADC_Lab+0x9c>
			}
		else if(Button == LOW && Button2 == HIGH)
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	88 23       	and	r24, r24
    27c2:	49 f4       	brne	.+18     	; 0x27d6 <ADC_Lab+0x9c>
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	31 f4       	brne	.+12     	; 0x27d6 <ADC_Lab+0x9c>
		{
			LCD_WriteString("        ", 0, 5);
    27ca:	80 e6       	ldi	r24, 0x60	; 96
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	45 e0       	ldi	r20, 0x05	; 5
    27d2:	0e 94 a2 12 	call	0x2544	; 0x2544 <LCD_WriteString>
		}
		Button2 = Button ;
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	cc cf       	rjmp	.-104    	; 0x2774 <ADC_Lab+0x3a>

000027dc <Challenge1>:
#include "../LIB/STD_types.h"
#include "../MCAL/DIO/DIO_types.h"
#include "../MCAL/DIO/DIO.h"

void Challenge1(void)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	aa 97       	sbiw	r28, 0x2a	; 42
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(PORTC, Output);
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_SetPortDirection>
	while(1)
	{
		DIO_SetPinValue(PORTC, Pin0, HIGH);
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	aa ef       	ldi	r26, 0xFA	; 250
    2808:	b3 e4       	ldi	r27, 0x43	; 67
    280a:	8f a3       	std	Y+39, r24	; 0x27
    280c:	98 a7       	std	Y+40, r25	; 0x28
    280e:	a9 a7       	std	Y+41, r26	; 0x29
    2810:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	6f a1       	ldd	r22, Y+39	; 0x27
    2814:	78 a5       	ldd	r23, Y+40	; 0x28
    2816:	89 a5       	ldd	r24, Y+41	; 0x29
    2818:	9a a5       	ldd	r25, Y+42	; 0x2a
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a e7       	ldi	r20, 0x7A	; 122
    2820:	55 e4       	ldi	r21, 0x45	; 69
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8b a3       	std	Y+35, r24	; 0x23
    282c:	9c a3       	std	Y+36, r25	; 0x24
    282e:	ad a3       	std	Y+37, r26	; 0x25
    2830:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2832:	6b a1       	ldd	r22, Y+35	; 0x23
    2834:	7c a1       	ldd	r23, Y+36	; 0x24
    2836:	8d a1       	ldd	r24, Y+37	; 0x25
    2838:	9e a1       	ldd	r25, Y+38	; 0x26
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <Challenge1+0x78>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9a a3       	std	Y+34, r25	; 0x22
    2850:	89 a3       	std	Y+33, r24	; 0x21
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <Challenge1+0xf6>
	else if (__tmp > 65535)
    2854:	6b a1       	ldd	r22, Y+35	; 0x23
    2856:	7c a1       	ldd	r23, Y+36	; 0x24
    2858:	8d a1       	ldd	r24, Y+37	; 0x25
    285a:	9e a1       	ldd	r25, Y+38	; 0x26
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	4c f5       	brge	.+82     	; 0x28be <Challenge1+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	6f a1       	ldd	r22, Y+39	; 0x27
    286e:	78 a5       	ldd	r23, Y+40	; 0x28
    2870:	89 a5       	ldd	r24, Y+41	; 0x29
    2872:	9a a5       	ldd	r25, Y+42	; 0x2a
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9a a3       	std	Y+34, r25	; 0x22
    2892:	89 a3       	std	Y+33, r24	; 0x21
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <Challenge1+0xd8>
    2896:	80 e9       	ldi	r24, 0x90	; 144
    2898:	91 e0       	ldi	r25, 0x01	; 1
    289a:	98 a3       	std	Y+32, r25	; 0x20
    289c:	8f 8f       	std	Y+31, r24	; 0x1f
    289e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28a0:	98 a1       	ldd	r25, Y+32	; 0x20
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <Challenge1+0xc6>
    28a6:	98 a3       	std	Y+32, r25	; 0x20
    28a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28aa:	89 a1       	ldd	r24, Y+33	; 0x21
    28ac:	9a a1       	ldd	r25, Y+34	; 0x22
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	9a a3       	std	Y+34, r25	; 0x22
    28b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	89 a1       	ldd	r24, Y+33	; 0x21
    28b6:	9a a1       	ldd	r25, Y+34	; 0x22
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	69 f7       	brne	.-38     	; 0x2896 <Challenge1+0xba>
    28bc:	14 c0       	rjmp	.+40     	; 0x28e6 <Challenge1+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28be:	6b a1       	ldd	r22, Y+35	; 0x23
    28c0:	7c a1       	ldd	r23, Y+36	; 0x24
    28c2:	8d a1       	ldd	r24, Y+37	; 0x25
    28c4:	9e a1       	ldd	r25, Y+38	; 0x26
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9a a3       	std	Y+34, r25	; 0x22
    28d0:	89 a3       	std	Y+33, r24	; 0x21
    28d2:	89 a1       	ldd	r24, Y+33	; 0x21
    28d4:	9a a1       	ldd	r25, Y+34	; 0x22
    28d6:	9e 8f       	std	Y+30, r25	; 0x1e
    28d8:	8d 8f       	std	Y+29, r24	; 0x1d
    28da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <Challenge1+0x102>
    28e2:	9e 8f       	std	Y+30, r25	; 0x1e
    28e4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		DIO_SetPinValue(PORTC, Pin0, LOW);
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

		DIO_SetPinValue(PORTC, Pin1, HIGH);
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	aa ef       	ldi	r26, 0xFA	; 250
    2900:	b3 e4       	ldi	r27, 0x43	; 67
    2902:	89 8f       	std	Y+25, r24	; 0x19
    2904:	9a 8f       	std	Y+26, r25	; 0x1a
    2906:	ab 8f       	std	Y+27, r26	; 0x1b
    2908:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290a:	69 8d       	ldd	r22, Y+25	; 0x19
    290c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    290e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2910:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4a e7       	ldi	r20, 0x7A	; 122
    2918:	55 e4       	ldi	r21, 0x45	; 69
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	8d 8b       	std	Y+21, r24	; 0x15
    2924:	9e 8b       	std	Y+22, r25	; 0x16
    2926:	af 8b       	std	Y+23, r26	; 0x17
    2928:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    292a:	6d 89       	ldd	r22, Y+21	; 0x15
    292c:	7e 89       	ldd	r23, Y+22	; 0x16
    292e:	8f 89       	ldd	r24, Y+23	; 0x17
    2930:	98 8d       	ldd	r25, Y+24	; 0x18
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e8       	ldi	r20, 0x80	; 128
    2938:	5f e3       	ldi	r21, 0x3F	; 63
    293a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293e:	88 23       	and	r24, r24
    2940:	2c f4       	brge	.+10     	; 0x294c <Challenge1+0x170>
		__ticks = 1;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9c 8b       	std	Y+20, r25	; 0x14
    2948:	8b 8b       	std	Y+19, r24	; 0x13
    294a:	3f c0       	rjmp	.+126    	; 0x29ca <Challenge1+0x1ee>
	else if (__tmp > 65535)
    294c:	6d 89       	ldd	r22, Y+21	; 0x15
    294e:	7e 89       	ldd	r23, Y+22	; 0x16
    2950:	8f 89       	ldd	r24, Y+23	; 0x17
    2952:	98 8d       	ldd	r25, Y+24	; 0x18
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	57 e4       	ldi	r21, 0x47	; 71
    295c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2960:	18 16       	cp	r1, r24
    2962:	4c f5       	brge	.+82     	; 0x29b6 <Challenge1+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	69 8d       	ldd	r22, Y+25	; 0x19
    2966:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2968:	8b 8d       	ldd	r24, Y+27	; 0x1b
    296a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9c 8b       	std	Y+20, r25	; 0x14
    298a:	8b 8b       	std	Y+19, r24	; 0x13
    298c:	0f c0       	rjmp	.+30     	; 0x29ac <Challenge1+0x1d0>
    298e:	80 e9       	ldi	r24, 0x90	; 144
    2990:	91 e0       	ldi	r25, 0x01	; 1
    2992:	9a 8b       	std	Y+18, r25	; 0x12
    2994:	89 8b       	std	Y+17, r24	; 0x11
    2996:	89 89       	ldd	r24, Y+17	; 0x11
    2998:	9a 89       	ldd	r25, Y+18	; 0x12
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <Challenge1+0x1be>
    299e:	9a 8b       	std	Y+18, r25	; 0x12
    29a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a2:	8b 89       	ldd	r24, Y+19	; 0x13
    29a4:	9c 89       	ldd	r25, Y+20	; 0x14
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	9c 8b       	std	Y+20, r25	; 0x14
    29aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ac:	8b 89       	ldd	r24, Y+19	; 0x13
    29ae:	9c 89       	ldd	r25, Y+20	; 0x14
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	69 f7       	brne	.-38     	; 0x298e <Challenge1+0x1b2>
    29b4:	14 c0       	rjmp	.+40     	; 0x29de <Challenge1+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b6:	6d 89       	ldd	r22, Y+21	; 0x15
    29b8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ba:	8f 89       	ldd	r24, Y+23	; 0x17
    29bc:	98 8d       	ldd	r25, Y+24	; 0x18
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9c 8b       	std	Y+20, r25	; 0x14
    29c8:	8b 8b       	std	Y+19, r24	; 0x13
    29ca:	8b 89       	ldd	r24, Y+19	; 0x13
    29cc:	9c 89       	ldd	r25, Y+20	; 0x14
    29ce:	98 8b       	std	Y+16, r25	; 0x10
    29d0:	8f 87       	std	Y+15, r24	; 0x0f
    29d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d4:	98 89       	ldd	r25, Y+16	; 0x10
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <Challenge1+0x1fa>
    29da:	98 8b       	std	Y+16, r25	; 0x10
    29dc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		DIO_SetPinValue(PORTC, Pin1, LOW);
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

		DIO_SetPinValue(PORTC, Pin2, HIGH);
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	62 e0       	ldi	r22, 0x02	; 2
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	aa ef       	ldi	r26, 0xFA	; 250
    29f8:	b3 e4       	ldi	r27, 0x43	; 67
    29fa:	8b 87       	std	Y+11, r24	; 0x0b
    29fc:	9c 87       	std	Y+12, r25	; 0x0c
    29fe:	ad 87       	std	Y+13, r26	; 0x0d
    2a00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	4a e7       	ldi	r20, 0x7A	; 122
    2a10:	55 e4       	ldi	r21, 0x45	; 69
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	8f 83       	std	Y+7, r24	; 0x07
    2a1c:	98 87       	std	Y+8, r25	; 0x08
    2a1e:	a9 87       	std	Y+9, r26	; 0x09
    2a20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a22:	6f 81       	ldd	r22, Y+7	; 0x07
    2a24:	78 85       	ldd	r23, Y+8	; 0x08
    2a26:	89 85       	ldd	r24, Y+9	; 0x09
    2a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e8       	ldi	r20, 0x80	; 128
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a36:	88 23       	and	r24, r24
    2a38:	2c f4       	brge	.+10     	; 0x2a44 <Challenge1+0x268>
		__ticks = 1;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9e 83       	std	Y+6, r25	; 0x06
    2a40:	8d 83       	std	Y+5, r24	; 0x05
    2a42:	3f c0       	rjmp	.+126    	; 0x2ac2 <Challenge1+0x2e6>
	else if (__tmp > 65535)
    2a44:	6f 81       	ldd	r22, Y+7	; 0x07
    2a46:	78 85       	ldd	r23, Y+8	; 0x08
    2a48:	89 85       	ldd	r24, Y+9	; 0x09
    2a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	3f ef       	ldi	r19, 0xFF	; 255
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	57 e4       	ldi	r21, 0x47	; 71
    2a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	4c f5       	brge	.+82     	; 0x2aae <Challenge1+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <Challenge1+0x2c8>
    2a86:	80 e9       	ldi	r24, 0x90	; 144
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	9c 83       	std	Y+4, r25	; 0x04
    2a8c:	8b 83       	std	Y+3, r24	; 0x03
    2a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a90:	9c 81       	ldd	r25, Y+4	; 0x04
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <Challenge1+0x2b6>
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	9e 83       	std	Y+6, r25	; 0x06
    2aa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	69 f7       	brne	.-38     	; 0x2a86 <Challenge1+0x2aa>
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <Challenge1+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aae:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab0:	78 85       	ldd	r23, Y+8	; 0x08
    2ab2:	89 85       	ldd	r24, Y+9	; 0x09
    2ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <Challenge1+0x2f2>
    2ad2:	9a 83       	std	Y+2, r25	; 0x02
    2ad4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		DIO_SetPinValue(PORTC, Pin2, LOW);
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	62 e0       	ldi	r22, 0x02	; 2
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    2ae0:	8b ce       	rjmp	.-746    	; 0x27f8 <Challenge1+0x1c>

00002ae2 <EXTI_LAB>:
#include "../MCAL/GIE/GIE.h"

void EXTI0ISR(void);

void EXTI_LAB(void)
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	6c 97       	sbiw	r28, 0x1c	; 28
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
	 DIO_SetPinDirection(PORTD, Pin2, Input); //button ant int0
    2af6:	83 e0       	ldi	r24, 0x03	; 3
    2af8:	62 e0       	ldi	r22, 0x02	; 2
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	 DIO_SetPinDirection(PORTA, Pin3, Output); //buzzer
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	63 e0       	ldi	r22, 0x03	; 3
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	 DIO_SetPinDirection(PORTD, Pin3, Output); // led
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	63 e0       	ldi	r22, 0x03	; 3
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>

	 EXTI_Initialization();
    2b14:	0e 94 c8 06 	call	0xd90	; 0xd90 <EXTI_Initialization>
	 EXTI_ISR0(EXTI0ISR);
    2b18:	83 e8       	ldi	r24, 0x83	; 131
    2b1a:	96 e1       	ldi	r25, 0x16	; 22
    2b1c:	0e 94 37 07 	call	0xe6e	; 0xe6e <EXTI_ISR0>
	 EXTI_Enable_INT0();
    2b20:	0e 94 1b 07 	call	0xe36	; 0xe36 <EXTI_Enable_INT0>
	 GIE_Enable_Global();
    2b24:	0e 94 ac 06 	call	0xd58	; 0xd58 <GIE_Enable_Global>

	 while(1)
	 {
		 DIO_SetPinValue(PORTD, Pin3, HIGH);
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	63 e0       	ldi	r22, 0x03	; 3
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	aa ef       	ldi	r26, 0xFA	; 250
    2b38:	b3 e4       	ldi	r27, 0x43	; 67
    2b3a:	89 8f       	std	Y+25, r24	; 0x19
    2b3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b3e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	69 8d       	ldd	r22, Y+25	; 0x19
    2b44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a e7       	ldi	r20, 0x7A	; 122
    2b50:	55 e4       	ldi	r21, 0x45	; 69
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8d 8b       	std	Y+21, r24	; 0x15
    2b5c:	9e 8b       	std	Y+22, r25	; 0x16
    2b5e:	af 8b       	std	Y+23, r26	; 0x17
    2b60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b62:	6d 89       	ldd	r22, Y+21	; 0x15
    2b64:	7e 89       	ldd	r23, Y+22	; 0x16
    2b66:	8f 89       	ldd	r24, Y+23	; 0x17
    2b68:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <EXTI_LAB+0xa2>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9c 8b       	std	Y+20, r25	; 0x14
    2b80:	8b 8b       	std	Y+19, r24	; 0x13
    2b82:	3f c0       	rjmp	.+126    	; 0x2c02 <EXTI_LAB+0x120>
	else if (__tmp > 65535)
    2b84:	6d 89       	ldd	r22, Y+21	; 0x15
    2b86:	7e 89       	ldd	r23, Y+22	; 0x16
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	4c f5       	brge	.+82     	; 0x2bee <EXTI_LAB+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9c 8b       	std	Y+20, r25	; 0x14
    2bc2:	8b 8b       	std	Y+19, r24	; 0x13
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <EXTI_LAB+0x102>
    2bc6:	80 e9       	ldi	r24, 0x90	; 144
    2bc8:	91 e0       	ldi	r25, 0x01	; 1
    2bca:	9a 8b       	std	Y+18, r25	; 0x12
    2bcc:	89 8b       	std	Y+17, r24	; 0x11
    2bce:	89 89       	ldd	r24, Y+17	; 0x11
    2bd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <EXTI_LAB+0xf0>
    2bd6:	9a 8b       	std	Y+18, r25	; 0x12
    2bd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bda:	8b 89       	ldd	r24, Y+19	; 0x13
    2bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9c 8b       	std	Y+20, r25	; 0x14
    2be2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	8b 89       	ldd	r24, Y+19	; 0x13
    2be6:	9c 89       	ldd	r25, Y+20	; 0x14
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f7       	brne	.-38     	; 0x2bc6 <EXTI_LAB+0xe4>
    2bec:	14 c0       	rjmp	.+40     	; 0x2c16 <EXTI_LAB+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9c 8b       	std	Y+20, r25	; 0x14
    2c00:	8b 8b       	std	Y+19, r24	; 0x13
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	98 8b       	std	Y+16, r25	; 0x10
    2c08:	8f 87       	std	Y+15, r24	; 0x0f
    2c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0c:	98 89       	ldd	r25, Y+16	; 0x10
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <EXTI_LAB+0x12c>
    2c12:	98 8b       	std	Y+16, r25	; 0x10
    2c14:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(500);
		 DIO_SetPinValue(PORTD, Pin3, LOW);
    2c16:	83 e0       	ldi	r24, 0x03	; 3
    2c18:	63 e0       	ldi	r22, 0x03	; 3
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	aa ef       	ldi	r26, 0xFA	; 250
    2c26:	b3 e4       	ldi	r27, 0x43	; 67
    2c28:	8b 87       	std	Y+11, r24	; 0x0b
    2c2a:	9c 87       	std	Y+12, r25	; 0x0c
    2c2c:	ad 87       	std	Y+13, r26	; 0x0d
    2c2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	4a e7       	ldi	r20, 0x7A	; 122
    2c3e:	55 e4       	ldi	r21, 0x45	; 69
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	8f 83       	std	Y+7, r24	; 0x07
    2c4a:	98 87       	std	Y+8, r25	; 0x08
    2c4c:	a9 87       	std	Y+9, r26	; 0x09
    2c4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c50:	6f 81       	ldd	r22, Y+7	; 0x07
    2c52:	78 85       	ldd	r23, Y+8	; 0x08
    2c54:	89 85       	ldd	r24, Y+9	; 0x09
    2c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e8       	ldi	r20, 0x80	; 128
    2c5e:	5f e3       	ldi	r21, 0x3F	; 63
    2c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	2c f4       	brge	.+10     	; 0x2c72 <EXTI_LAB+0x190>
		__ticks = 1;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	3f c0       	rjmp	.+126    	; 0x2cf0 <EXTI_LAB+0x20e>
	else if (__tmp > 65535)
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	3f ef       	ldi	r19, 0xFF	; 255
    2c7e:	4f e7       	ldi	r20, 0x7F	; 127
    2c80:	57 e4       	ldi	r21, 0x47	; 71
    2c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c86:	18 16       	cp	r1, r24
    2c88:	4c f5       	brge	.+82     	; 0x2cdc <EXTI_LAB+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	51 e4       	ldi	r21, 0x41	; 65
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	9e 83       	std	Y+6, r25	; 0x06
    2cb0:	8d 83       	std	Y+5, r24	; 0x05
    2cb2:	0f c0       	rjmp	.+30     	; 0x2cd2 <EXTI_LAB+0x1f0>
    2cb4:	80 e9       	ldi	r24, 0x90	; 144
    2cb6:	91 e0       	ldi	r25, 0x01	; 1
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	8b 83       	std	Y+3, r24	; 0x03
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <EXTI_LAB+0x1de>
    2cc4:	9c 83       	std	Y+4, r25	; 0x04
    2cc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	69 f7       	brne	.-38     	; 0x2cb4 <EXTI_LAB+0x1d2>
    2cda:	26 cf       	rjmp	.-436    	; 0x2b28 <EXTI_LAB+0x46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cde:	78 85       	ldd	r23, Y+8	; 0x08
    2ce0:	89 85       	ldd	r24, Y+9	; 0x09
    2ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	8d 83       	std	Y+5, r24	; 0x05
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <EXTI_LAB+0x21a>
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	11 cf       	rjmp	.-478    	; 0x2b28 <EXTI_LAB+0x46>

00002d06 <EXTI0ISR>:
		 _delay_ms(500);
	 }
}

void EXTI0ISR(void)
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	2e 97       	sbiw	r28, 0x0e	; 14
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
	 DIO_SetPinValue(PORTA, Pin3, HIGH);
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	63 e0       	ldi	r22, 0x03	; 3
    2d1e:	41 e0       	ldi	r20, 0x01	; 1
    2d20:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	90 e4       	ldi	r25, 0x40	; 64
    2d28:	ac e9       	ldi	r26, 0x9C	; 156
    2d2a:	b5 e4       	ldi	r27, 0x45	; 69
    2d2c:	8b 87       	std	Y+11, r24	; 0x0b
    2d2e:	9c 87       	std	Y+12, r25	; 0x0c
    2d30:	ad 87       	std	Y+13, r26	; 0x0d
    2d32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	4a e7       	ldi	r20, 0x7A	; 122
    2d42:	55 e4       	ldi	r21, 0x45	; 69
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	8f 83       	std	Y+7, r24	; 0x07
    2d4e:	98 87       	std	Y+8, r25	; 0x08
    2d50:	a9 87       	std	Y+9, r26	; 0x09
    2d52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d54:	6f 81       	ldd	r22, Y+7	; 0x07
    2d56:	78 85       	ldd	r23, Y+8	; 0x08
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e8       	ldi	r20, 0x80	; 128
    2d62:	5f e3       	ldi	r21, 0x3F	; 63
    2d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d68:	88 23       	and	r24, r24
    2d6a:	2c f4       	brge	.+10     	; 0x2d76 <EXTI0ISR+0x70>
		__ticks = 1;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	9e 83       	std	Y+6, r25	; 0x06
    2d72:	8d 83       	std	Y+5, r24	; 0x05
    2d74:	3f c0       	rjmp	.+126    	; 0x2df4 <EXTI0ISR+0xee>
	else if (__tmp > 65535)
    2d76:	6f 81       	ldd	r22, Y+7	; 0x07
    2d78:	78 85       	ldd	r23, Y+8	; 0x08
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	3f ef       	ldi	r19, 0xFF	; 255
    2d82:	4f e7       	ldi	r20, 0x7F	; 127
    2d84:	57 e4       	ldi	r21, 0x47	; 71
    2d86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d8a:	18 16       	cp	r1, r24
    2d8c:	4c f5       	brge	.+82     	; 0x2de0 <EXTI0ISR+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e2       	ldi	r20, 0x20	; 32
    2d9c:	51 e4       	ldi	r21, 0x41	; 65
    2d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	9e 83       	std	Y+6, r25	; 0x06
    2db4:	8d 83       	std	Y+5, r24	; 0x05
    2db6:	0f c0       	rjmp	.+30     	; 0x2dd6 <EXTI0ISR+0xd0>
    2db8:	80 e9       	ldi	r24, 0x90	; 144
    2dba:	91 e0       	ldi	r25, 0x01	; 1
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <EXTI0ISR+0xbe>
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	69 f7       	brne	.-38     	; 0x2db8 <EXTI0ISR+0xb2>
    2dde:	14 c0       	rjmp	.+40     	; 0x2e08 <EXTI0ISR+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de0:	6f 81       	ldd	r22, Y+7	; 0x07
    2de2:	78 85       	ldd	r23, Y+8	; 0x08
    2de4:	89 85       	ldd	r24, Y+9	; 0x09
    2de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	8d 81       	ldd	r24, Y+5	; 0x05
    2df6:	9e 81       	ldd	r25, Y+6	; 0x06
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <EXTI0ISR+0xfa>
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(5000);

}
    2e08:	2e 96       	adiw	r28, 0x0e	; 14
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <LCD_App>:
#include <util/delay.h>
#include "../LIB/STD_types.h"
#include "../HAL/LCD/LCD.h"

void LCD_App()
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	2d 97       	sbiw	r28, 0x0d	; 13
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
	uint8 Pattern[8] = {0x0E, 0x08, 0x1F, 0x00, 0x04, 0x04, 0x04, 0x04};
    2e2e:	ce 01       	movw	r24, r28
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	9a 87       	std	Y+10, r25	; 0x0a
    2e34:	89 87       	std	Y+9, r24	; 0x09
    2e36:	ed e7       	ldi	r30, 0x7D	; 125
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	fc 87       	std	Y+12, r31	; 0x0c
    2e3c:	eb 87       	std	Y+11, r30	; 0x0b
    2e3e:	f8 e0       	ldi	r31, 0x08	; 8
    2e40:	fd 87       	std	Y+13, r31	; 0x0d
    2e42:	eb 85       	ldd	r30, Y+11	; 0x0b
    2e44:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e46:	00 80       	ld	r0, Z
    2e48:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	9c 87       	std	Y+12, r25	; 0x0c
    2e50:	8b 87       	std	Y+11, r24	; 0x0b
    2e52:	e9 85       	ldd	r30, Y+9	; 0x09
    2e54:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e56:	00 82       	st	Z, r0
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	9a 87       	std	Y+10, r25	; 0x0a
    2e60:	89 87       	std	Y+9, r24	; 0x09
    2e62:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e64:	91 50       	subi	r25, 0x01	; 1
    2e66:	9d 87       	std	Y+13, r25	; 0x0d
    2e68:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e6a:	ee 23       	and	r30, r30
    2e6c:	51 f7       	brne	.-44     	; 0x2e42 <LCD_App+0x28>
	LCD_Initialization();
    2e6e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <LCD_Initialization>
	LCD_WriteString("Ahmed Tarek" , 1 , 0);
    2e72:	89 e6       	ldi	r24, 0x69	; 105
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	61 e0       	ldi	r22, 0x01	; 1
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	0e 94 a2 12 	call	0x2544	; 0x2544 <LCD_WriteString>
	LCD_StorePattern(Pattern, 0);
    2e7e:	ce 01       	movw	r24, r28
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	60 e0       	ldi	r22, 0x00	; 0
    2e84:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_StorePattern>
	LCD_WritePattern(0, 0, 0);
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	60 e0       	ldi	r22, 0x00	; 0
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	0e 94 87 13 	call	0x270e	; 0x270e <LCD_WritePattern>
}
    2e92:	2d 96       	adiw	r28, 0x0d	; 13
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	08 95       	ret

00002ea4 <LED>:
#include "../MCAL/DIO/DIO_types.h"
#include "../LIB/STD_types.h"
#include "../MCAL/DIO/DIO.h"

void LED()
{
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	2e 97       	sbiw	r28, 0x0e	; 14
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(PORTC, Output);
    2eb8:	82 e0       	ldi	r24, 0x02	; 2
    2eba:	61 e0       	ldi	r22, 0x01	; 1
    2ebc:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_SetPortDirection>
	DIO_SetPinValue(PORTC, Pin0, HIGH);
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	60 e0       	ldi	r22, 0x00	; 0
    2ec4:	41 e0       	ldi	r20, 0x01	; 1
    2ec6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	a0 ea       	ldi	r26, 0xA0	; 160
    2ed0:	b1 e4       	ldi	r27, 0x41	; 65
    2ed2:	8b 87       	std	Y+11, r24	; 0x0b
    2ed4:	9c 87       	std	Y+12, r25	; 0x0c
    2ed6:	ad 87       	std	Y+13, r26	; 0x0d
    2ed8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2edc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	4a e7       	ldi	r20, 0x7A	; 122
    2ee8:	55 e4       	ldi	r21, 0x45	; 69
    2eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	8f 83       	std	Y+7, r24	; 0x07
    2ef4:	98 87       	std	Y+8, r25	; 0x08
    2ef6:	a9 87       	std	Y+9, r26	; 0x09
    2ef8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2efa:	6f 81       	ldd	r22, Y+7	; 0x07
    2efc:	78 85       	ldd	r23, Y+8	; 0x08
    2efe:	89 85       	ldd	r24, Y+9	; 0x09
    2f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e8       	ldi	r20, 0x80	; 128
    2f08:	5f e3       	ldi	r21, 0x3F	; 63
    2f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f0e:	88 23       	and	r24, r24
    2f10:	2c f4       	brge	.+10     	; 0x2f1c <LED+0x78>
		__ticks = 1;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
    2f1a:	3f c0       	rjmp	.+126    	; 0x2f9a <LED+0xf6>
	else if (__tmp > 65535)
    2f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1e:	78 85       	ldd	r23, Y+8	; 0x08
    2f20:	89 85       	ldd	r24, Y+9	; 0x09
    2f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	3f ef       	ldi	r19, 0xFF	; 255
    2f28:	4f e7       	ldi	r20, 0x7F	; 127
    2f2a:	57 e4       	ldi	r21, 0x47	; 71
    2f2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f30:	18 16       	cp	r1, r24
    2f32:	4c f5       	brge	.+82     	; 0x2f86 <LED+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e2       	ldi	r20, 0x20	; 32
    2f42:	51 e4       	ldi	r21, 0x41	; 65
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	cd 01       	movw	r24, r26
    2f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	9e 83       	std	Y+6, r25	; 0x06
    2f5a:	8d 83       	std	Y+5, r24	; 0x05
    2f5c:	0f c0       	rjmp	.+30     	; 0x2f7c <LED+0xd8>
    2f5e:	80 e9       	ldi	r24, 0x90	; 144
    2f60:	91 e0       	ldi	r25, 0x01	; 1
    2f62:	9c 83       	std	Y+4, r25	; 0x04
    2f64:	8b 83       	std	Y+3, r24	; 0x03
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <LED+0xc6>
    2f6e:	9c 83       	std	Y+4, r25	; 0x04
    2f70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	9e 83       	std	Y+6, r25	; 0x06
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f80:	00 97       	sbiw	r24, 0x00	; 0
    2f82:	69 f7       	brne	.-38     	; 0x2f5e <LED+0xba>
    2f84:	14 c0       	rjmp	.+40     	; 0x2fae <LED+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f86:	6f 81       	ldd	r22, Y+7	; 0x07
    2f88:	78 85       	ldd	r23, Y+8	; 0x08
    2f8a:	89 85       	ldd	r24, Y+9	; 0x09
    2f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9e 83       	std	Y+6, r25	; 0x06
    2f98:	8d 83       	std	Y+5, r24	; 0x05
    2f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	f1 f7       	brne	.-4      	; 0x2fa6 <LED+0x102>
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

}
    2fae:	2e 96       	adiw	r28, 0x0e	; 14
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <LED2>:
#include "../LIB/STD_types.h"
#include "../MCAL/DIO/DIO_types.h"
#include "../MCAL/DIO/DIO.h"

void LED2()
{
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	c4 55       	subi	r28, 0x54	; 84
    2fce:	d0 40       	sbci	r29, 0x00	; 0
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(PORTC, Output);
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	61 e0       	ldi	r22, 0x01	; 1
    2fde:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTA, Input);
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_SetPortDirection>
	DIO_SetPortValue(PORTC, 0x00);
    2fea:	82 e0       	ldi	r24, 0x02	; 2
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_SetPortValue>
	while(1)
	{
		if(DIO_GetPinValue(PORTA, Pin0) && !DIO_GetPinValue(PORTA, Pin1) && !DIO_GetPinValue(PORTA, Pin2))
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    2ffa:	88 23       	and	r24, r24
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <LED2+0x40>
    2ffe:	5d c2       	rjmp	.+1210   	; 0x34ba <LED2+0x4fa>
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	61 e0       	ldi	r22, 0x01	; 1
    3004:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3008:	88 23       	and	r24, r24
    300a:	09 f0       	breq	.+2      	; 0x300e <LED2+0x4e>
    300c:	56 c2       	rjmp	.+1196   	; 0x34ba <LED2+0x4fa>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	62 e0       	ldi	r22, 0x02	; 2
    3012:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3016:	88 23       	and	r24, r24
    3018:	09 f0       	breq	.+2      	; 0x301c <LED2+0x5c>
    301a:	4f c2       	rjmp	.+1182   	; 0x34ba <LED2+0x4fa>
    301c:	fe 01       	movw	r30, r28
    301e:	ef 5a       	subi	r30, 0xAF	; 175
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	a0 ef       	ldi	r26, 0xF0	; 240
    3028:	b1 e4       	ldi	r27, 0x41	; 65
    302a:	80 83       	st	Z, r24
    302c:	91 83       	std	Z+1, r25	; 0x01
    302e:	a2 83       	std	Z+2, r26	; 0x02
    3030:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3032:	8e 01       	movw	r16, r28
    3034:	03 5b       	subi	r16, 0xB3	; 179
    3036:	1f 4f       	sbci	r17, 0xFF	; 255
    3038:	fe 01       	movw	r30, r28
    303a:	ef 5a       	subi	r30, 0xAF	; 175
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	4a e7       	ldi	r20, 0x7A	; 122
    304c:	55 e4       	ldi	r21, 0x45	; 69
    304e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	f8 01       	movw	r30, r16
    3058:	80 83       	st	Z, r24
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	a2 83       	std	Z+2, r26	; 0x02
    305e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3060:	fe 01       	movw	r30, r28
    3062:	e3 5b       	subi	r30, 0xB3	; 179
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	60 81       	ld	r22, Z
    3068:	71 81       	ldd	r23, Z+1	; 0x01
    306a:	82 81       	ldd	r24, Z+2	; 0x02
    306c:	93 81       	ldd	r25, Z+3	; 0x03
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e8       	ldi	r20, 0x80	; 128
    3074:	5f e3       	ldi	r21, 0x3F	; 63
    3076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307a:	88 23       	and	r24, r24
    307c:	44 f4       	brge	.+16     	; 0x308e <LED2+0xce>
		__ticks = 1;
    307e:	fe 01       	movw	r30, r28
    3080:	e5 5b       	subi	r30, 0xB5	; 181
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	91 83       	std	Z+1, r25	; 0x01
    308a:	80 83       	st	Z, r24
    308c:	64 c0       	rjmp	.+200    	; 0x3156 <LED2+0x196>
	else if (__tmp > 65535)
    308e:	fe 01       	movw	r30, r28
    3090:	e3 5b       	subi	r30, 0xB3	; 179
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	0c f0       	brlt	.+2      	; 0x30ae <LED2+0xee>
    30ac:	43 c0       	rjmp	.+134    	; 0x3134 <LED2+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	fe 01       	movw	r30, r28
    30b0:	ef 5a       	subi	r30, 0xAF	; 175
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	60 81       	ld	r22, Z
    30b6:	71 81       	ldd	r23, Z+1	; 0x01
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e2       	ldi	r20, 0x20	; 32
    30c2:	51 e4       	ldi	r21, 0x41	; 65
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	8e 01       	movw	r16, r28
    30ce:	05 5b       	subi	r16, 0xB5	; 181
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	f8 01       	movw	r30, r16
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
    30e4:	1f c0       	rjmp	.+62     	; 0x3124 <LED2+0x164>
    30e6:	fe 01       	movw	r30, r28
    30e8:	e7 5b       	subi	r30, 0xB7	; 183
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 e9       	ldi	r24, 0x90	; 144
    30ee:	91 e0       	ldi	r25, 0x01	; 1
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
    30f4:	fe 01       	movw	r30, r28
    30f6:	e7 5b       	subi	r30, 0xB7	; 183
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <LED2+0x13e>
    3102:	fe 01       	movw	r30, r28
    3104:	e7 5b       	subi	r30, 0xB7	; 183
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310c:	de 01       	movw	r26, r28
    310e:	a5 5b       	subi	r26, 0xB5	; 181
    3110:	bf 4f       	sbci	r27, 0xFF	; 255
    3112:	fe 01       	movw	r30, r28
    3114:	e5 5b       	subi	r30, 0xB5	; 181
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	11 96       	adiw	r26, 0x01	; 1
    3120:	9c 93       	st	X, r25
    3122:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3124:	fe 01       	movw	r30, r28
    3126:	e5 5b       	subi	r30, 0xB5	; 181
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	d1 f6       	brne	.-76     	; 0x30e6 <LED2+0x126>
    3132:	27 c0       	rjmp	.+78     	; 0x3182 <LED2+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	8e 01       	movw	r16, r28
    3136:	05 5b       	subi	r16, 0xB5	; 181
    3138:	1f 4f       	sbci	r17, 0xFF	; 255
    313a:	fe 01       	movw	r30, r28
    313c:	e3 5b       	subi	r30, 0xB3	; 179
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	60 81       	ld	r22, Z
    3142:	71 81       	ldd	r23, Z+1	; 0x01
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	f8 01       	movw	r30, r16
    3152:	91 83       	std	Z+1, r25	; 0x01
    3154:	80 83       	st	Z, r24
    3156:	de 01       	movw	r26, r28
    3158:	a9 5b       	subi	r26, 0xB9	; 185
    315a:	bf 4f       	sbci	r27, 0xFF	; 255
    315c:	fe 01       	movw	r30, r28
    315e:	e5 5b       	subi	r30, 0xB5	; 181
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	8d 93       	st	X+, r24
    3168:	9c 93       	st	X, r25
    316a:	fe 01       	movw	r30, r28
    316c:	e9 5b       	subi	r30, 0xB9	; 185
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <LED2+0x1b4>
    3178:	fe 01       	movw	r30, r28
    317a:	e9 5b       	subi	r30, 0xB9	; 185
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
		{
			_delay_ms(30);
			if(DIO_GetPinValue(PORTA, Pin0) && !DIO_GetPinValue(PORTA, Pin1) && !DIO_GetPinValue(PORTA, Pin2))
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    318a:	88 23       	and	r24, r24
    318c:	09 f4       	brne	.+2      	; 0x3190 <LED2+0x1d0>
    318e:	95 c1       	rjmp	.+810    	; 0x34ba <LED2+0x4fa>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	61 e0       	ldi	r22, 0x01	; 1
    3194:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3198:	88 23       	and	r24, r24
    319a:	09 f0       	breq	.+2      	; 0x319e <LED2+0x1de>
    319c:	8e c1       	rjmp	.+796    	; 0x34ba <LED2+0x4fa>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	62 e0       	ldi	r22, 0x02	; 2
    31a2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    31a6:	88 23       	and	r24, r24
    31a8:	09 f0       	breq	.+2      	; 0x31ac <LED2+0x1ec>
    31aa:	87 c1       	rjmp	.+782    	; 0x34ba <LED2+0x4fa>
			{
				DIO_SetPinValue(PORTC, Pin0, HIGH);
    31ac:	82 e0       	ldi	r24, 0x02	; 2
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    31b6:	fe 01       	movw	r30, r28
    31b8:	ed 5b       	subi	r30, 0xBD	; 189
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	aa ef       	ldi	r26, 0xFA	; 250
    31c2:	b3 e4       	ldi	r27, 0x43	; 67
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	a2 83       	std	Z+2, r26	; 0x02
    31ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	8e 01       	movw	r16, r28
    31ce:	01 5c       	subi	r16, 0xC1	; 193
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	fe 01       	movw	r30, r28
    31d4:	ed 5b       	subi	r30, 0xBD	; 189
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a e7       	ldi	r20, 0x7A	; 122
    31e6:	55 e4       	ldi	r21, 0x45	; 69
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	f8 01       	movw	r30, r16
    31f2:	80 83       	st	Z, r24
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	a2 83       	std	Z+2, r26	; 0x02
    31f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31fa:	fe 01       	movw	r30, r28
    31fc:	ff 96       	adiw	r30, 0x3f	; 63
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e8       	ldi	r20, 0x80	; 128
    320c:	5f e3       	ldi	r21, 0x3F	; 63
    320e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3212:	88 23       	and	r24, r24
    3214:	2c f4       	brge	.+10     	; 0x3220 <LED2+0x260>
		__ticks = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9e af       	std	Y+62, r25	; 0x3e
    321c:	8d af       	std	Y+61, r24	; 0x3d
    321e:	46 c0       	rjmp	.+140    	; 0x32ac <LED2+0x2ec>
	else if (__tmp > 65535)
    3220:	fe 01       	movw	r30, r28
    3222:	ff 96       	adiw	r30, 0x3f	; 63
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	3f ef       	ldi	r19, 0xFF	; 255
    3230:	4f e7       	ldi	r20, 0x7F	; 127
    3232:	57 e4       	ldi	r21, 0x47	; 71
    3234:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3238:	18 16       	cp	r1, r24
    323a:	64 f5       	brge	.+88     	; 0x3294 <LED2+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323c:	fe 01       	movw	r30, r28
    323e:	ed 5b       	subi	r30, 0xBD	; 189
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e2       	ldi	r20, 0x20	; 32
    3250:	51 e4       	ldi	r21, 0x41	; 65
    3252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	9e af       	std	Y+62, r25	; 0x3e
    3268:	8d af       	std	Y+61, r24	; 0x3d
    326a:	0f c0       	rjmp	.+30     	; 0x328a <LED2+0x2ca>
    326c:	80 e9       	ldi	r24, 0x90	; 144
    326e:	91 e0       	ldi	r25, 0x01	; 1
    3270:	9c af       	std	Y+60, r25	; 0x3c
    3272:	8b af       	std	Y+59, r24	; 0x3b
    3274:	8b ad       	ldd	r24, Y+59	; 0x3b
    3276:	9c ad       	ldd	r25, Y+60	; 0x3c
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <LED2+0x2b8>
    327c:	9c af       	std	Y+60, r25	; 0x3c
    327e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3280:	8d ad       	ldd	r24, Y+61	; 0x3d
    3282:	9e ad       	ldd	r25, Y+62	; 0x3e
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	9e af       	std	Y+62, r25	; 0x3e
    3288:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328a:	8d ad       	ldd	r24, Y+61	; 0x3d
    328c:	9e ad       	ldd	r25, Y+62	; 0x3e
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	69 f7       	brne	.-38     	; 0x326c <LED2+0x2ac>
    3292:	16 c0       	rjmp	.+44     	; 0x32c0 <LED2+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3294:	fe 01       	movw	r30, r28
    3296:	ff 96       	adiw	r30, 0x3f	; 63
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	82 81       	ldd	r24, Z+2	; 0x02
    329e:	93 81       	ldd	r25, Z+3	; 0x03
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9e af       	std	Y+62, r25	; 0x3e
    32aa:	8d af       	std	Y+61, r24	; 0x3d
    32ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    32ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    32b0:	9a af       	std	Y+58, r25	; 0x3a
    32b2:	89 af       	std	Y+57, r24	; 0x39
    32b4:	89 ad       	ldd	r24, Y+57	; 0x39
    32b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <LED2+0x2f8>
    32bc:	9a af       	std	Y+58, r25	; 0x3a
    32be:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				DIO_SetPinValue(PORTC, Pin0, LOW);
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	60 e0       	ldi	r22, 0x00	; 0
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

				DIO_SetPinValue(PORTC, Pin1, HIGH);
    32ca:	82 e0       	ldi	r24, 0x02	; 2
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	41 e0       	ldi	r20, 0x01	; 1
    32d0:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	aa ef       	ldi	r26, 0xFA	; 250
    32da:	b3 e4       	ldi	r27, 0x43	; 67
    32dc:	8d ab       	std	Y+53, r24	; 0x35
    32de:	9e ab       	std	Y+54, r25	; 0x36
    32e0:	af ab       	std	Y+55, r26	; 0x37
    32e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e4:	6d a9       	ldd	r22, Y+53	; 0x35
    32e6:	7e a9       	ldd	r23, Y+54	; 0x36
    32e8:	8f a9       	ldd	r24, Y+55	; 0x37
    32ea:	98 ad       	ldd	r25, Y+56	; 0x38
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	4a e7       	ldi	r20, 0x7A	; 122
    32f2:	55 e4       	ldi	r21, 0x45	; 69
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	89 ab       	std	Y+49, r24	; 0x31
    32fe:	9a ab       	std	Y+50, r25	; 0x32
    3300:	ab ab       	std	Y+51, r26	; 0x33
    3302:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3304:	69 a9       	ldd	r22, Y+49	; 0x31
    3306:	7a a9       	ldd	r23, Y+50	; 0x32
    3308:	8b a9       	ldd	r24, Y+51	; 0x33
    330a:	9c a9       	ldd	r25, Y+52	; 0x34
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e8       	ldi	r20, 0x80	; 128
    3312:	5f e3       	ldi	r21, 0x3F	; 63
    3314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3318:	88 23       	and	r24, r24
    331a:	2c f4       	brge	.+10     	; 0x3326 <LED2+0x366>
		__ticks = 1;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	98 ab       	std	Y+48, r25	; 0x30
    3322:	8f a7       	std	Y+47, r24	; 0x2f
    3324:	3f c0       	rjmp	.+126    	; 0x33a4 <LED2+0x3e4>
	else if (__tmp > 65535)
    3326:	69 a9       	ldd	r22, Y+49	; 0x31
    3328:	7a a9       	ldd	r23, Y+50	; 0x32
    332a:	8b a9       	ldd	r24, Y+51	; 0x33
    332c:	9c a9       	ldd	r25, Y+52	; 0x34
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	3f ef       	ldi	r19, 0xFF	; 255
    3332:	4f e7       	ldi	r20, 0x7F	; 127
    3334:	57 e4       	ldi	r21, 0x47	; 71
    3336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    333a:	18 16       	cp	r1, r24
    333c:	4c f5       	brge	.+82     	; 0x3390 <LED2+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333e:	6d a9       	ldd	r22, Y+53	; 0x35
    3340:	7e a9       	ldd	r23, Y+54	; 0x36
    3342:	8f a9       	ldd	r24, Y+55	; 0x37
    3344:	98 ad       	ldd	r25, Y+56	; 0x38
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	bc 01       	movw	r22, r24
    3358:	cd 01       	movw	r24, r26
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	98 ab       	std	Y+48, r25	; 0x30
    3364:	8f a7       	std	Y+47, r24	; 0x2f
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <LED2+0x3c6>
    3368:	80 e9       	ldi	r24, 0x90	; 144
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	9e a7       	std	Y+46, r25	; 0x2e
    336e:	8d a7       	std	Y+45, r24	; 0x2d
    3370:	8d a5       	ldd	r24, Y+45	; 0x2d
    3372:	9e a5       	ldd	r25, Y+46	; 0x2e
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LED2+0x3b4>
    3378:	9e a7       	std	Y+46, r25	; 0x2e
    337a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337c:	8f a5       	ldd	r24, Y+47	; 0x2f
    337e:	98 a9       	ldd	r25, Y+48	; 0x30
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	98 ab       	std	Y+48, r25	; 0x30
    3384:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3386:	8f a5       	ldd	r24, Y+47	; 0x2f
    3388:	98 a9       	ldd	r25, Y+48	; 0x30
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	69 f7       	brne	.-38     	; 0x3368 <LED2+0x3a8>
    338e:	14 c0       	rjmp	.+40     	; 0x33b8 <LED2+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3390:	69 a9       	ldd	r22, Y+49	; 0x31
    3392:	7a a9       	ldd	r23, Y+50	; 0x32
    3394:	8b a9       	ldd	r24, Y+51	; 0x33
    3396:	9c a9       	ldd	r25, Y+52	; 0x34
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	98 ab       	std	Y+48, r25	; 0x30
    33a2:	8f a7       	std	Y+47, r24	; 0x2f
    33a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33a6:	98 a9       	ldd	r25, Y+48	; 0x30
    33a8:	9c a7       	std	Y+44, r25	; 0x2c
    33aa:	8b a7       	std	Y+43, r24	; 0x2b
    33ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    33ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <LED2+0x3f0>
    33b4:	9c a7       	std	Y+44, r25	; 0x2c
    33b6:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				DIO_SetPinValue(PORTC, Pin1, LOW);
    33b8:	82 e0       	ldi	r24, 0x02	; 2
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

				DIO_SetPinValue(PORTC, Pin2, HIGH);
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	62 e0       	ldi	r22, 0x02	; 2
    33c6:	41 e0       	ldi	r20, 0x01	; 1
    33c8:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	aa ef       	ldi	r26, 0xFA	; 250
    33d2:	b3 e4       	ldi	r27, 0x43	; 67
    33d4:	8f a3       	std	Y+39, r24	; 0x27
    33d6:	98 a7       	std	Y+40, r25	; 0x28
    33d8:	a9 a7       	std	Y+41, r26	; 0x29
    33da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33dc:	6f a1       	ldd	r22, Y+39	; 0x27
    33de:	78 a5       	ldd	r23, Y+40	; 0x28
    33e0:	89 a5       	ldd	r24, Y+41	; 0x29
    33e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	4a e7       	ldi	r20, 0x7A	; 122
    33ea:	55 e4       	ldi	r21, 0x45	; 69
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	8b a3       	std	Y+35, r24	; 0x23
    33f6:	9c a3       	std	Y+36, r25	; 0x24
    33f8:	ad a3       	std	Y+37, r26	; 0x25
    33fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33fc:	6b a1       	ldd	r22, Y+35	; 0x23
    33fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3400:	8d a1       	ldd	r24, Y+37	; 0x25
    3402:	9e a1       	ldd	r25, Y+38	; 0x26
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e8       	ldi	r20, 0x80	; 128
    340a:	5f e3       	ldi	r21, 0x3F	; 63
    340c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3410:	88 23       	and	r24, r24
    3412:	2c f4       	brge	.+10     	; 0x341e <LED2+0x45e>
		__ticks = 1;
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	9a a3       	std	Y+34, r25	; 0x22
    341a:	89 a3       	std	Y+33, r24	; 0x21
    341c:	3f c0       	rjmp	.+126    	; 0x349c <LED2+0x4dc>
	else if (__tmp > 65535)
    341e:	6b a1       	ldd	r22, Y+35	; 0x23
    3420:	7c a1       	ldd	r23, Y+36	; 0x24
    3422:	8d a1       	ldd	r24, Y+37	; 0x25
    3424:	9e a1       	ldd	r25, Y+38	; 0x26
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	3f ef       	ldi	r19, 0xFF	; 255
    342a:	4f e7       	ldi	r20, 0x7F	; 127
    342c:	57 e4       	ldi	r21, 0x47	; 71
    342e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3432:	18 16       	cp	r1, r24
    3434:	4c f5       	brge	.+82     	; 0x3488 <LED2+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3436:	6f a1       	ldd	r22, Y+39	; 0x27
    3438:	78 a5       	ldd	r23, Y+40	; 0x28
    343a:	89 a5       	ldd	r24, Y+41	; 0x29
    343c:	9a a5       	ldd	r25, Y+42	; 0x2a
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e2       	ldi	r20, 0x20	; 32
    3444:	51 e4       	ldi	r21, 0x41	; 65
    3446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	bc 01       	movw	r22, r24
    3450:	cd 01       	movw	r24, r26
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	9a a3       	std	Y+34, r25	; 0x22
    345c:	89 a3       	std	Y+33, r24	; 0x21
    345e:	0f c0       	rjmp	.+30     	; 0x347e <LED2+0x4be>
    3460:	80 e9       	ldi	r24, 0x90	; 144
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	98 a3       	std	Y+32, r25	; 0x20
    3466:	8f 8f       	std	Y+31, r24	; 0x1f
    3468:	8f 8d       	ldd	r24, Y+31	; 0x1f
    346a:	98 a1       	ldd	r25, Y+32	; 0x20
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	f1 f7       	brne	.-4      	; 0x346c <LED2+0x4ac>
    3470:	98 a3       	std	Y+32, r25	; 0x20
    3472:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3474:	89 a1       	ldd	r24, Y+33	; 0x21
    3476:	9a a1       	ldd	r25, Y+34	; 0x22
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	9a a3       	std	Y+34, r25	; 0x22
    347c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347e:	89 a1       	ldd	r24, Y+33	; 0x21
    3480:	9a a1       	ldd	r25, Y+34	; 0x22
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	69 f7       	brne	.-38     	; 0x3460 <LED2+0x4a0>
    3486:	14 c0       	rjmp	.+40     	; 0x34b0 <LED2+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3488:	6b a1       	ldd	r22, Y+35	; 0x23
    348a:	7c a1       	ldd	r23, Y+36	; 0x24
    348c:	8d a1       	ldd	r24, Y+37	; 0x25
    348e:	9e a1       	ldd	r25, Y+38	; 0x26
    3490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	9a a3       	std	Y+34, r25	; 0x22
    349a:	89 a3       	std	Y+33, r24	; 0x21
    349c:	89 a1       	ldd	r24, Y+33	; 0x21
    349e:	9a a1       	ldd	r25, Y+34	; 0x22
    34a0:	9e 8f       	std	Y+30, r25	; 0x1e
    34a2:	8d 8f       	std	Y+29, r24	; 0x1d
    34a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <LED2+0x4e8>
    34ac:	9e 8f       	std	Y+30, r25	; 0x1e
    34ae:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				DIO_SetPinValue(PORTC, Pin2, LOW);
    34b0:	82 e0       	ldi	r24, 0x02	; 2
    34b2:	62 e0       	ldi	r22, 0x02	; 2
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			}
		}
		if(DIO_GetPinValue(PORTA, Pin1) && !DIO_GetPinValue(PORTA, Pin0) && !DIO_GetPinValue(PORTA, Pin2))
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	61 e0       	ldi	r22, 0x01	; 1
    34be:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    34c2:	88 23       	and	r24, r24
    34c4:	09 f4       	brne	.+2      	; 0x34c8 <LED2+0x508>
    34c6:	b3 c0       	rjmp	.+358    	; 0x362e <LED2+0x66e>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    34d0:	88 23       	and	r24, r24
    34d2:	09 f0       	breq	.+2      	; 0x34d6 <LED2+0x516>
    34d4:	ac c0       	rjmp	.+344    	; 0x362e <LED2+0x66e>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	62 e0       	ldi	r22, 0x02	; 2
    34da:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    34de:	88 23       	and	r24, r24
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <LED2+0x524>
    34e2:	a5 c0       	rjmp	.+330    	; 0x362e <LED2+0x66e>
		{
			if(DIO_GetPinValue(PORTA, Pin1) && !DIO_GetPinValue(PORTA, Pin0) && !DIO_GetPinValue(PORTA, Pin2))
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	61 e0       	ldi	r22, 0x01	; 1
    34e8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    34ec:	88 23       	and	r24, r24
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <LED2+0x532>
    34f0:	9e c0       	rjmp	.+316    	; 0x362e <LED2+0x66e>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    34fa:	88 23       	and	r24, r24
    34fc:	09 f0       	breq	.+2      	; 0x3500 <LED2+0x540>
    34fe:	97 c0       	rjmp	.+302    	; 0x362e <LED2+0x66e>
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	62 e0       	ldi	r22, 0x02	; 2
    3504:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3508:	88 23       	and	r24, r24
    350a:	09 f0       	breq	.+2      	; 0x350e <LED2+0x54e>
    350c:	90 c0       	rjmp	.+288    	; 0x362e <LED2+0x66e>
			{
				DIO_SetPinValue(PORTC, Pin0, HIGH);
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	41 e0       	ldi	r20, 0x01	; 1
    3514:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
				DIO_SetPinValue(PORTC, Pin1, HIGH);
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	61 e0       	ldi	r22, 0x01	; 1
    351c:	41 e0       	ldi	r20, 0x01	; 1
    351e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
				DIO_SetPinValue(PORTC, Pin2, HIGH);
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	62 e0       	ldi	r22, 0x02	; 2
    3526:	41 e0       	ldi	r20, 0x01	; 1
    3528:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	aa ef       	ldi	r26, 0xFA	; 250
    3532:	b3 e4       	ldi	r27, 0x43	; 67
    3534:	89 8f       	std	Y+25, r24	; 0x19
    3536:	9a 8f       	std	Y+26, r25	; 0x1a
    3538:	ab 8f       	std	Y+27, r26	; 0x1b
    353a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353c:	69 8d       	ldd	r22, Y+25	; 0x19
    353e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	4a e7       	ldi	r20, 0x7A	; 122
    354a:	55 e4       	ldi	r21, 0x45	; 69
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	8d 8b       	std	Y+21, r24	; 0x15
    3556:	9e 8b       	std	Y+22, r25	; 0x16
    3558:	af 8b       	std	Y+23, r26	; 0x17
    355a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    355c:	6d 89       	ldd	r22, Y+21	; 0x15
    355e:	7e 89       	ldd	r23, Y+22	; 0x16
    3560:	8f 89       	ldd	r24, Y+23	; 0x17
    3562:	98 8d       	ldd	r25, Y+24	; 0x18
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e8       	ldi	r20, 0x80	; 128
    356a:	5f e3       	ldi	r21, 0x3F	; 63
    356c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3570:	88 23       	and	r24, r24
    3572:	2c f4       	brge	.+10     	; 0x357e <LED2+0x5be>
		__ticks = 1;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9c 8b       	std	Y+20, r25	; 0x14
    357a:	8b 8b       	std	Y+19, r24	; 0x13
    357c:	3f c0       	rjmp	.+126    	; 0x35fc <LED2+0x63c>
	else if (__tmp > 65535)
    357e:	6d 89       	ldd	r22, Y+21	; 0x15
    3580:	7e 89       	ldd	r23, Y+22	; 0x16
    3582:	8f 89       	ldd	r24, Y+23	; 0x17
    3584:	98 8d       	ldd	r25, Y+24	; 0x18
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	3f ef       	ldi	r19, 0xFF	; 255
    358a:	4f e7       	ldi	r20, 0x7F	; 127
    358c:	57 e4       	ldi	r21, 0x47	; 71
    358e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3592:	18 16       	cp	r1, r24
    3594:	4c f5       	brge	.+82     	; 0x35e8 <LED2+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3596:	69 8d       	ldd	r22, Y+25	; 0x19
    3598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    359a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e2       	ldi	r20, 0x20	; 32
    35a4:	51 e4       	ldi	r21, 0x41	; 65
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	9c 8b       	std	Y+20, r25	; 0x14
    35bc:	8b 8b       	std	Y+19, r24	; 0x13
    35be:	0f c0       	rjmp	.+30     	; 0x35de <LED2+0x61e>
    35c0:	80 e9       	ldi	r24, 0x90	; 144
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	9a 8b       	std	Y+18, r25	; 0x12
    35c6:	89 8b       	std	Y+17, r24	; 0x11
    35c8:	89 89       	ldd	r24, Y+17	; 0x11
    35ca:	9a 89       	ldd	r25, Y+18	; 0x12
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <LED2+0x60c>
    35d0:	9a 8b       	std	Y+18, r25	; 0x12
    35d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d4:	8b 89       	ldd	r24, Y+19	; 0x13
    35d6:	9c 89       	ldd	r25, Y+20	; 0x14
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	9c 8b       	std	Y+20, r25	; 0x14
    35dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35de:	8b 89       	ldd	r24, Y+19	; 0x13
    35e0:	9c 89       	ldd	r25, Y+20	; 0x14
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	69 f7       	brne	.-38     	; 0x35c0 <LED2+0x600>
    35e6:	14 c0       	rjmp	.+40     	; 0x3610 <LED2+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e8:	6d 89       	ldd	r22, Y+21	; 0x15
    35ea:	7e 89       	ldd	r23, Y+22	; 0x16
    35ec:	8f 89       	ldd	r24, Y+23	; 0x17
    35ee:	98 8d       	ldd	r25, Y+24	; 0x18
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	9c 8b       	std	Y+20, r25	; 0x14
    35fa:	8b 8b       	std	Y+19, r24	; 0x13
    35fc:	8b 89       	ldd	r24, Y+19	; 0x13
    35fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3600:	98 8b       	std	Y+16, r25	; 0x10
    3602:	8f 87       	std	Y+15, r24	; 0x0f
    3604:	8f 85       	ldd	r24, Y+15	; 0x0f
    3606:	98 89       	ldd	r25, Y+16	; 0x10
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	f1 f7       	brne	.-4      	; 0x3608 <LED2+0x648>
    360c:	98 8b       	std	Y+16, r25	; 0x10
    360e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				DIO_SetPinValue(PORTC, Pin0, LOW);
    3610:	82 e0       	ldi	r24, 0x02	; 2
    3612:	60 e0       	ldi	r22, 0x00	; 0
    3614:	40 e0       	ldi	r20, 0x00	; 0
    3616:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
				DIO_SetPinValue(PORTC, Pin1, LOW);
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	61 e0       	ldi	r22, 0x01	; 1
    361e:	40 e0       	ldi	r20, 0x00	; 0
    3620:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
				DIO_SetPinValue(PORTC, Pin2, LOW);
    3624:	82 e0       	ldi	r24, 0x02	; 2
    3626:	62 e0       	ldi	r22, 0x02	; 2
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			}
		}
		if(DIO_GetPinValue(PORTA, Pin2) && !DIO_GetPinValue(PORTA, Pin1) && !DIO_GetPinValue(PORTA, Pin0))
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	62 e0       	ldi	r22, 0x02	; 2
    3632:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3636:	88 23       	and	r24, r24
    3638:	09 f4       	brne	.+2      	; 0x363c <LED2+0x67c>
    363a:	db cc       	rjmp	.-1610   	; 0x2ff2 <LED2+0x32>
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	61 e0       	ldi	r22, 0x01	; 1
    3640:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3644:	88 23       	and	r24, r24
    3646:	09 f0       	breq	.+2      	; 0x364a <LED2+0x68a>
    3648:	d4 cc       	rjmp	.-1624   	; 0x2ff2 <LED2+0x32>
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3652:	88 23       	and	r24, r24
    3654:	09 f0       	breq	.+2      	; 0x3658 <LED2+0x698>
    3656:	cd cc       	rjmp	.-1638   	; 0x2ff2 <LED2+0x32>
		{
			if(DIO_GetPinValue(PORTA, Pin2) && !DIO_GetPinValue(PORTA, Pin1) && !DIO_GetPinValue(PORTA, Pin0))
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	62 e0       	ldi	r22, 0x02	; 2
    365c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3660:	88 23       	and	r24, r24
    3662:	09 f4       	brne	.+2      	; 0x3666 <LED2+0x6a6>
    3664:	c6 cc       	rjmp	.-1652   	; 0x2ff2 <LED2+0x32>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	61 e0       	ldi	r22, 0x01	; 1
    366a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    366e:	88 23       	and	r24, r24
    3670:	09 f0       	breq	.+2      	; 0x3674 <LED2+0x6b4>
    3672:	bf cc       	rjmp	.-1666   	; 0x2ff2 <LED2+0x32>
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	60 e0       	ldi	r22, 0x00	; 0
    3678:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    367c:	88 23       	and	r24, r24
    367e:	09 f0       	breq	.+2      	; 0x3682 <LED2+0x6c2>
    3680:	b8 cc       	rjmp	.-1680   	; 0x2ff2 <LED2+0x32>
			{
				DIO_SetPinValue(PORTC, Pin0, HIGH);
    3682:	82 e0       	ldi	r24, 0x02	; 2
    3684:	60 e0       	ldi	r22, 0x00	; 0
    3686:	41 e0       	ldi	r20, 0x01	; 1
    3688:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
				DIO_SetPinValue(PORTC, Pin1, LOW);
    368c:	82 e0       	ldi	r24, 0x02	; 2
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
				DIO_SetPinValue(PORTC, Pin2, HIGH);
    3696:	82 e0       	ldi	r24, 0x02	; 2
    3698:	62 e0       	ldi	r22, 0x02	; 2
    369a:	41 e0       	ldi	r20, 0x01	; 1
    369c:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	aa ef       	ldi	r26, 0xFA	; 250
    36a6:	b3 e4       	ldi	r27, 0x43	; 67
    36a8:	8b 87       	std	Y+11, r24	; 0x0b
    36aa:	9c 87       	std	Y+12, r25	; 0x0c
    36ac:	ad 87       	std	Y+13, r26	; 0x0d
    36ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	4a e7       	ldi	r20, 0x7A	; 122
    36be:	55 e4       	ldi	r21, 0x45	; 69
    36c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	8f 83       	std	Y+7, r24	; 0x07
    36ca:	98 87       	std	Y+8, r25	; 0x08
    36cc:	a9 87       	std	Y+9, r26	; 0x09
    36ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36d0:	6f 81       	ldd	r22, Y+7	; 0x07
    36d2:	78 85       	ldd	r23, Y+8	; 0x08
    36d4:	89 85       	ldd	r24, Y+9	; 0x09
    36d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e8       	ldi	r20, 0x80	; 128
    36de:	5f e3       	ldi	r21, 0x3F	; 63
    36e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36e4:	88 23       	and	r24, r24
    36e6:	2c f4       	brge	.+10     	; 0x36f2 <LED2+0x732>
		__ticks = 1;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	9e 83       	std	Y+6, r25	; 0x06
    36ee:	8d 83       	std	Y+5, r24	; 0x05
    36f0:	3f c0       	rjmp	.+126    	; 0x3770 <LED2+0x7b0>
	else if (__tmp > 65535)
    36f2:	6f 81       	ldd	r22, Y+7	; 0x07
    36f4:	78 85       	ldd	r23, Y+8	; 0x08
    36f6:	89 85       	ldd	r24, Y+9	; 0x09
    36f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	3f ef       	ldi	r19, 0xFF	; 255
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	57 e4       	ldi	r21, 0x47	; 71
    3702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3706:	18 16       	cp	r1, r24
    3708:	4c f5       	brge	.+82     	; 0x375c <LED2+0x79c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370a:	6b 85       	ldd	r22, Y+11	; 0x0b
    370c:	7c 85       	ldd	r23, Y+12	; 0x0c
    370e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3710:	9e 85       	ldd	r25, Y+14	; 0x0e
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e2       	ldi	r20, 0x20	; 32
    3718:	51 e4       	ldi	r21, 0x41	; 65
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	bc 01       	movw	r22, r24
    3724:	cd 01       	movw	r24, r26
    3726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	9e 83       	std	Y+6, r25	; 0x06
    3730:	8d 83       	std	Y+5, r24	; 0x05
    3732:	0f c0       	rjmp	.+30     	; 0x3752 <LED2+0x792>
    3734:	80 e9       	ldi	r24, 0x90	; 144
    3736:	91 e0       	ldi	r25, 0x01	; 1
    3738:	9c 83       	std	Y+4, r25	; 0x04
    373a:	8b 83       	std	Y+3, r24	; 0x03
    373c:	8b 81       	ldd	r24, Y+3	; 0x03
    373e:	9c 81       	ldd	r25, Y+4	; 0x04
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <LED2+0x780>
    3744:	9c 83       	std	Y+4, r25	; 0x04
    3746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3748:	8d 81       	ldd	r24, Y+5	; 0x05
    374a:	9e 81       	ldd	r25, Y+6	; 0x06
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	9e 83       	std	Y+6, r25	; 0x06
    3750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3752:	8d 81       	ldd	r24, Y+5	; 0x05
    3754:	9e 81       	ldd	r25, Y+6	; 0x06
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	69 f7       	brne	.-38     	; 0x3734 <LED2+0x774>
    375a:	14 c0       	rjmp	.+40     	; 0x3784 <LED2+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375c:	6f 81       	ldd	r22, Y+7	; 0x07
    375e:	78 85       	ldd	r23, Y+8	; 0x08
    3760:	89 85       	ldd	r24, Y+9	; 0x09
    3762:	9a 85       	ldd	r25, Y+10	; 0x0a
    3764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	9a 83       	std	Y+2, r25	; 0x02
    3776:	89 83       	std	Y+1, r24	; 0x01
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	9a 81       	ldd	r25, Y+2	; 0x02
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	f1 f7       	brne	.-4      	; 0x377c <LED2+0x7bc>
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				DIO_SetPinValue(PORTC, Pin0, LOW);
    3784:	82 e0       	ldi	r24, 0x02	; 2
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
				DIO_SetPinValue(PORTC, Pin1, HIGH);
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	61 e0       	ldi	r22, 0x01	; 1
    3792:	41 e0       	ldi	r20, 0x01	; 1
    3794:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
				DIO_SetPinValue(PORTC, Pin2, LOW);
    3798:	82 e0       	ldi	r24, 0x02	; 2
    379a:	62 e0       	ldi	r22, 0x02	; 2
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    37a2:	27 cc       	rjmp	.-1970   	; 0x2ff2 <LED2+0x32>

000037a4 <PUSH_BUTTON>:
#include "../LIB/STD_types.h"
#include "../MCAL/DIO/DIO.h"


void PUSH_BUTTON()
{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	0f 92       	push	r0
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection(PORTD, Pin2, Input);
    37ae:	83 e0       	ldi	r24, 0x03	; 3
    37b0:	62 e0       	ldi	r22, 0x02	; 2
    37b2:	40 e0       	ldi	r20, 0x00	; 0
    37b4:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, Pin2, Output);
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	62 e0       	ldi	r22, 0x02	; 2
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>

	STD_levelTypes Pin_Value = DIO_GetPinValue(PORTD, Pin2);
    37c2:	83 e0       	ldi	r24, 0x03	; 3
    37c4:	62 e0       	ldi	r22, 0x02	; 2
    37c6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    37ca:	89 83       	std	Y+1, r24	; 0x01
	if(Pin_Value == HIGH)
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	81 30       	cpi	r24, 0x01	; 1
    37d0:	31 f4       	brne	.+12     	; 0x37de <PUSH_BUTTON+0x3a>
	{
		DIO_SetPinValue(PORTA, Pin2, HIGH);
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	62 e0       	ldi	r22, 0x02	; 2
    37d6:	41 e0       	ldi	r20, 0x01	; 1
    37d8:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    37dc:	08 c0       	rjmp	.+16     	; 0x37ee <PUSH_BUTTON+0x4a>
	}
	else if(Pin_Value == LOW)
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	88 23       	and	r24, r24
    37e2:	29 f4       	brne	.+10     	; 0x37ee <PUSH_BUTTON+0x4a>
	{
		DIO_SetPinValue(PORTA, Pin2, LOW);
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	62 e0       	ldi	r22, 0x02	; 2
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
	}
}
    37ee:	0f 90       	pop	r0
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <PUSH_BUTTON2>:
#include "../MCAL/DIO/DIO_types.h"
#include "../MCAL/DIO/DIO.h"
#include "../LIB/STD_types.h"

void PUSH_BUTTON2()
{
    37f6:	0f 93       	push	r16
    37f8:	1f 93       	push	r17
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	cd 59       	subi	r28, 0x9D	; 157
    3804:	d0 40       	sbci	r29, 0x00	; 0
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinDirection(PORTD, Pin0, Input);
    3810:	83 e0       	ldi	r24, 0x03	; 3
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	40 e0       	ldi	r20, 0x00	; 0
    3816:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD, Pin1, Input);
    381a:	83 e0       	ldi	r24, 0x03	; 3
    381c:	61 e0       	ldi	r22, 0x01	; 1
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD, Pin2, Input);
    3824:	83 e0       	ldi	r24, 0x03	; 3
    3826:	62 e0       	ldi	r22, 0x02	; 2
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>

	DIO_SetPinDirection(PORTA, Pin0, Output);
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	60 e0       	ldi	r22, 0x00	; 0
    3832:	41 e0       	ldi	r20, 0x01	; 1
    3834:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, Pin1, Output);
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	61 e0       	ldi	r22, 0x01	; 1
    383c:	41 e0       	ldi	r20, 0x01	; 1
    383e:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA, Pin2, Output);
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	62 e0       	ldi	r22, 0x02	; 2
    3846:	41 e0       	ldi	r20, 0x01	; 1
    3848:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	while(1)
	{
		STD_levelTypes Button0 = DIO_GetPinValue(PORTD, Pin0);
    384c:	83 e0       	ldi	r24, 0x03	; 3
    384e:	60 e0       	ldi	r22, 0x00	; 0
    3850:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3854:	fe 01       	movw	r30, r28
    3856:	e3 56       	subi	r30, 0x63	; 99
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	80 83       	st	Z, r24
		STD_levelTypes Button1 = DIO_GetPinValue(PORTD, Pin1);
    385c:	83 e0       	ldi	r24, 0x03	; 3
    385e:	61 e0       	ldi	r22, 0x01	; 1
    3860:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3864:	fe 01       	movw	r30, r28
    3866:	e4 56       	subi	r30, 0x64	; 100
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 83       	st	Z, r24
		STD_levelTypes Button2 = DIO_GetPinValue(PORTD, Pin2);
    386c:	83 e0       	ldi	r24, 0x03	; 3
    386e:	62 e0       	ldi	r22, 0x02	; 2
    3870:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_GetPinValue>
    3874:	fe 01       	movw	r30, r28
    3876:	e5 56       	subi	r30, 0x65	; 101
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	80 83       	st	Z, r24

		if(Button0 == HIGH && Button1 == LOW && Button2 == LOW)
    387c:	fe 01       	movw	r30, r28
    387e:	e3 56       	subi	r30, 0x63	; 99
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	80 81       	ld	r24, Z
    3884:	81 30       	cpi	r24, 0x01	; 1
    3886:	e1 f4       	brne	.+56     	; 0x38c0 <PUSH_BUTTON2+0xca>
    3888:	fe 01       	movw	r30, r28
    388a:	e4 56       	subi	r30, 0x64	; 100
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	88 23       	and	r24, r24
    3892:	b1 f4       	brne	.+44     	; 0x38c0 <PUSH_BUTTON2+0xca>
    3894:	fe 01       	movw	r30, r28
    3896:	e5 56       	subi	r30, 0x65	; 101
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	80 81       	ld	r24, Z
    389c:	88 23       	and	r24, r24
    389e:	81 f4       	brne	.+32     	; 0x38c0 <PUSH_BUTTON2+0xca>
		{
			DIO_SetPinValue(PORTA, Pin0, HIGH);
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	60 e0       	ldi	r22, 0x00	; 0
    38a4:	41 e0       	ldi	r20, 0x01	; 1
    38a6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, HIGH);
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	61 e0       	ldi	r22, 0x01	; 1
    38ae:	41 e0       	ldi	r20, 0x01	; 1
    38b0:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, HIGH);
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	62 e0       	ldi	r22, 0x02	; 2
    38b8:	41 e0       	ldi	r20, 0x01	; 1
    38ba:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    38be:	c6 cf       	rjmp	.-116    	; 0x384c <PUSH_BUTTON2+0x56>
		}
		else if(Button1 == HIGH && Button0 == LOW && Button2 == LOW)
    38c0:	fe 01       	movw	r30, r28
    38c2:	e4 56       	subi	r30, 0x64	; 100
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 81       	ld	r24, Z
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	09 f0       	breq	.+2      	; 0x38ce <PUSH_BUTTON2+0xd8>
    38cc:	56 c2       	rjmp	.+1196   	; 0x3d7a <PUSH_BUTTON2+0x584>
    38ce:	fe 01       	movw	r30, r28
    38d0:	e3 56       	subi	r30, 0x63	; 99
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	88 23       	and	r24, r24
    38d8:	09 f0       	breq	.+2      	; 0x38dc <PUSH_BUTTON2+0xe6>
    38da:	4f c2       	rjmp	.+1182   	; 0x3d7a <PUSH_BUTTON2+0x584>
    38dc:	fe 01       	movw	r30, r28
    38de:	e5 56       	subi	r30, 0x65	; 101
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	80 81       	ld	r24, Z
    38e4:	88 23       	and	r24, r24
    38e6:	09 f0       	breq	.+2      	; 0x38ea <PUSH_BUTTON2+0xf4>
    38e8:	48 c2       	rjmp	.+1168   	; 0x3d7a <PUSH_BUTTON2+0x584>
		{
			DIO_SetPinValue(PORTA, Pin0, HIGH);
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	41 e0       	ldi	r20, 0x01	; 1
    38f0:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, LOW);
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	61 e0       	ldi	r22, 0x01	; 1
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, LOW);
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	62 e0       	ldi	r22, 0x02	; 2
    3902:	40 e0       	ldi	r20, 0x00	; 0
    3904:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    3908:	fe 01       	movw	r30, r28
    390a:	e9 56       	subi	r30, 0x69	; 105
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	aa ef       	ldi	r26, 0xFA	; 250
    3914:	b3 e4       	ldi	r27, 0x43	; 67
    3916:	80 83       	st	Z, r24
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	a2 83       	std	Z+2, r26	; 0x02
    391c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391e:	8e 01       	movw	r16, r28
    3920:	0d 56       	subi	r16, 0x6D	; 109
    3922:	1f 4f       	sbci	r17, 0xFF	; 255
    3924:	fe 01       	movw	r30, r28
    3926:	e9 56       	subi	r30, 0x69	; 105
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a e7       	ldi	r20, 0x7A	; 122
    3938:	55 e4       	ldi	r21, 0x45	; 69
    393a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	f8 01       	movw	r30, r16
    3944:	80 83       	st	Z, r24
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	a2 83       	std	Z+2, r26	; 0x02
    394a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    394c:	fe 01       	movw	r30, r28
    394e:	ed 56       	subi	r30, 0x6D	; 109
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	60 81       	ld	r22, Z
    3954:	71 81       	ldd	r23, Z+1	; 0x01
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	93 81       	ldd	r25, Z+3	; 0x03
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	5f e3       	ldi	r21, 0x3F	; 63
    3962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3966:	88 23       	and	r24, r24
    3968:	44 f4       	brge	.+16     	; 0x397a <PUSH_BUTTON2+0x184>
		__ticks = 1;
    396a:	fe 01       	movw	r30, r28
    396c:	ef 56       	subi	r30, 0x6F	; 111
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	91 83       	std	Z+1, r25	; 0x01
    3976:	80 83       	st	Z, r24
    3978:	64 c0       	rjmp	.+200    	; 0x3a42 <PUSH_BUTTON2+0x24c>
	else if (__tmp > 65535)
    397a:	fe 01       	movw	r30, r28
    397c:	ed 56       	subi	r30, 0x6D	; 109
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	3f ef       	ldi	r19, 0xFF	; 255
    398c:	4f e7       	ldi	r20, 0x7F	; 127
    398e:	57 e4       	ldi	r21, 0x47	; 71
    3990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3994:	18 16       	cp	r1, r24
    3996:	0c f0       	brlt	.+2      	; 0x399a <PUSH_BUTTON2+0x1a4>
    3998:	43 c0       	rjmp	.+134    	; 0x3a20 <PUSH_BUTTON2+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399a:	fe 01       	movw	r30, r28
    399c:	e9 56       	subi	r30, 0x69	; 105
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	60 81       	ld	r22, Z
    39a2:	71 81       	ldd	r23, Z+1	; 0x01
    39a4:	82 81       	ldd	r24, Z+2	; 0x02
    39a6:	93 81       	ldd	r25, Z+3	; 0x03
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	40 e2       	ldi	r20, 0x20	; 32
    39ae:	51 e4       	ldi	r21, 0x41	; 65
    39b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	8e 01       	movw	r16, r28
    39ba:	0f 56       	subi	r16, 0x6F	; 111
    39bc:	1f 4f       	sbci	r17, 0xFF	; 255
    39be:	bc 01       	movw	r22, r24
    39c0:	cd 01       	movw	r24, r26
    39c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	f8 01       	movw	r30, r16
    39cc:	91 83       	std	Z+1, r25	; 0x01
    39ce:	80 83       	st	Z, r24
    39d0:	1f c0       	rjmp	.+62     	; 0x3a10 <PUSH_BUTTON2+0x21a>
    39d2:	fe 01       	movw	r30, r28
    39d4:	e1 57       	subi	r30, 0x71	; 113
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 e9       	ldi	r24, 0x90	; 144
    39da:	91 e0       	ldi	r25, 0x01	; 1
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	80 83       	st	Z, r24
    39e0:	fe 01       	movw	r30, r28
    39e2:	e1 57       	subi	r30, 0x71	; 113
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	80 81       	ld	r24, Z
    39e8:	91 81       	ldd	r25, Z+1	; 0x01
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	f1 f7       	brne	.-4      	; 0x39ea <PUSH_BUTTON2+0x1f4>
    39ee:	fe 01       	movw	r30, r28
    39f0:	e1 57       	subi	r30, 0x71	; 113
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	91 83       	std	Z+1, r25	; 0x01
    39f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f8:	de 01       	movw	r26, r28
    39fa:	af 56       	subi	r26, 0x6F	; 111
    39fc:	bf 4f       	sbci	r27, 0xFF	; 255
    39fe:	fe 01       	movw	r30, r28
    3a00:	ef 56       	subi	r30, 0x6F	; 111
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	80 81       	ld	r24, Z
    3a06:	91 81       	ldd	r25, Z+1	; 0x01
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	11 96       	adiw	r26, 0x01	; 1
    3a0c:	9c 93       	st	X, r25
    3a0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a10:	fe 01       	movw	r30, r28
    3a12:	ef 56       	subi	r30, 0x6F	; 111
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 81       	ld	r24, Z
    3a18:	91 81       	ldd	r25, Z+1	; 0x01
    3a1a:	00 97       	sbiw	r24, 0x00	; 0
    3a1c:	d1 f6       	brne	.-76     	; 0x39d2 <PUSH_BUTTON2+0x1dc>
    3a1e:	27 c0       	rjmp	.+78     	; 0x3a6e <PUSH_BUTTON2+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a20:	8e 01       	movw	r16, r28
    3a22:	0f 56       	subi	r16, 0x6F	; 111
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	fe 01       	movw	r30, r28
    3a28:	ed 56       	subi	r30, 0x6D	; 109
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	60 81       	ld	r22, Z
    3a2e:	71 81       	ldd	r23, Z+1	; 0x01
    3a30:	82 81       	ldd	r24, Z+2	; 0x02
    3a32:	93 81       	ldd	r25, Z+3	; 0x03
    3a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	f8 01       	movw	r30, r16
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	80 83       	st	Z, r24
    3a42:	de 01       	movw	r26, r28
    3a44:	a3 57       	subi	r26, 0x73	; 115
    3a46:	bf 4f       	sbci	r27, 0xFF	; 255
    3a48:	fe 01       	movw	r30, r28
    3a4a:	ef 56       	subi	r30, 0x6F	; 111
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	80 81       	ld	r24, Z
    3a50:	91 81       	ldd	r25, Z+1	; 0x01
    3a52:	8d 93       	st	X+, r24
    3a54:	9c 93       	st	X, r25
    3a56:	fe 01       	movw	r30, r28
    3a58:	e3 57       	subi	r30, 0x73	; 115
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 81       	ld	r24, Z
    3a5e:	91 81       	ldd	r25, Z+1	; 0x01
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <PUSH_BUTTON2+0x26a>
    3a64:	fe 01       	movw	r30, r28
    3a66:	e3 57       	subi	r30, 0x73	; 115
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	91 83       	std	Z+1, r25	; 0x01
    3a6c:	80 83       	st	Z, r24
			_delay_ms(500);
			DIO_SetPinValue(PORTA, Pin0, LOW);
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	40 e0       	ldi	r20, 0x00	; 0
    3a74:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, HIGH);
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	61 e0       	ldi	r22, 0x01	; 1
    3a7c:	41 e0       	ldi	r20, 0x01	; 1
    3a7e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, LOW);
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	62 e0       	ldi	r22, 0x02	; 2
    3a86:	40 e0       	ldi	r20, 0x00	; 0
    3a88:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e7 57       	subi	r30, 0x77	; 119
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	aa ef       	ldi	r26, 0xFA	; 250
    3a98:	b3 e4       	ldi	r27, 0x43	; 67
    3a9a:	80 83       	st	Z, r24
    3a9c:	91 83       	std	Z+1, r25	; 0x01
    3a9e:	a2 83       	std	Z+2, r26	; 0x02
    3aa0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa2:	8e 01       	movw	r16, r28
    3aa4:	0b 57       	subi	r16, 0x7B	; 123
    3aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	e7 57       	subi	r30, 0x77	; 119
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	60 81       	ld	r22, Z
    3ab0:	71 81       	ldd	r23, Z+1	; 0x01
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	93 81       	ldd	r25, Z+3	; 0x03
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	4a e7       	ldi	r20, 0x7A	; 122
    3abc:	55 e4       	ldi	r21, 0x45	; 69
    3abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	f8 01       	movw	r30, r16
    3ac8:	80 83       	st	Z, r24
    3aca:	91 83       	std	Z+1, r25	; 0x01
    3acc:	a2 83       	std	Z+2, r26	; 0x02
    3ace:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	eb 57       	subi	r30, 0x7B	; 123
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	60 81       	ld	r22, Z
    3ad8:	71 81       	ldd	r23, Z+1	; 0x01
    3ada:	82 81       	ldd	r24, Z+2	; 0x02
    3adc:	93 81       	ldd	r25, Z+3	; 0x03
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e8       	ldi	r20, 0x80	; 128
    3ae4:	5f e3       	ldi	r21, 0x3F	; 63
    3ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aea:	88 23       	and	r24, r24
    3aec:	44 f4       	brge	.+16     	; 0x3afe <PUSH_BUTTON2+0x308>
		__ticks = 1;
    3aee:	fe 01       	movw	r30, r28
    3af0:	ed 57       	subi	r30, 0x7D	; 125
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
    3afc:	64 c0       	rjmp	.+200    	; 0x3bc6 <PUSH_BUTTON2+0x3d0>
	else if (__tmp > 65535)
    3afe:	fe 01       	movw	r30, r28
    3b00:	eb 57       	subi	r30, 0x7B	; 123
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	60 81       	ld	r22, Z
    3b06:	71 81       	ldd	r23, Z+1	; 0x01
    3b08:	82 81       	ldd	r24, Z+2	; 0x02
    3b0a:	93 81       	ldd	r25, Z+3	; 0x03
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	3f ef       	ldi	r19, 0xFF	; 255
    3b10:	4f e7       	ldi	r20, 0x7F	; 127
    3b12:	57 e4       	ldi	r21, 0x47	; 71
    3b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b18:	18 16       	cp	r1, r24
    3b1a:	0c f0       	brlt	.+2      	; 0x3b1e <PUSH_BUTTON2+0x328>
    3b1c:	43 c0       	rjmp	.+134    	; 0x3ba4 <PUSH_BUTTON2+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1e:	fe 01       	movw	r30, r28
    3b20:	e7 57       	subi	r30, 0x77	; 119
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	60 81       	ld	r22, Z
    3b26:	71 81       	ldd	r23, Z+1	; 0x01
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e2       	ldi	r20, 0x20	; 32
    3b32:	51 e4       	ldi	r21, 0x41	; 65
    3b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	8e 01       	movw	r16, r28
    3b3e:	0d 57       	subi	r16, 0x7D	; 125
    3b40:	1f 4f       	sbci	r17, 0xFF	; 255
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	f8 01       	movw	r30, r16
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
    3b54:	1f c0       	rjmp	.+62     	; 0x3b94 <PUSH_BUTTON2+0x39e>
    3b56:	fe 01       	movw	r30, r28
    3b58:	ef 57       	subi	r30, 0x7F	; 127
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 e9       	ldi	r24, 0x90	; 144
    3b5e:	91 e0       	ldi	r25, 0x01	; 1
    3b60:	91 83       	std	Z+1, r25	; 0x01
    3b62:	80 83       	st	Z, r24
    3b64:	fe 01       	movw	r30, r28
    3b66:	ef 57       	subi	r30, 0x7F	; 127
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	80 81       	ld	r24, Z
    3b6c:	91 81       	ldd	r25, Z+1	; 0x01
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <PUSH_BUTTON2+0x378>
    3b72:	fe 01       	movw	r30, r28
    3b74:	ef 57       	subi	r30, 0x7F	; 127
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7c:	de 01       	movw	r26, r28
    3b7e:	ad 57       	subi	r26, 0x7D	; 125
    3b80:	bf 4f       	sbci	r27, 0xFF	; 255
    3b82:	fe 01       	movw	r30, r28
    3b84:	ed 57       	subi	r30, 0x7D	; 125
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	80 81       	ld	r24, Z
    3b8a:	91 81       	ldd	r25, Z+1	; 0x01
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	11 96       	adiw	r26, 0x01	; 1
    3b90:	9c 93       	st	X, r25
    3b92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b94:	fe 01       	movw	r30, r28
    3b96:	ed 57       	subi	r30, 0x7D	; 125
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	80 81       	ld	r24, Z
    3b9c:	91 81       	ldd	r25, Z+1	; 0x01
    3b9e:	00 97       	sbiw	r24, 0x00	; 0
    3ba0:	d1 f6       	brne	.-76     	; 0x3b56 <PUSH_BUTTON2+0x360>
    3ba2:	27 c0       	rjmp	.+78     	; 0x3bf2 <PUSH_BUTTON2+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba4:	8e 01       	movw	r16, r28
    3ba6:	0d 57       	subi	r16, 0x7D	; 125
    3ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    3baa:	fe 01       	movw	r30, r28
    3bac:	eb 57       	subi	r30, 0x7B	; 123
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	60 81       	ld	r22, Z
    3bb2:	71 81       	ldd	r23, Z+1	; 0x01
    3bb4:	82 81       	ldd	r24, Z+2	; 0x02
    3bb6:	93 81       	ldd	r25, Z+3	; 0x03
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	f8 01       	movw	r30, r16
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
    3bc6:	de 01       	movw	r26, r28
    3bc8:	a1 58       	subi	r26, 0x81	; 129
    3bca:	bf 4f       	sbci	r27, 0xFF	; 255
    3bcc:	fe 01       	movw	r30, r28
    3bce:	ed 57       	subi	r30, 0x7D	; 125
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	8d 93       	st	X+, r24
    3bd8:	9c 93       	st	X, r25
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e1 58       	subi	r30, 0x81	; 129
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	80 81       	ld	r24, Z
    3be2:	91 81       	ldd	r25, Z+1	; 0x01
    3be4:	01 97       	sbiw	r24, 0x01	; 1
    3be6:	f1 f7       	brne	.-4      	; 0x3be4 <PUSH_BUTTON2+0x3ee>
    3be8:	fe 01       	movw	r30, r28
    3bea:	e1 58       	subi	r30, 0x81	; 129
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	91 83       	std	Z+1, r25	; 0x01
    3bf0:	80 83       	st	Z, r24
			_delay_ms(500);
			DIO_SetPinValue(PORTA, Pin0, LOW);
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	60 e0       	ldi	r22, 0x00	; 0
    3bf6:	40 e0       	ldi	r20, 0x00	; 0
    3bf8:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, LOW);
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	61 e0       	ldi	r22, 0x01	; 1
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, HIGH);
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	62 e0       	ldi	r22, 0x02	; 2
    3c0a:	41 e0       	ldi	r20, 0x01	; 1
    3c0c:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    3c10:	fe 01       	movw	r30, r28
    3c12:	e5 58       	subi	r30, 0x85	; 133
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	aa ef       	ldi	r26, 0xFA	; 250
    3c1c:	b3 e4       	ldi	r27, 0x43	; 67
    3c1e:	80 83       	st	Z, r24
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	a2 83       	std	Z+2, r26	; 0x02
    3c24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c26:	8e 01       	movw	r16, r28
    3c28:	09 58       	subi	r16, 0x89	; 137
    3c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e5 58       	subi	r30, 0x85	; 133
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4a e7       	ldi	r20, 0x7A	; 122
    3c40:	55 e4       	ldi	r21, 0x45	; 69
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	80 83       	st	Z, r24
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	a2 83       	std	Z+2, r26	; 0x02
    3c52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c54:	fe 01       	movw	r30, r28
    3c56:	e9 58       	subi	r30, 0x89	; 137
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	60 81       	ld	r22, Z
    3c5c:	71 81       	ldd	r23, Z+1	; 0x01
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	93 81       	ldd	r25, Z+3	; 0x03
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e8       	ldi	r20, 0x80	; 128
    3c68:	5f e3       	ldi	r21, 0x3F	; 63
    3c6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c6e:	88 23       	and	r24, r24
    3c70:	44 f4       	brge	.+16     	; 0x3c82 <PUSH_BUTTON2+0x48c>
		__ticks = 1;
    3c72:	fe 01       	movw	r30, r28
    3c74:	eb 58       	subi	r30, 0x8B	; 139
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	80 83       	st	Z, r24
    3c80:	64 c0       	rjmp	.+200    	; 0x3d4a <PUSH_BUTTON2+0x554>
	else if (__tmp > 65535)
    3c82:	fe 01       	movw	r30, r28
    3c84:	e9 58       	subi	r30, 0x89	; 137
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	60 81       	ld	r22, Z
    3c8a:	71 81       	ldd	r23, Z+1	; 0x01
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	3f ef       	ldi	r19, 0xFF	; 255
    3c94:	4f e7       	ldi	r20, 0x7F	; 127
    3c96:	57 e4       	ldi	r21, 0x47	; 71
    3c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c9c:	18 16       	cp	r1, r24
    3c9e:	0c f0       	brlt	.+2      	; 0x3ca2 <PUSH_BUTTON2+0x4ac>
    3ca0:	43 c0       	rjmp	.+134    	; 0x3d28 <PUSH_BUTTON2+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	e5 58       	subi	r30, 0x85	; 133
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	60 81       	ld	r22, Z
    3caa:	71 81       	ldd	r23, Z+1	; 0x01
    3cac:	82 81       	ldd	r24, Z+2	; 0x02
    3cae:	93 81       	ldd	r25, Z+3	; 0x03
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e2       	ldi	r20, 0x20	; 32
    3cb6:	51 e4       	ldi	r21, 0x41	; 65
    3cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	8e 01       	movw	r16, r28
    3cc2:	0b 58       	subi	r16, 0x8B	; 139
    3cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	cd 01       	movw	r24, r26
    3cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	91 83       	std	Z+1, r25	; 0x01
    3cd6:	80 83       	st	Z, r24
    3cd8:	1f c0       	rjmp	.+62     	; 0x3d18 <PUSH_BUTTON2+0x522>
    3cda:	fe 01       	movw	r30, r28
    3cdc:	ed 58       	subi	r30, 0x8D	; 141
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 e9       	ldi	r24, 0x90	; 144
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	91 83       	std	Z+1, r25	; 0x01
    3ce6:	80 83       	st	Z, r24
    3ce8:	fe 01       	movw	r30, r28
    3cea:	ed 58       	subi	r30, 0x8D	; 141
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	f1 f7       	brne	.-4      	; 0x3cf2 <PUSH_BUTTON2+0x4fc>
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	ed 58       	subi	r30, 0x8D	; 141
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d00:	de 01       	movw	r26, r28
    3d02:	ab 58       	subi	r26, 0x8B	; 139
    3d04:	bf 4f       	sbci	r27, 0xFF	; 255
    3d06:	fe 01       	movw	r30, r28
    3d08:	eb 58       	subi	r30, 0x8B	; 139
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	11 96       	adiw	r26, 0x01	; 1
    3d14:	9c 93       	st	X, r25
    3d16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d18:	fe 01       	movw	r30, r28
    3d1a:	eb 58       	subi	r30, 0x8B	; 139
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	80 81       	ld	r24, Z
    3d20:	91 81       	ldd	r25, Z+1	; 0x01
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	d1 f6       	brne	.-76     	; 0x3cda <PUSH_BUTTON2+0x4e4>
    3d26:	92 cd       	rjmp	.-1244   	; 0x384c <PUSH_BUTTON2+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d28:	8e 01       	movw	r16, r28
    3d2a:	0b 58       	subi	r16, 0x8B	; 139
    3d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2e:	fe 01       	movw	r30, r28
    3d30:	e9 58       	subi	r30, 0x89	; 137
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	60 81       	ld	r22, Z
    3d36:	71 81       	ldd	r23, Z+1	; 0x01
    3d38:	82 81       	ldd	r24, Z+2	; 0x02
    3d3a:	93 81       	ldd	r25, Z+3	; 0x03
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	f8 01       	movw	r30, r16
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	80 83       	st	Z, r24
    3d4a:	de 01       	movw	r26, r28
    3d4c:	af 58       	subi	r26, 0x8F	; 143
    3d4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d50:	fe 01       	movw	r30, r28
    3d52:	eb 58       	subi	r30, 0x8B	; 139
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 81       	ld	r24, Z
    3d58:	91 81       	ldd	r25, Z+1	; 0x01
    3d5a:	11 96       	adiw	r26, 0x01	; 1
    3d5c:	9c 93       	st	X, r25
    3d5e:	8e 93       	st	-X, r24
    3d60:	fe 01       	movw	r30, r28
    3d62:	ef 58       	subi	r30, 0x8F	; 143
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	f1 f7       	brne	.-4      	; 0x3d6a <PUSH_BUTTON2+0x574>
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ef 58       	subi	r30, 0x8F	; 143
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	91 83       	std	Z+1, r25	; 0x01
    3d76:	80 83       	st	Z, r24
    3d78:	69 cd       	rjmp	.-1326   	; 0x384c <PUSH_BUTTON2+0x56>
			_delay_ms(500);
		}
		else if(Button2 == HIGH && Button1 == LOW && Button0 == LOW)
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e5 56       	subi	r30, 0x65	; 101
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	80 81       	ld	r24, Z
    3d82:	81 30       	cpi	r24, 0x01	; 1
    3d84:	09 f0       	breq	.+2      	; 0x3d88 <PUSH_BUTTON2+0x592>
    3d86:	ed c4       	rjmp	.+2522   	; 0x4762 <PUSH_BUTTON2+0xf6c>
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e4 56       	subi	r30, 0x64	; 100
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	80 81       	ld	r24, Z
    3d90:	88 23       	and	r24, r24
    3d92:	09 f0       	breq	.+2      	; 0x3d96 <PUSH_BUTTON2+0x5a0>
    3d94:	e6 c4       	rjmp	.+2508   	; 0x4762 <PUSH_BUTTON2+0xf6c>
    3d96:	fe 01       	movw	r30, r28
    3d98:	e3 56       	subi	r30, 0x63	; 99
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	88 23       	and	r24, r24
    3da0:	09 f0       	breq	.+2      	; 0x3da4 <PUSH_BUTTON2+0x5ae>
    3da2:	df c4       	rjmp	.+2494   	; 0x4762 <PUSH_BUTTON2+0xf6c>
		{
			DIO_SetPinValue(PORTA, Pin0, LOW); //0
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	60 e0       	ldi	r22, 0x00	; 0
    3da8:	40 e0       	ldi	r20, 0x00	; 0
    3daa:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, LOW);
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	61 e0       	ldi	r22, 0x01	; 1
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, LOW);
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	62 e0       	ldi	r22, 0x02	; 2
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	e3 59       	subi	r30, 0x93	; 147
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	aa ef       	ldi	r26, 0xFA	; 250
    3dce:	b3 e4       	ldi	r27, 0x43	; 67
    3dd0:	80 83       	st	Z, r24
    3dd2:	91 83       	std	Z+1, r25	; 0x01
    3dd4:	a2 83       	std	Z+2, r26	; 0x02
    3dd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd8:	8e 01       	movw	r16, r28
    3dda:	07 59       	subi	r16, 0x97	; 151
    3ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dde:	fe 01       	movw	r30, r28
    3de0:	e3 59       	subi	r30, 0x93	; 147
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	60 81       	ld	r22, Z
    3de6:	71 81       	ldd	r23, Z+1	; 0x01
    3de8:	82 81       	ldd	r24, Z+2	; 0x02
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	4a e7       	ldi	r20, 0x7A	; 122
    3df2:	55 e4       	ldi	r21, 0x45	; 69
    3df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	f8 01       	movw	r30, r16
    3dfe:	80 83       	st	Z, r24
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	a2 83       	std	Z+2, r26	; 0x02
    3e04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e06:	fe 01       	movw	r30, r28
    3e08:	e7 59       	subi	r30, 0x97	; 151
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	60 81       	ld	r22, Z
    3e0e:	71 81       	ldd	r23, Z+1	; 0x01
    3e10:	82 81       	ldd	r24, Z+2	; 0x02
    3e12:	93 81       	ldd	r25, Z+3	; 0x03
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	40 e8       	ldi	r20, 0x80	; 128
    3e1a:	5f e3       	ldi	r21, 0x3F	; 63
    3e1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e20:	88 23       	and	r24, r24
    3e22:	44 f4       	brge	.+16     	; 0x3e34 <PUSH_BUTTON2+0x63e>
		__ticks = 1;
    3e24:	fe 01       	movw	r30, r28
    3e26:	e9 59       	subi	r30, 0x99	; 153
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	91 83       	std	Z+1, r25	; 0x01
    3e30:	80 83       	st	Z, r24
    3e32:	64 c0       	rjmp	.+200    	; 0x3efc <PUSH_BUTTON2+0x706>
	else if (__tmp > 65535)
    3e34:	fe 01       	movw	r30, r28
    3e36:	e7 59       	subi	r30, 0x97	; 151
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	60 81       	ld	r22, Z
    3e3c:	71 81       	ldd	r23, Z+1	; 0x01
    3e3e:	82 81       	ldd	r24, Z+2	; 0x02
    3e40:	93 81       	ldd	r25, Z+3	; 0x03
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	3f ef       	ldi	r19, 0xFF	; 255
    3e46:	4f e7       	ldi	r20, 0x7F	; 127
    3e48:	57 e4       	ldi	r21, 0x47	; 71
    3e4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e4e:	18 16       	cp	r1, r24
    3e50:	0c f0       	brlt	.+2      	; 0x3e54 <PUSH_BUTTON2+0x65e>
    3e52:	43 c0       	rjmp	.+134    	; 0x3eda <PUSH_BUTTON2+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e54:	fe 01       	movw	r30, r28
    3e56:	e3 59       	subi	r30, 0x93	; 147
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	60 81       	ld	r22, Z
    3e5c:	71 81       	ldd	r23, Z+1	; 0x01
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e2       	ldi	r20, 0x20	; 32
    3e68:	51 e4       	ldi	r21, 0x41	; 65
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	8e 01       	movw	r16, r28
    3e74:	09 59       	subi	r16, 0x99	; 153
    3e76:	1f 4f       	sbci	r17, 0xFF	; 255
    3e78:	bc 01       	movw	r22, r24
    3e7a:	cd 01       	movw	r24, r26
    3e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	f8 01       	movw	r30, r16
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	80 83       	st	Z, r24
    3e8a:	1f c0       	rjmp	.+62     	; 0x3eca <PUSH_BUTTON2+0x6d4>
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	eb 59       	subi	r30, 0x9B	; 155
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	80 e9       	ldi	r24, 0x90	; 144
    3e94:	91 e0       	ldi	r25, 0x01	; 1
    3e96:	91 83       	std	Z+1, r25	; 0x01
    3e98:	80 83       	st	Z, r24
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	eb 59       	subi	r30, 0x9B	; 155
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	80 81       	ld	r24, Z
    3ea2:	91 81       	ldd	r25, Z+1	; 0x01
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	f1 f7       	brne	.-4      	; 0x3ea4 <PUSH_BUTTON2+0x6ae>
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	eb 59       	subi	r30, 0x9B	; 155
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	91 83       	std	Z+1, r25	; 0x01
    3eb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb2:	de 01       	movw	r26, r28
    3eb4:	a9 59       	subi	r26, 0x99	; 153
    3eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e9 59       	subi	r30, 0x99	; 153
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	80 81       	ld	r24, Z
    3ec0:	91 81       	ldd	r25, Z+1	; 0x01
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	11 96       	adiw	r26, 0x01	; 1
    3ec6:	9c 93       	st	X, r25
    3ec8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eca:	fe 01       	movw	r30, r28
    3ecc:	e9 59       	subi	r30, 0x99	; 153
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	80 81       	ld	r24, Z
    3ed2:	91 81       	ldd	r25, Z+1	; 0x01
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	d1 f6       	brne	.-76     	; 0x3e8c <PUSH_BUTTON2+0x696>
    3ed8:	27 c0       	rjmp	.+78     	; 0x3f28 <PUSH_BUTTON2+0x732>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eda:	8e 01       	movw	r16, r28
    3edc:	09 59       	subi	r16, 0x99	; 153
    3ede:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e7 59       	subi	r30, 0x97	; 151
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	60 81       	ld	r22, Z
    3ee8:	71 81       	ldd	r23, Z+1	; 0x01
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	91 83       	std	Z+1, r25	; 0x01
    3efa:	80 83       	st	Z, r24
    3efc:	de 01       	movw	r26, r28
    3efe:	ad 59       	subi	r26, 0x9D	; 157
    3f00:	bf 4f       	sbci	r27, 0xFF	; 255
    3f02:	fe 01       	movw	r30, r28
    3f04:	e9 59       	subi	r30, 0x99	; 153
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	80 81       	ld	r24, Z
    3f0a:	91 81       	ldd	r25, Z+1	; 0x01
    3f0c:	8d 93       	st	X+, r24
    3f0e:	9c 93       	st	X, r25
    3f10:	fe 01       	movw	r30, r28
    3f12:	ed 59       	subi	r30, 0x9D	; 157
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <PUSH_BUTTON2+0x724>
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ed 59       	subi	r30, 0x9D	; 157
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
			_delay_ms(500);

			DIO_SetPinValue(PORTA, Pin0, HIGH); //1
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	41 e0       	ldi	r20, 0x01	; 1
    3f2e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, LOW);
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	61 e0       	ldi	r22, 0x01	; 1
    3f36:	40 e0       	ldi	r20, 0x00	; 0
    3f38:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, LOW);
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	62 e0       	ldi	r22, 0x02	; 2
    3f40:	40 e0       	ldi	r20, 0x00	; 0
    3f42:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    3f46:	fe 01       	movw	r30, r28
    3f48:	e1 5a       	subi	r30, 0xA1	; 161
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	aa ef       	ldi	r26, 0xFA	; 250
    3f52:	b3 e4       	ldi	r27, 0x43	; 67
    3f54:	80 83       	st	Z, r24
    3f56:	91 83       	std	Z+1, r25	; 0x01
    3f58:	a2 83       	std	Z+2, r26	; 0x02
    3f5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f5c:	8e 01       	movw	r16, r28
    3f5e:	05 5a       	subi	r16, 0xA5	; 165
    3f60:	1f 4f       	sbci	r17, 0xFF	; 255
    3f62:	fe 01       	movw	r30, r28
    3f64:	e1 5a       	subi	r30, 0xA1	; 161
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	60 81       	ld	r22, Z
    3f6a:	71 81       	ldd	r23, Z+1	; 0x01
    3f6c:	82 81       	ldd	r24, Z+2	; 0x02
    3f6e:	93 81       	ldd	r25, Z+3	; 0x03
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	4a e7       	ldi	r20, 0x7A	; 122
    3f76:	55 e4       	ldi	r21, 0x45	; 69
    3f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	f8 01       	movw	r30, r16
    3f82:	80 83       	st	Z, r24
    3f84:	91 83       	std	Z+1, r25	; 0x01
    3f86:	a2 83       	std	Z+2, r26	; 0x02
    3f88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	e5 5a       	subi	r30, 0xA5	; 165
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	60 81       	ld	r22, Z
    3f92:	71 81       	ldd	r23, Z+1	; 0x01
    3f94:	82 81       	ldd	r24, Z+2	; 0x02
    3f96:	93 81       	ldd	r25, Z+3	; 0x03
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	40 e8       	ldi	r20, 0x80	; 128
    3f9e:	5f e3       	ldi	r21, 0x3F	; 63
    3fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fa4:	88 23       	and	r24, r24
    3fa6:	44 f4       	brge	.+16     	; 0x3fb8 <PUSH_BUTTON2+0x7c2>
		__ticks = 1;
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e7 5a       	subi	r30, 0xA7	; 167
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	91 83       	std	Z+1, r25	; 0x01
    3fb4:	80 83       	st	Z, r24
    3fb6:	64 c0       	rjmp	.+200    	; 0x4080 <PUSH_BUTTON2+0x88a>
	else if (__tmp > 65535)
    3fb8:	fe 01       	movw	r30, r28
    3fba:	e5 5a       	subi	r30, 0xA5	; 165
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	60 81       	ld	r22, Z
    3fc0:	71 81       	ldd	r23, Z+1	; 0x01
    3fc2:	82 81       	ldd	r24, Z+2	; 0x02
    3fc4:	93 81       	ldd	r25, Z+3	; 0x03
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	3f ef       	ldi	r19, 0xFF	; 255
    3fca:	4f e7       	ldi	r20, 0x7F	; 127
    3fcc:	57 e4       	ldi	r21, 0x47	; 71
    3fce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fd2:	18 16       	cp	r1, r24
    3fd4:	0c f0       	brlt	.+2      	; 0x3fd8 <PUSH_BUTTON2+0x7e2>
    3fd6:	43 c0       	rjmp	.+134    	; 0x405e <PUSH_BUTTON2+0x868>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fd8:	fe 01       	movw	r30, r28
    3fda:	e1 5a       	subi	r30, 0xA1	; 161
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	60 81       	ld	r22, Z
    3fe0:	71 81       	ldd	r23, Z+1	; 0x01
    3fe2:	82 81       	ldd	r24, Z+2	; 0x02
    3fe4:	93 81       	ldd	r25, Z+3	; 0x03
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	40 e2       	ldi	r20, 0x20	; 32
    3fec:	51 e4       	ldi	r21, 0x41	; 65
    3fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	8e 01       	movw	r16, r28
    3ff8:	07 5a       	subi	r16, 0xA7	; 167
    3ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffc:	bc 01       	movw	r22, r24
    3ffe:	cd 01       	movw	r24, r26
    4000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	f8 01       	movw	r30, r16
    400a:	91 83       	std	Z+1, r25	; 0x01
    400c:	80 83       	st	Z, r24
    400e:	1f c0       	rjmp	.+62     	; 0x404e <PUSH_BUTTON2+0x858>
    4010:	fe 01       	movw	r30, r28
    4012:	e9 5a       	subi	r30, 0xA9	; 169
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	80 e9       	ldi	r24, 0x90	; 144
    4018:	91 e0       	ldi	r25, 0x01	; 1
    401a:	91 83       	std	Z+1, r25	; 0x01
    401c:	80 83       	st	Z, r24
    401e:	fe 01       	movw	r30, r28
    4020:	e9 5a       	subi	r30, 0xA9	; 169
    4022:	ff 4f       	sbci	r31, 0xFF	; 255
    4024:	80 81       	ld	r24, Z
    4026:	91 81       	ldd	r25, Z+1	; 0x01
    4028:	01 97       	sbiw	r24, 0x01	; 1
    402a:	f1 f7       	brne	.-4      	; 0x4028 <PUSH_BUTTON2+0x832>
    402c:	fe 01       	movw	r30, r28
    402e:	e9 5a       	subi	r30, 0xA9	; 169
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	91 83       	std	Z+1, r25	; 0x01
    4034:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4036:	de 01       	movw	r26, r28
    4038:	a7 5a       	subi	r26, 0xA7	; 167
    403a:	bf 4f       	sbci	r27, 0xFF	; 255
    403c:	fe 01       	movw	r30, r28
    403e:	e7 5a       	subi	r30, 0xA7	; 167
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	80 81       	ld	r24, Z
    4044:	91 81       	ldd	r25, Z+1	; 0x01
    4046:	01 97       	sbiw	r24, 0x01	; 1
    4048:	11 96       	adiw	r26, 0x01	; 1
    404a:	9c 93       	st	X, r25
    404c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404e:	fe 01       	movw	r30, r28
    4050:	e7 5a       	subi	r30, 0xA7	; 167
    4052:	ff 4f       	sbci	r31, 0xFF	; 255
    4054:	80 81       	ld	r24, Z
    4056:	91 81       	ldd	r25, Z+1	; 0x01
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	d1 f6       	brne	.-76     	; 0x4010 <PUSH_BUTTON2+0x81a>
    405c:	27 c0       	rjmp	.+78     	; 0x40ac <PUSH_BUTTON2+0x8b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405e:	8e 01       	movw	r16, r28
    4060:	07 5a       	subi	r16, 0xA7	; 167
    4062:	1f 4f       	sbci	r17, 0xFF	; 255
    4064:	fe 01       	movw	r30, r28
    4066:	e5 5a       	subi	r30, 0xA5	; 165
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	60 81       	ld	r22, Z
    406c:	71 81       	ldd	r23, Z+1	; 0x01
    406e:	82 81       	ldd	r24, Z+2	; 0x02
    4070:	93 81       	ldd	r25, Z+3	; 0x03
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	f8 01       	movw	r30, r16
    407c:	91 83       	std	Z+1, r25	; 0x01
    407e:	80 83       	st	Z, r24
    4080:	de 01       	movw	r26, r28
    4082:	ab 5a       	subi	r26, 0xAB	; 171
    4084:	bf 4f       	sbci	r27, 0xFF	; 255
    4086:	fe 01       	movw	r30, r28
    4088:	e7 5a       	subi	r30, 0xA7	; 167
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	80 81       	ld	r24, Z
    408e:	91 81       	ldd	r25, Z+1	; 0x01
    4090:	8d 93       	st	X+, r24
    4092:	9c 93       	st	X, r25
    4094:	fe 01       	movw	r30, r28
    4096:	eb 5a       	subi	r30, 0xAB	; 171
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 81       	ld	r24, Z
    409c:	91 81       	ldd	r25, Z+1	; 0x01
    409e:	01 97       	sbiw	r24, 0x01	; 1
    40a0:	f1 f7       	brne	.-4      	; 0x409e <PUSH_BUTTON2+0x8a8>
    40a2:	fe 01       	movw	r30, r28
    40a4:	eb 5a       	subi	r30, 0xAB	; 171
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	91 83       	std	Z+1, r25	; 0x01
    40aa:	80 83       	st	Z, r24
			_delay_ms(500);

			DIO_SetPinValue(PORTA, Pin0, LOW); //2
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	60 e0       	ldi	r22, 0x00	; 0
    40b0:	40 e0       	ldi	r20, 0x00	; 0
    40b2:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, HIGH);
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	61 e0       	ldi	r22, 0x01	; 1
    40ba:	41 e0       	ldi	r20, 0x01	; 1
    40bc:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, LOW);
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	62 e0       	ldi	r22, 0x02	; 2
    40c4:	40 e0       	ldi	r20, 0x00	; 0
    40c6:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    40ca:	fe 01       	movw	r30, r28
    40cc:	ef 5a       	subi	r30, 0xAF	; 175
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	aa ef       	ldi	r26, 0xFA	; 250
    40d6:	b3 e4       	ldi	r27, 0x43	; 67
    40d8:	80 83       	st	Z, r24
    40da:	91 83       	std	Z+1, r25	; 0x01
    40dc:	a2 83       	std	Z+2, r26	; 0x02
    40de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e0:	8e 01       	movw	r16, r28
    40e2:	03 5b       	subi	r16, 0xB3	; 179
    40e4:	1f 4f       	sbci	r17, 0xFF	; 255
    40e6:	fe 01       	movw	r30, r28
    40e8:	ef 5a       	subi	r30, 0xAF	; 175
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	60 81       	ld	r22, Z
    40ee:	71 81       	ldd	r23, Z+1	; 0x01
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	93 81       	ldd	r25, Z+3	; 0x03
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	4a e7       	ldi	r20, 0x7A	; 122
    40fa:	55 e4       	ldi	r21, 0x45	; 69
    40fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	f8 01       	movw	r30, r16
    4106:	80 83       	st	Z, r24
    4108:	91 83       	std	Z+1, r25	; 0x01
    410a:	a2 83       	std	Z+2, r26	; 0x02
    410c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    410e:	fe 01       	movw	r30, r28
    4110:	e3 5b       	subi	r30, 0xB3	; 179
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	60 81       	ld	r22, Z
    4116:	71 81       	ldd	r23, Z+1	; 0x01
    4118:	82 81       	ldd	r24, Z+2	; 0x02
    411a:	93 81       	ldd	r25, Z+3	; 0x03
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	40 e8       	ldi	r20, 0x80	; 128
    4122:	5f e3       	ldi	r21, 0x3F	; 63
    4124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4128:	88 23       	and	r24, r24
    412a:	44 f4       	brge	.+16     	; 0x413c <PUSH_BUTTON2+0x946>
		__ticks = 1;
    412c:	fe 01       	movw	r30, r28
    412e:	e5 5b       	subi	r30, 0xB5	; 181
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	91 83       	std	Z+1, r25	; 0x01
    4138:	80 83       	st	Z, r24
    413a:	64 c0       	rjmp	.+200    	; 0x4204 <PUSH_BUTTON2+0xa0e>
	else if (__tmp > 65535)
    413c:	fe 01       	movw	r30, r28
    413e:	e3 5b       	subi	r30, 0xB3	; 179
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	3f ef       	ldi	r19, 0xFF	; 255
    414e:	4f e7       	ldi	r20, 0x7F	; 127
    4150:	57 e4       	ldi	r21, 0x47	; 71
    4152:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4156:	18 16       	cp	r1, r24
    4158:	0c f0       	brlt	.+2      	; 0x415c <PUSH_BUTTON2+0x966>
    415a:	43 c0       	rjmp	.+134    	; 0x41e2 <PUSH_BUTTON2+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    415c:	fe 01       	movw	r30, r28
    415e:	ef 5a       	subi	r30, 0xAF	; 175
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	60 81       	ld	r22, Z
    4164:	71 81       	ldd	r23, Z+1	; 0x01
    4166:	82 81       	ldd	r24, Z+2	; 0x02
    4168:	93 81       	ldd	r25, Z+3	; 0x03
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	40 e2       	ldi	r20, 0x20	; 32
    4170:	51 e4       	ldi	r21, 0x41	; 65
    4172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	8e 01       	movw	r16, r28
    417c:	05 5b       	subi	r16, 0xB5	; 181
    417e:	1f 4f       	sbci	r17, 0xFF	; 255
    4180:	bc 01       	movw	r22, r24
    4182:	cd 01       	movw	r24, r26
    4184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	f8 01       	movw	r30, r16
    418e:	91 83       	std	Z+1, r25	; 0x01
    4190:	80 83       	st	Z, r24
    4192:	1f c0       	rjmp	.+62     	; 0x41d2 <PUSH_BUTTON2+0x9dc>
    4194:	fe 01       	movw	r30, r28
    4196:	e7 5b       	subi	r30, 0xB7	; 183
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	80 e9       	ldi	r24, 0x90	; 144
    419c:	91 e0       	ldi	r25, 0x01	; 1
    419e:	91 83       	std	Z+1, r25	; 0x01
    41a0:	80 83       	st	Z, r24
    41a2:	fe 01       	movw	r30, r28
    41a4:	e7 5b       	subi	r30, 0xB7	; 183
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	80 81       	ld	r24, Z
    41aa:	91 81       	ldd	r25, Z+1	; 0x01
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	f1 f7       	brne	.-4      	; 0x41ac <PUSH_BUTTON2+0x9b6>
    41b0:	fe 01       	movw	r30, r28
    41b2:	e7 5b       	subi	r30, 0xB7	; 183
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	91 83       	std	Z+1, r25	; 0x01
    41b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ba:	de 01       	movw	r26, r28
    41bc:	a5 5b       	subi	r26, 0xB5	; 181
    41be:	bf 4f       	sbci	r27, 0xFF	; 255
    41c0:	fe 01       	movw	r30, r28
    41c2:	e5 5b       	subi	r30, 0xB5	; 181
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	80 81       	ld	r24, Z
    41c8:	91 81       	ldd	r25, Z+1	; 0x01
    41ca:	01 97       	sbiw	r24, 0x01	; 1
    41cc:	11 96       	adiw	r26, 0x01	; 1
    41ce:	9c 93       	st	X, r25
    41d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d2:	fe 01       	movw	r30, r28
    41d4:	e5 5b       	subi	r30, 0xB5	; 181
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	80 81       	ld	r24, Z
    41da:	91 81       	ldd	r25, Z+1	; 0x01
    41dc:	00 97       	sbiw	r24, 0x00	; 0
    41de:	d1 f6       	brne	.-76     	; 0x4194 <PUSH_BUTTON2+0x99e>
    41e0:	27 c0       	rjmp	.+78     	; 0x4230 <PUSH_BUTTON2+0xa3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e2:	8e 01       	movw	r16, r28
    41e4:	05 5b       	subi	r16, 0xB5	; 181
    41e6:	1f 4f       	sbci	r17, 0xFF	; 255
    41e8:	fe 01       	movw	r30, r28
    41ea:	e3 5b       	subi	r30, 0xB3	; 179
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	60 81       	ld	r22, Z
    41f0:	71 81       	ldd	r23, Z+1	; 0x01
    41f2:	82 81       	ldd	r24, Z+2	; 0x02
    41f4:	93 81       	ldd	r25, Z+3	; 0x03
    41f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	f8 01       	movw	r30, r16
    4200:	91 83       	std	Z+1, r25	; 0x01
    4202:	80 83       	st	Z, r24
    4204:	de 01       	movw	r26, r28
    4206:	a9 5b       	subi	r26, 0xB9	; 185
    4208:	bf 4f       	sbci	r27, 0xFF	; 255
    420a:	fe 01       	movw	r30, r28
    420c:	e5 5b       	subi	r30, 0xB5	; 181
    420e:	ff 4f       	sbci	r31, 0xFF	; 255
    4210:	80 81       	ld	r24, Z
    4212:	91 81       	ldd	r25, Z+1	; 0x01
    4214:	8d 93       	st	X+, r24
    4216:	9c 93       	st	X, r25
    4218:	fe 01       	movw	r30, r28
    421a:	e9 5b       	subi	r30, 0xB9	; 185
    421c:	ff 4f       	sbci	r31, 0xFF	; 255
    421e:	80 81       	ld	r24, Z
    4220:	91 81       	ldd	r25, Z+1	; 0x01
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	f1 f7       	brne	.-4      	; 0x4222 <PUSH_BUTTON2+0xa2c>
    4226:	fe 01       	movw	r30, r28
    4228:	e9 5b       	subi	r30, 0xB9	; 185
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	91 83       	std	Z+1, r25	; 0x01
    422e:	80 83       	st	Z, r24
			_delay_ms(500);

			DIO_SetPinValue(PORTA, Pin0, HIGH); //3
    4230:	80 e0       	ldi	r24, 0x00	; 0
    4232:	60 e0       	ldi	r22, 0x00	; 0
    4234:	41 e0       	ldi	r20, 0x01	; 1
    4236:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, HIGH);
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	61 e0       	ldi	r22, 0x01	; 1
    423e:	41 e0       	ldi	r20, 0x01	; 1
    4240:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, LOW);
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	62 e0       	ldi	r22, 0x02	; 2
    4248:	40 e0       	ldi	r20, 0x00	; 0
    424a:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    424e:	fe 01       	movw	r30, r28
    4250:	ed 5b       	subi	r30, 0xBD	; 189
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	aa ef       	ldi	r26, 0xFA	; 250
    425a:	b3 e4       	ldi	r27, 0x43	; 67
    425c:	80 83       	st	Z, r24
    425e:	91 83       	std	Z+1, r25	; 0x01
    4260:	a2 83       	std	Z+2, r26	; 0x02
    4262:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4264:	8e 01       	movw	r16, r28
    4266:	01 5c       	subi	r16, 0xC1	; 193
    4268:	1f 4f       	sbci	r17, 0xFF	; 255
    426a:	fe 01       	movw	r30, r28
    426c:	ed 5b       	subi	r30, 0xBD	; 189
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	60 81       	ld	r22, Z
    4272:	71 81       	ldd	r23, Z+1	; 0x01
    4274:	82 81       	ldd	r24, Z+2	; 0x02
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	4a e7       	ldi	r20, 0x7A	; 122
    427e:	55 e4       	ldi	r21, 0x45	; 69
    4280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	f8 01       	movw	r30, r16
    428a:	80 83       	st	Z, r24
    428c:	91 83       	std	Z+1, r25	; 0x01
    428e:	a2 83       	std	Z+2, r26	; 0x02
    4290:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4292:	fe 01       	movw	r30, r28
    4294:	ff 96       	adiw	r30, 0x3f	; 63
    4296:	60 81       	ld	r22, Z
    4298:	71 81       	ldd	r23, Z+1	; 0x01
    429a:	82 81       	ldd	r24, Z+2	; 0x02
    429c:	93 81       	ldd	r25, Z+3	; 0x03
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	40 e8       	ldi	r20, 0x80	; 128
    42a4:	5f e3       	ldi	r21, 0x3F	; 63
    42a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42aa:	88 23       	and	r24, r24
    42ac:	2c f4       	brge	.+10     	; 0x42b8 <PUSH_BUTTON2+0xac2>
		__ticks = 1;
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	9e af       	std	Y+62, r25	; 0x3e
    42b4:	8d af       	std	Y+61, r24	; 0x3d
    42b6:	46 c0       	rjmp	.+140    	; 0x4344 <PUSH_BUTTON2+0xb4e>
	else if (__tmp > 65535)
    42b8:	fe 01       	movw	r30, r28
    42ba:	ff 96       	adiw	r30, 0x3f	; 63
    42bc:	60 81       	ld	r22, Z
    42be:	71 81       	ldd	r23, Z+1	; 0x01
    42c0:	82 81       	ldd	r24, Z+2	; 0x02
    42c2:	93 81       	ldd	r25, Z+3	; 0x03
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	3f ef       	ldi	r19, 0xFF	; 255
    42c8:	4f e7       	ldi	r20, 0x7F	; 127
    42ca:	57 e4       	ldi	r21, 0x47	; 71
    42cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42d0:	18 16       	cp	r1, r24
    42d2:	64 f5       	brge	.+88     	; 0x432c <PUSH_BUTTON2+0xb36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d4:	fe 01       	movw	r30, r28
    42d6:	ed 5b       	subi	r30, 0xBD	; 189
    42d8:	ff 4f       	sbci	r31, 0xFF	; 255
    42da:	60 81       	ld	r22, Z
    42dc:	71 81       	ldd	r23, Z+1	; 0x01
    42de:	82 81       	ldd	r24, Z+2	; 0x02
    42e0:	93 81       	ldd	r25, Z+3	; 0x03
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e2       	ldi	r20, 0x20	; 32
    42e8:	51 e4       	ldi	r21, 0x41	; 65
    42ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	bc 01       	movw	r22, r24
    42f4:	cd 01       	movw	r24, r26
    42f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	9e af       	std	Y+62, r25	; 0x3e
    4300:	8d af       	std	Y+61, r24	; 0x3d
    4302:	0f c0       	rjmp	.+30     	; 0x4322 <PUSH_BUTTON2+0xb2c>
    4304:	80 e9       	ldi	r24, 0x90	; 144
    4306:	91 e0       	ldi	r25, 0x01	; 1
    4308:	9c af       	std	Y+60, r25	; 0x3c
    430a:	8b af       	std	Y+59, r24	; 0x3b
    430c:	8b ad       	ldd	r24, Y+59	; 0x3b
    430e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4310:	01 97       	sbiw	r24, 0x01	; 1
    4312:	f1 f7       	brne	.-4      	; 0x4310 <PUSH_BUTTON2+0xb1a>
    4314:	9c af       	std	Y+60, r25	; 0x3c
    4316:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4318:	8d ad       	ldd	r24, Y+61	; 0x3d
    431a:	9e ad       	ldd	r25, Y+62	; 0x3e
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	9e af       	std	Y+62, r25	; 0x3e
    4320:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4322:	8d ad       	ldd	r24, Y+61	; 0x3d
    4324:	9e ad       	ldd	r25, Y+62	; 0x3e
    4326:	00 97       	sbiw	r24, 0x00	; 0
    4328:	69 f7       	brne	.-38     	; 0x4304 <PUSH_BUTTON2+0xb0e>
    432a:	16 c0       	rjmp	.+44     	; 0x4358 <PUSH_BUTTON2+0xb62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    432c:	fe 01       	movw	r30, r28
    432e:	ff 96       	adiw	r30, 0x3f	; 63
    4330:	60 81       	ld	r22, Z
    4332:	71 81       	ldd	r23, Z+1	; 0x01
    4334:	82 81       	ldd	r24, Z+2	; 0x02
    4336:	93 81       	ldd	r25, Z+3	; 0x03
    4338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	9e af       	std	Y+62, r25	; 0x3e
    4342:	8d af       	std	Y+61, r24	; 0x3d
    4344:	8d ad       	ldd	r24, Y+61	; 0x3d
    4346:	9e ad       	ldd	r25, Y+62	; 0x3e
    4348:	9a af       	std	Y+58, r25	; 0x3a
    434a:	89 af       	std	Y+57, r24	; 0x39
    434c:	89 ad       	ldd	r24, Y+57	; 0x39
    434e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	f1 f7       	brne	.-4      	; 0x4350 <PUSH_BUTTON2+0xb5a>
    4354:	9a af       	std	Y+58, r25	; 0x3a
    4356:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);

			DIO_SetPinValue(PORTA, Pin0, LOW); //4
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	60 e0       	ldi	r22, 0x00	; 0
    435c:	40 e0       	ldi	r20, 0x00	; 0
    435e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, LOW);
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	61 e0       	ldi	r22, 0x01	; 1
    4366:	40 e0       	ldi	r20, 0x00	; 0
    4368:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, HIGH);
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	62 e0       	ldi	r22, 0x02	; 2
    4370:	41 e0       	ldi	r20, 0x01	; 1
    4372:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    4376:	80 e0       	ldi	r24, 0x00	; 0
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	aa ef       	ldi	r26, 0xFA	; 250
    437c:	b3 e4       	ldi	r27, 0x43	; 67
    437e:	8d ab       	std	Y+53, r24	; 0x35
    4380:	9e ab       	std	Y+54, r25	; 0x36
    4382:	af ab       	std	Y+55, r26	; 0x37
    4384:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4386:	6d a9       	ldd	r22, Y+53	; 0x35
    4388:	7e a9       	ldd	r23, Y+54	; 0x36
    438a:	8f a9       	ldd	r24, Y+55	; 0x37
    438c:	98 ad       	ldd	r25, Y+56	; 0x38
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	4a e7       	ldi	r20, 0x7A	; 122
    4394:	55 e4       	ldi	r21, 0x45	; 69
    4396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	89 ab       	std	Y+49, r24	; 0x31
    43a0:	9a ab       	std	Y+50, r25	; 0x32
    43a2:	ab ab       	std	Y+51, r26	; 0x33
    43a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    43a6:	69 a9       	ldd	r22, Y+49	; 0x31
    43a8:	7a a9       	ldd	r23, Y+50	; 0x32
    43aa:	8b a9       	ldd	r24, Y+51	; 0x33
    43ac:	9c a9       	ldd	r25, Y+52	; 0x34
    43ae:	20 e0       	ldi	r18, 0x00	; 0
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	40 e8       	ldi	r20, 0x80	; 128
    43b4:	5f e3       	ldi	r21, 0x3F	; 63
    43b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43ba:	88 23       	and	r24, r24
    43bc:	2c f4       	brge	.+10     	; 0x43c8 <PUSH_BUTTON2+0xbd2>
		__ticks = 1;
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	98 ab       	std	Y+48, r25	; 0x30
    43c4:	8f a7       	std	Y+47, r24	; 0x2f
    43c6:	3f c0       	rjmp	.+126    	; 0x4446 <PUSH_BUTTON2+0xc50>
	else if (__tmp > 65535)
    43c8:	69 a9       	ldd	r22, Y+49	; 0x31
    43ca:	7a a9       	ldd	r23, Y+50	; 0x32
    43cc:	8b a9       	ldd	r24, Y+51	; 0x33
    43ce:	9c a9       	ldd	r25, Y+52	; 0x34
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	3f ef       	ldi	r19, 0xFF	; 255
    43d4:	4f e7       	ldi	r20, 0x7F	; 127
    43d6:	57 e4       	ldi	r21, 0x47	; 71
    43d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43dc:	18 16       	cp	r1, r24
    43de:	4c f5       	brge	.+82     	; 0x4432 <PUSH_BUTTON2+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e0:	6d a9       	ldd	r22, Y+53	; 0x35
    43e2:	7e a9       	ldd	r23, Y+54	; 0x36
    43e4:	8f a9       	ldd	r24, Y+55	; 0x37
    43e6:	98 ad       	ldd	r25, Y+56	; 0x38
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	40 e2       	ldi	r20, 0x20	; 32
    43ee:	51 e4       	ldi	r21, 0x41	; 65
    43f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	bc 01       	movw	r22, r24
    43fa:	cd 01       	movw	r24, r26
    43fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	98 ab       	std	Y+48, r25	; 0x30
    4406:	8f a7       	std	Y+47, r24	; 0x2f
    4408:	0f c0       	rjmp	.+30     	; 0x4428 <PUSH_BUTTON2+0xc32>
    440a:	80 e9       	ldi	r24, 0x90	; 144
    440c:	91 e0       	ldi	r25, 0x01	; 1
    440e:	9e a7       	std	Y+46, r25	; 0x2e
    4410:	8d a7       	std	Y+45, r24	; 0x2d
    4412:	8d a5       	ldd	r24, Y+45	; 0x2d
    4414:	9e a5       	ldd	r25, Y+46	; 0x2e
    4416:	01 97       	sbiw	r24, 0x01	; 1
    4418:	f1 f7       	brne	.-4      	; 0x4416 <PUSH_BUTTON2+0xc20>
    441a:	9e a7       	std	Y+46, r25	; 0x2e
    441c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    441e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4420:	98 a9       	ldd	r25, Y+48	; 0x30
    4422:	01 97       	sbiw	r24, 0x01	; 1
    4424:	98 ab       	std	Y+48, r25	; 0x30
    4426:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4428:	8f a5       	ldd	r24, Y+47	; 0x2f
    442a:	98 a9       	ldd	r25, Y+48	; 0x30
    442c:	00 97       	sbiw	r24, 0x00	; 0
    442e:	69 f7       	brne	.-38     	; 0x440a <PUSH_BUTTON2+0xc14>
    4430:	14 c0       	rjmp	.+40     	; 0x445a <PUSH_BUTTON2+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4432:	69 a9       	ldd	r22, Y+49	; 0x31
    4434:	7a a9       	ldd	r23, Y+50	; 0x32
    4436:	8b a9       	ldd	r24, Y+51	; 0x33
    4438:	9c a9       	ldd	r25, Y+52	; 0x34
    443a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	98 ab       	std	Y+48, r25	; 0x30
    4444:	8f a7       	std	Y+47, r24	; 0x2f
    4446:	8f a5       	ldd	r24, Y+47	; 0x2f
    4448:	98 a9       	ldd	r25, Y+48	; 0x30
    444a:	9c a7       	std	Y+44, r25	; 0x2c
    444c:	8b a7       	std	Y+43, r24	; 0x2b
    444e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4450:	9c a5       	ldd	r25, Y+44	; 0x2c
    4452:	01 97       	sbiw	r24, 0x01	; 1
    4454:	f1 f7       	brne	.-4      	; 0x4452 <PUSH_BUTTON2+0xc5c>
    4456:	9c a7       	std	Y+44, r25	; 0x2c
    4458:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);

			DIO_SetPinValue(PORTA, Pin0, HIGH); //5
    445a:	80 e0       	ldi	r24, 0x00	; 0
    445c:	60 e0       	ldi	r22, 0x00	; 0
    445e:	41 e0       	ldi	r20, 0x01	; 1
    4460:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, LOW);
    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	61 e0       	ldi	r22, 0x01	; 1
    4468:	40 e0       	ldi	r20, 0x00	; 0
    446a:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, HIGH);
    446e:	80 e0       	ldi	r24, 0x00	; 0
    4470:	62 e0       	ldi	r22, 0x02	; 2
    4472:	41 e0       	ldi	r20, 0x01	; 1
    4474:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    4478:	80 e0       	ldi	r24, 0x00	; 0
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	aa ef       	ldi	r26, 0xFA	; 250
    447e:	b3 e4       	ldi	r27, 0x43	; 67
    4480:	8f a3       	std	Y+39, r24	; 0x27
    4482:	98 a7       	std	Y+40, r25	; 0x28
    4484:	a9 a7       	std	Y+41, r26	; 0x29
    4486:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4488:	6f a1       	ldd	r22, Y+39	; 0x27
    448a:	78 a5       	ldd	r23, Y+40	; 0x28
    448c:	89 a5       	ldd	r24, Y+41	; 0x29
    448e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	4a e7       	ldi	r20, 0x7A	; 122
    4496:	55 e4       	ldi	r21, 0x45	; 69
    4498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	8b a3       	std	Y+35, r24	; 0x23
    44a2:	9c a3       	std	Y+36, r25	; 0x24
    44a4:	ad a3       	std	Y+37, r26	; 0x25
    44a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44a8:	6b a1       	ldd	r22, Y+35	; 0x23
    44aa:	7c a1       	ldd	r23, Y+36	; 0x24
    44ac:	8d a1       	ldd	r24, Y+37	; 0x25
    44ae:	9e a1       	ldd	r25, Y+38	; 0x26
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	40 e8       	ldi	r20, 0x80	; 128
    44b6:	5f e3       	ldi	r21, 0x3F	; 63
    44b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44bc:	88 23       	and	r24, r24
    44be:	2c f4       	brge	.+10     	; 0x44ca <PUSH_BUTTON2+0xcd4>
		__ticks = 1;
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	9a a3       	std	Y+34, r25	; 0x22
    44c6:	89 a3       	std	Y+33, r24	; 0x21
    44c8:	3f c0       	rjmp	.+126    	; 0x4548 <PUSH_BUTTON2+0xd52>
	else if (__tmp > 65535)
    44ca:	6b a1       	ldd	r22, Y+35	; 0x23
    44cc:	7c a1       	ldd	r23, Y+36	; 0x24
    44ce:	8d a1       	ldd	r24, Y+37	; 0x25
    44d0:	9e a1       	ldd	r25, Y+38	; 0x26
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	3f ef       	ldi	r19, 0xFF	; 255
    44d6:	4f e7       	ldi	r20, 0x7F	; 127
    44d8:	57 e4       	ldi	r21, 0x47	; 71
    44da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44de:	18 16       	cp	r1, r24
    44e0:	4c f5       	brge	.+82     	; 0x4534 <PUSH_BUTTON2+0xd3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e2:	6f a1       	ldd	r22, Y+39	; 0x27
    44e4:	78 a5       	ldd	r23, Y+40	; 0x28
    44e6:	89 a5       	ldd	r24, Y+41	; 0x29
    44e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	40 e2       	ldi	r20, 0x20	; 32
    44f0:	51 e4       	ldi	r21, 0x41	; 65
    44f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	bc 01       	movw	r22, r24
    44fc:	cd 01       	movw	r24, r26
    44fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	9a a3       	std	Y+34, r25	; 0x22
    4508:	89 a3       	std	Y+33, r24	; 0x21
    450a:	0f c0       	rjmp	.+30     	; 0x452a <PUSH_BUTTON2+0xd34>
    450c:	80 e9       	ldi	r24, 0x90	; 144
    450e:	91 e0       	ldi	r25, 0x01	; 1
    4510:	98 a3       	std	Y+32, r25	; 0x20
    4512:	8f 8f       	std	Y+31, r24	; 0x1f
    4514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4516:	98 a1       	ldd	r25, Y+32	; 0x20
    4518:	01 97       	sbiw	r24, 0x01	; 1
    451a:	f1 f7       	brne	.-4      	; 0x4518 <PUSH_BUTTON2+0xd22>
    451c:	98 a3       	std	Y+32, r25	; 0x20
    451e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4520:	89 a1       	ldd	r24, Y+33	; 0x21
    4522:	9a a1       	ldd	r25, Y+34	; 0x22
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	9a a3       	std	Y+34, r25	; 0x22
    4528:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    452a:	89 a1       	ldd	r24, Y+33	; 0x21
    452c:	9a a1       	ldd	r25, Y+34	; 0x22
    452e:	00 97       	sbiw	r24, 0x00	; 0
    4530:	69 f7       	brne	.-38     	; 0x450c <PUSH_BUTTON2+0xd16>
    4532:	14 c0       	rjmp	.+40     	; 0x455c <PUSH_BUTTON2+0xd66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4534:	6b a1       	ldd	r22, Y+35	; 0x23
    4536:	7c a1       	ldd	r23, Y+36	; 0x24
    4538:	8d a1       	ldd	r24, Y+37	; 0x25
    453a:	9e a1       	ldd	r25, Y+38	; 0x26
    453c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4540:	dc 01       	movw	r26, r24
    4542:	cb 01       	movw	r24, r22
    4544:	9a a3       	std	Y+34, r25	; 0x22
    4546:	89 a3       	std	Y+33, r24	; 0x21
    4548:	89 a1       	ldd	r24, Y+33	; 0x21
    454a:	9a a1       	ldd	r25, Y+34	; 0x22
    454c:	9e 8f       	std	Y+30, r25	; 0x1e
    454e:	8d 8f       	std	Y+29, r24	; 0x1d
    4550:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4552:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4554:	01 97       	sbiw	r24, 0x01	; 1
    4556:	f1 f7       	brne	.-4      	; 0x4554 <PUSH_BUTTON2+0xd5e>
    4558:	9e 8f       	std	Y+30, r25	; 0x1e
    455a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);

			DIO_SetPinValue(PORTA, Pin0, LOW); //6
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	60 e0       	ldi	r22, 0x00	; 0
    4560:	40 e0       	ldi	r20, 0x00	; 0
    4562:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, HIGH);
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	61 e0       	ldi	r22, 0x01	; 1
    456a:	41 e0       	ldi	r20, 0x01	; 1
    456c:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, HIGH);
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	62 e0       	ldi	r22, 0x02	; 2
    4574:	41 e0       	ldi	r20, 0x01	; 1
    4576:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	aa ef       	ldi	r26, 0xFA	; 250
    4580:	b3 e4       	ldi	r27, 0x43	; 67
    4582:	89 8f       	std	Y+25, r24	; 0x19
    4584:	9a 8f       	std	Y+26, r25	; 0x1a
    4586:	ab 8f       	std	Y+27, r26	; 0x1b
    4588:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    458a:	69 8d       	ldd	r22, Y+25	; 0x19
    458c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    458e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	4a e7       	ldi	r20, 0x7A	; 122
    4598:	55 e4       	ldi	r21, 0x45	; 69
    459a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	8d 8b       	std	Y+21, r24	; 0x15
    45a4:	9e 8b       	std	Y+22, r25	; 0x16
    45a6:	af 8b       	std	Y+23, r26	; 0x17
    45a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45aa:	6d 89       	ldd	r22, Y+21	; 0x15
    45ac:	7e 89       	ldd	r23, Y+22	; 0x16
    45ae:	8f 89       	ldd	r24, Y+23	; 0x17
    45b0:	98 8d       	ldd	r25, Y+24	; 0x18
    45b2:	20 e0       	ldi	r18, 0x00	; 0
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	40 e8       	ldi	r20, 0x80	; 128
    45b8:	5f e3       	ldi	r21, 0x3F	; 63
    45ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45be:	88 23       	and	r24, r24
    45c0:	2c f4       	brge	.+10     	; 0x45cc <PUSH_BUTTON2+0xdd6>
		__ticks = 1;
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	9c 8b       	std	Y+20, r25	; 0x14
    45c8:	8b 8b       	std	Y+19, r24	; 0x13
    45ca:	3f c0       	rjmp	.+126    	; 0x464a <PUSH_BUTTON2+0xe54>
	else if (__tmp > 65535)
    45cc:	6d 89       	ldd	r22, Y+21	; 0x15
    45ce:	7e 89       	ldd	r23, Y+22	; 0x16
    45d0:	8f 89       	ldd	r24, Y+23	; 0x17
    45d2:	98 8d       	ldd	r25, Y+24	; 0x18
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	3f ef       	ldi	r19, 0xFF	; 255
    45d8:	4f e7       	ldi	r20, 0x7F	; 127
    45da:	57 e4       	ldi	r21, 0x47	; 71
    45dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45e0:	18 16       	cp	r1, r24
    45e2:	4c f5       	brge	.+82     	; 0x4636 <PUSH_BUTTON2+0xe40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e4:	69 8d       	ldd	r22, Y+25	; 0x19
    45e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 e2       	ldi	r20, 0x20	; 32
    45f2:	51 e4       	ldi	r21, 0x41	; 65
    45f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f8:	dc 01       	movw	r26, r24
    45fa:	cb 01       	movw	r24, r22
    45fc:	bc 01       	movw	r22, r24
    45fe:	cd 01       	movw	r24, r26
    4600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	9c 8b       	std	Y+20, r25	; 0x14
    460a:	8b 8b       	std	Y+19, r24	; 0x13
    460c:	0f c0       	rjmp	.+30     	; 0x462c <PUSH_BUTTON2+0xe36>
    460e:	80 e9       	ldi	r24, 0x90	; 144
    4610:	91 e0       	ldi	r25, 0x01	; 1
    4612:	9a 8b       	std	Y+18, r25	; 0x12
    4614:	89 8b       	std	Y+17, r24	; 0x11
    4616:	89 89       	ldd	r24, Y+17	; 0x11
    4618:	9a 89       	ldd	r25, Y+18	; 0x12
    461a:	01 97       	sbiw	r24, 0x01	; 1
    461c:	f1 f7       	brne	.-4      	; 0x461a <PUSH_BUTTON2+0xe24>
    461e:	9a 8b       	std	Y+18, r25	; 0x12
    4620:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4622:	8b 89       	ldd	r24, Y+19	; 0x13
    4624:	9c 89       	ldd	r25, Y+20	; 0x14
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	9c 8b       	std	Y+20, r25	; 0x14
    462a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    462c:	8b 89       	ldd	r24, Y+19	; 0x13
    462e:	9c 89       	ldd	r25, Y+20	; 0x14
    4630:	00 97       	sbiw	r24, 0x00	; 0
    4632:	69 f7       	brne	.-38     	; 0x460e <PUSH_BUTTON2+0xe18>
    4634:	14 c0       	rjmp	.+40     	; 0x465e <PUSH_BUTTON2+0xe68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4636:	6d 89       	ldd	r22, Y+21	; 0x15
    4638:	7e 89       	ldd	r23, Y+22	; 0x16
    463a:	8f 89       	ldd	r24, Y+23	; 0x17
    463c:	98 8d       	ldd	r25, Y+24	; 0x18
    463e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	9c 8b       	std	Y+20, r25	; 0x14
    4648:	8b 8b       	std	Y+19, r24	; 0x13
    464a:	8b 89       	ldd	r24, Y+19	; 0x13
    464c:	9c 89       	ldd	r25, Y+20	; 0x14
    464e:	98 8b       	std	Y+16, r25	; 0x10
    4650:	8f 87       	std	Y+15, r24	; 0x0f
    4652:	8f 85       	ldd	r24, Y+15	; 0x0f
    4654:	98 89       	ldd	r25, Y+16	; 0x10
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	f1 f7       	brne	.-4      	; 0x4656 <PUSH_BUTTON2+0xe60>
    465a:	98 8b       	std	Y+16, r25	; 0x10
    465c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);

			DIO_SetPinValue(PORTA, Pin0, HIGH); //7
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	60 e0       	ldi	r22, 0x00	; 0
    4662:	41 e0       	ldi	r20, 0x01	; 1
    4664:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, HIGH);
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	61 e0       	ldi	r22, 0x01	; 1
    466c:	41 e0       	ldi	r20, 0x01	; 1
    466e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, HIGH);
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	62 e0       	ldi	r22, 0x02	; 2
    4676:	41 e0       	ldi	r20, 0x01	; 1
    4678:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	aa ef       	ldi	r26, 0xFA	; 250
    4682:	b3 e4       	ldi	r27, 0x43	; 67
    4684:	8b 87       	std	Y+11, r24	; 0x0b
    4686:	9c 87       	std	Y+12, r25	; 0x0c
    4688:	ad 87       	std	Y+13, r26	; 0x0d
    468a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468c:	6b 85       	ldd	r22, Y+11	; 0x0b
    468e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4690:	8d 85       	ldd	r24, Y+13	; 0x0d
    4692:	9e 85       	ldd	r25, Y+14	; 0x0e
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	4a e7       	ldi	r20, 0x7A	; 122
    469a:	55 e4       	ldi	r21, 0x45	; 69
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	8f 83       	std	Y+7, r24	; 0x07
    46a6:	98 87       	std	Y+8, r25	; 0x08
    46a8:	a9 87       	std	Y+9, r26	; 0x09
    46aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46ac:	6f 81       	ldd	r22, Y+7	; 0x07
    46ae:	78 85       	ldd	r23, Y+8	; 0x08
    46b0:	89 85       	ldd	r24, Y+9	; 0x09
    46b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b4:	20 e0       	ldi	r18, 0x00	; 0
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	40 e8       	ldi	r20, 0x80	; 128
    46ba:	5f e3       	ldi	r21, 0x3F	; 63
    46bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46c0:	88 23       	and	r24, r24
    46c2:	2c f4       	brge	.+10     	; 0x46ce <PUSH_BUTTON2+0xed8>
		__ticks = 1;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	9e 83       	std	Y+6, r25	; 0x06
    46ca:	8d 83       	std	Y+5, r24	; 0x05
    46cc:	3f c0       	rjmp	.+126    	; 0x474c <PUSH_BUTTON2+0xf56>
	else if (__tmp > 65535)
    46ce:	6f 81       	ldd	r22, Y+7	; 0x07
    46d0:	78 85       	ldd	r23, Y+8	; 0x08
    46d2:	89 85       	ldd	r24, Y+9	; 0x09
    46d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	3f ef       	ldi	r19, 0xFF	; 255
    46da:	4f e7       	ldi	r20, 0x7F	; 127
    46dc:	57 e4       	ldi	r21, 0x47	; 71
    46de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46e2:	18 16       	cp	r1, r24
    46e4:	4c f5       	brge	.+82     	; 0x4738 <PUSH_BUTTON2+0xf42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e2       	ldi	r20, 0x20	; 32
    46f4:	51 e4       	ldi	r21, 0x41	; 65
    46f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	bc 01       	movw	r22, r24
    4700:	cd 01       	movw	r24, r26
    4702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	9e 83       	std	Y+6, r25	; 0x06
    470c:	8d 83       	std	Y+5, r24	; 0x05
    470e:	0f c0       	rjmp	.+30     	; 0x472e <PUSH_BUTTON2+0xf38>
    4710:	80 e9       	ldi	r24, 0x90	; 144
    4712:	91 e0       	ldi	r25, 0x01	; 1
    4714:	9c 83       	std	Y+4, r25	; 0x04
    4716:	8b 83       	std	Y+3, r24	; 0x03
    4718:	8b 81       	ldd	r24, Y+3	; 0x03
    471a:	9c 81       	ldd	r25, Y+4	; 0x04
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <PUSH_BUTTON2+0xf26>
    4720:	9c 83       	std	Y+4, r25	; 0x04
    4722:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4724:	8d 81       	ldd	r24, Y+5	; 0x05
    4726:	9e 81       	ldd	r25, Y+6	; 0x06
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	9e 83       	std	Y+6, r25	; 0x06
    472c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    472e:	8d 81       	ldd	r24, Y+5	; 0x05
    4730:	9e 81       	ldd	r25, Y+6	; 0x06
    4732:	00 97       	sbiw	r24, 0x00	; 0
    4734:	69 f7       	brne	.-38     	; 0x4710 <PUSH_BUTTON2+0xf1a>
    4736:	8a c8       	rjmp	.-3820   	; 0x384c <PUSH_BUTTON2+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4738:	6f 81       	ldd	r22, Y+7	; 0x07
    473a:	78 85       	ldd	r23, Y+8	; 0x08
    473c:	89 85       	ldd	r24, Y+9	; 0x09
    473e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	9e 83       	std	Y+6, r25	; 0x06
    474a:	8d 83       	std	Y+5, r24	; 0x05
    474c:	8d 81       	ldd	r24, Y+5	; 0x05
    474e:	9e 81       	ldd	r25, Y+6	; 0x06
    4750:	9a 83       	std	Y+2, r25	; 0x02
    4752:	89 83       	std	Y+1, r24	; 0x01
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	01 97       	sbiw	r24, 0x01	; 1
    475a:	f1 f7       	brne	.-4      	; 0x4758 <PUSH_BUTTON2+0xf62>
    475c:	9a 83       	std	Y+2, r25	; 0x02
    475e:	89 83       	std	Y+1, r24	; 0x01
    4760:	75 c8       	rjmp	.-3862   	; 0x384c <PUSH_BUTTON2+0x56>
			_delay_ms(500);
		}
		else
		{
			DIO_SetPinValue(PORTA, Pin0, LOW);
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	40 e0       	ldi	r20, 0x00	; 0
    4768:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin1, LOW);
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	61 e0       	ldi	r22, 0x01	; 1
    4770:	40 e0       	ldi	r20, 0x00	; 0
    4772:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
			DIO_SetPinValue(PORTA, Pin2, LOW);
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	62 e0       	ldi	r22, 0x02	; 2
    477a:	40 e0       	ldi	r20, 0x00	; 0
    477c:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>
    4780:	65 c8       	rjmp	.-3894   	; 0x384c <PUSH_BUTTON2+0x56>

00004782 <SEV_SEG>:
#include "../LIB/STD_types.h"
#include "../HAL/Seven_Segmant/Seven_Segmant.h"


void SEV_SEG(unsigned char number)
{
    4782:	df 93       	push	r29
    4784:	cf 93       	push	r28
    4786:	cd b7       	in	r28, 0x3d	; 61
    4788:	de b7       	in	r29, 0x3e	; 62
    478a:	a0 97       	sbiw	r28, 0x20	; 32
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	88 a3       	std	Y+32, r24	; 0x20
	Seven_Segmant_Initialization();
    4798:	0e 94 3e 0c 	call	0x187c	; 0x187c <Seven_Segmant_Initialization>
	if(number < 100)
    479c:	88 a1       	ldd	r24, Y+32	; 0x20
    479e:	84 36       	cpi	r24, 0x64	; 100
    47a0:	08 f0       	brcs	.+2      	; 0x47a4 <SEV_SEG+0x22>
    47a2:	0a c1       	rjmp	.+532    	; 0x49b8 <SEV_SEG+0x236>
	{
		for(uint8 k = 0 ; k < 10 ; k++)
    47a4:	1f 8e       	std	Y+31, r1	; 0x1f
    47a6:	04 c1       	rjmp	.+520    	; 0x49b0 <SEV_SEG+0x22e>
		{
			uint8 right = number%10; //e2
    47a8:	88 a1       	ldd	r24, Y+32	; 0x20
    47aa:	9a e0       	ldi	r25, 0x0A	; 10
    47ac:	69 2f       	mov	r22, r25
    47ae:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__udivmodqi4>
    47b2:	89 2f       	mov	r24, r25
    47b4:	8e 8f       	std	Y+30, r24	; 0x1e
			uint8 left = number/10; //e1
    47b6:	88 a1       	ldd	r24, Y+32	; 0x20
    47b8:	9a e0       	ldi	r25, 0x0A	; 10
    47ba:	69 2f       	mov	r22, r25
    47bc:	0e 94 28 25 	call	0x4a50	; 0x4a50 <__udivmodqi4>
    47c0:	8d 8f       	std	Y+29, r24	; 0x1d
			Seven_Segmant_Disable1();
    47c2:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Seven_Segmant_Disable1>
			Seven_Segmant_Disable2();
    47c6:	0e 94 87 0c 	call	0x190e	; 0x190e <Seven_Segmant_Disable2>
			Seven_Segmant_Write_Number(left);
    47ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47cc:	0e 94 93 0c 	call	0x1926	; 0x1926 <Seven_Segmant_Write_Number>
			Seven_Segmant_Enable1();
    47d0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <Seven_Segmant_Enable1>
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	a0 e2       	ldi	r26, 0x20	; 32
    47da:	b1 e4       	ldi	r27, 0x41	; 65
    47dc:	89 8f       	std	Y+25, r24	; 0x19
    47de:	9a 8f       	std	Y+26, r25	; 0x1a
    47e0:	ab 8f       	std	Y+27, r26	; 0x1b
    47e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e4:	69 8d       	ldd	r22, Y+25	; 0x19
    47e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	4a e7       	ldi	r20, 0x7A	; 122
    47f2:	55 e4       	ldi	r21, 0x45	; 69
    47f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	8d 8b       	std	Y+21, r24	; 0x15
    47fe:	9e 8b       	std	Y+22, r25	; 0x16
    4800:	af 8b       	std	Y+23, r26	; 0x17
    4802:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4804:	6d 89       	ldd	r22, Y+21	; 0x15
    4806:	7e 89       	ldd	r23, Y+22	; 0x16
    4808:	8f 89       	ldd	r24, Y+23	; 0x17
    480a:	98 8d       	ldd	r25, Y+24	; 0x18
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	40 e8       	ldi	r20, 0x80	; 128
    4812:	5f e3       	ldi	r21, 0x3F	; 63
    4814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4818:	88 23       	and	r24, r24
    481a:	2c f4       	brge	.+10     	; 0x4826 <SEV_SEG+0xa4>
		__ticks = 1;
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	9c 8b       	std	Y+20, r25	; 0x14
    4822:	8b 8b       	std	Y+19, r24	; 0x13
    4824:	3f c0       	rjmp	.+126    	; 0x48a4 <SEV_SEG+0x122>
	else if (__tmp > 65535)
    4826:	6d 89       	ldd	r22, Y+21	; 0x15
    4828:	7e 89       	ldd	r23, Y+22	; 0x16
    482a:	8f 89       	ldd	r24, Y+23	; 0x17
    482c:	98 8d       	ldd	r25, Y+24	; 0x18
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	3f ef       	ldi	r19, 0xFF	; 255
    4832:	4f e7       	ldi	r20, 0x7F	; 127
    4834:	57 e4       	ldi	r21, 0x47	; 71
    4836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    483a:	18 16       	cp	r1, r24
    483c:	4c f5       	brge	.+82     	; 0x4890 <SEV_SEG+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    483e:	69 8d       	ldd	r22, Y+25	; 0x19
    4840:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4842:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4844:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	40 e2       	ldi	r20, 0x20	; 32
    484c:	51 e4       	ldi	r21, 0x41	; 65
    484e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	bc 01       	movw	r22, r24
    4858:	cd 01       	movw	r24, r26
    485a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	9c 8b       	std	Y+20, r25	; 0x14
    4864:	8b 8b       	std	Y+19, r24	; 0x13
    4866:	0f c0       	rjmp	.+30     	; 0x4886 <SEV_SEG+0x104>
    4868:	80 e9       	ldi	r24, 0x90	; 144
    486a:	91 e0       	ldi	r25, 0x01	; 1
    486c:	9a 8b       	std	Y+18, r25	; 0x12
    486e:	89 8b       	std	Y+17, r24	; 0x11
    4870:	89 89       	ldd	r24, Y+17	; 0x11
    4872:	9a 89       	ldd	r25, Y+18	; 0x12
    4874:	01 97       	sbiw	r24, 0x01	; 1
    4876:	f1 f7       	brne	.-4      	; 0x4874 <SEV_SEG+0xf2>
    4878:	9a 8b       	std	Y+18, r25	; 0x12
    487a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    487c:	8b 89       	ldd	r24, Y+19	; 0x13
    487e:	9c 89       	ldd	r25, Y+20	; 0x14
    4880:	01 97       	sbiw	r24, 0x01	; 1
    4882:	9c 8b       	std	Y+20, r25	; 0x14
    4884:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4886:	8b 89       	ldd	r24, Y+19	; 0x13
    4888:	9c 89       	ldd	r25, Y+20	; 0x14
    488a:	00 97       	sbiw	r24, 0x00	; 0
    488c:	69 f7       	brne	.-38     	; 0x4868 <SEV_SEG+0xe6>
    488e:	14 c0       	rjmp	.+40     	; 0x48b8 <SEV_SEG+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4890:	6d 89       	ldd	r22, Y+21	; 0x15
    4892:	7e 89       	ldd	r23, Y+22	; 0x16
    4894:	8f 89       	ldd	r24, Y+23	; 0x17
    4896:	98 8d       	ldd	r25, Y+24	; 0x18
    4898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489c:	dc 01       	movw	r26, r24
    489e:	cb 01       	movw	r24, r22
    48a0:	9c 8b       	std	Y+20, r25	; 0x14
    48a2:	8b 8b       	std	Y+19, r24	; 0x13
    48a4:	8b 89       	ldd	r24, Y+19	; 0x13
    48a6:	9c 89       	ldd	r25, Y+20	; 0x14
    48a8:	98 8b       	std	Y+16, r25	; 0x10
    48aa:	8f 87       	std	Y+15, r24	; 0x0f
    48ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    48ae:	98 89       	ldd	r25, Y+16	; 0x10
    48b0:	01 97       	sbiw	r24, 0x01	; 1
    48b2:	f1 f7       	brne	.-4      	; 0x48b0 <SEV_SEG+0x12e>
    48b4:	98 8b       	std	Y+16, r25	; 0x10
    48b6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			Seven_Segmant_Disable1();
    48b8:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Seven_Segmant_Disable1>
			Seven_Segmant_Write_Number(right);
    48bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48be:	0e 94 93 0c 	call	0x1926	; 0x1926 <Seven_Segmant_Write_Number>
			Seven_Segmant_Enable2();
    48c2:	0e 94 6f 0c 	call	0x18de	; 0x18de <Seven_Segmant_Enable2>
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	a0 e2       	ldi	r26, 0x20	; 32
    48cc:	b1 e4       	ldi	r27, 0x41	; 65
    48ce:	8b 87       	std	Y+11, r24	; 0x0b
    48d0:	9c 87       	std	Y+12, r25	; 0x0c
    48d2:	ad 87       	std	Y+13, r26	; 0x0d
    48d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    48d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    48da:	8d 85       	ldd	r24, Y+13	; 0x0d
    48dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	4a e7       	ldi	r20, 0x7A	; 122
    48e4:	55 e4       	ldi	r21, 0x45	; 69
    48e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	8f 83       	std	Y+7, r24	; 0x07
    48f0:	98 87       	std	Y+8, r25	; 0x08
    48f2:	a9 87       	std	Y+9, r26	; 0x09
    48f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48f6:	6f 81       	ldd	r22, Y+7	; 0x07
    48f8:	78 85       	ldd	r23, Y+8	; 0x08
    48fa:	89 85       	ldd	r24, Y+9	; 0x09
    48fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	40 e8       	ldi	r20, 0x80	; 128
    4904:	5f e3       	ldi	r21, 0x3F	; 63
    4906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    490a:	88 23       	and	r24, r24
    490c:	2c f4       	brge	.+10     	; 0x4918 <SEV_SEG+0x196>
		__ticks = 1;
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	9e 83       	std	Y+6, r25	; 0x06
    4914:	8d 83       	std	Y+5, r24	; 0x05
    4916:	3f c0       	rjmp	.+126    	; 0x4996 <SEV_SEG+0x214>
	else if (__tmp > 65535)
    4918:	6f 81       	ldd	r22, Y+7	; 0x07
    491a:	78 85       	ldd	r23, Y+8	; 0x08
    491c:	89 85       	ldd	r24, Y+9	; 0x09
    491e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	3f ef       	ldi	r19, 0xFF	; 255
    4924:	4f e7       	ldi	r20, 0x7F	; 127
    4926:	57 e4       	ldi	r21, 0x47	; 71
    4928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    492c:	18 16       	cp	r1, r24
    492e:	4c f5       	brge	.+82     	; 0x4982 <SEV_SEG+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4930:	6b 85       	ldd	r22, Y+11	; 0x0b
    4932:	7c 85       	ldd	r23, Y+12	; 0x0c
    4934:	8d 85       	ldd	r24, Y+13	; 0x0d
    4936:	9e 85       	ldd	r25, Y+14	; 0x0e
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	40 e2       	ldi	r20, 0x20	; 32
    493e:	51 e4       	ldi	r21, 0x41	; 65
    4940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	bc 01       	movw	r22, r24
    494a:	cd 01       	movw	r24, r26
    494c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	9e 83       	std	Y+6, r25	; 0x06
    4956:	8d 83       	std	Y+5, r24	; 0x05
    4958:	0f c0       	rjmp	.+30     	; 0x4978 <SEV_SEG+0x1f6>
    495a:	80 e9       	ldi	r24, 0x90	; 144
    495c:	91 e0       	ldi	r25, 0x01	; 1
    495e:	9c 83       	std	Y+4, r25	; 0x04
    4960:	8b 83       	std	Y+3, r24	; 0x03
    4962:	8b 81       	ldd	r24, Y+3	; 0x03
    4964:	9c 81       	ldd	r25, Y+4	; 0x04
    4966:	01 97       	sbiw	r24, 0x01	; 1
    4968:	f1 f7       	brne	.-4      	; 0x4966 <SEV_SEG+0x1e4>
    496a:	9c 83       	std	Y+4, r25	; 0x04
    496c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    496e:	8d 81       	ldd	r24, Y+5	; 0x05
    4970:	9e 81       	ldd	r25, Y+6	; 0x06
    4972:	01 97       	sbiw	r24, 0x01	; 1
    4974:	9e 83       	std	Y+6, r25	; 0x06
    4976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4978:	8d 81       	ldd	r24, Y+5	; 0x05
    497a:	9e 81       	ldd	r25, Y+6	; 0x06
    497c:	00 97       	sbiw	r24, 0x00	; 0
    497e:	69 f7       	brne	.-38     	; 0x495a <SEV_SEG+0x1d8>
    4980:	14 c0       	rjmp	.+40     	; 0x49aa <SEV_SEG+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4982:	6f 81       	ldd	r22, Y+7	; 0x07
    4984:	78 85       	ldd	r23, Y+8	; 0x08
    4986:	89 85       	ldd	r24, Y+9	; 0x09
    4988:	9a 85       	ldd	r25, Y+10	; 0x0a
    498a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498e:	dc 01       	movw	r26, r24
    4990:	cb 01       	movw	r24, r22
    4992:	9e 83       	std	Y+6, r25	; 0x06
    4994:	8d 83       	std	Y+5, r24	; 0x05
    4996:	8d 81       	ldd	r24, Y+5	; 0x05
    4998:	9e 81       	ldd	r25, Y+6	; 0x06
    499a:	9a 83       	std	Y+2, r25	; 0x02
    499c:	89 83       	std	Y+1, r24	; 0x01
    499e:	89 81       	ldd	r24, Y+1	; 0x01
    49a0:	9a 81       	ldd	r25, Y+2	; 0x02
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	f1 f7       	brne	.-4      	; 0x49a2 <SEV_SEG+0x220>
    49a6:	9a 83       	std	Y+2, r25	; 0x02
    49a8:	89 83       	std	Y+1, r24	; 0x01
void SEV_SEG(unsigned char number)
{
	Seven_Segmant_Initialization();
	if(number < 100)
	{
		for(uint8 k = 0 ; k < 10 ; k++)
    49aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49ac:	8f 5f       	subi	r24, 0xFF	; 255
    49ae:	8f 8f       	std	Y+31, r24	; 0x1f
    49b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49b2:	8a 30       	cpi	r24, 0x0A	; 10
    49b4:	08 f4       	brcc	.+2      	; 0x49b8 <SEV_SEG+0x236>
    49b6:	f8 ce       	rjmp	.-528    	; 0x47a8 <SEV_SEG+0x26>
			Seven_Segmant_Write_Number(right);
			Seven_Segmant_Enable2();
			_delay_ms(10);
		}
	}
}
    49b8:	a0 96       	adiw	r28, 0x20	; 32
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	f8 94       	cli
    49be:	de bf       	out	0x3e, r29	; 62
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	cd bf       	out	0x3d, r28	; 61
    49c4:	cf 91       	pop	r28
    49c6:	df 91       	pop	r29
    49c8:	08 95       	ret

000049ca <TIMER_LAB>:
#include "../MCAL/GIE/GIE.h"

unsigned char num = 0;
void Toggle();
void TIMER_LAB(void)
{
    49ca:	df 93       	push	r29
    49cc:	cf 93       	push	r28
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORTC, Pin0, Output);
    49d2:	82 e0       	ldi	r24, 0x02	; 2
    49d4:	60 e0       	ldi	r22, 0x00	; 0
    49d6:	41 e0       	ldi	r20, 0x01	; 1
    49d8:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTC, Pin0, LOW);
    49dc:	82 e0       	ldi	r24, 0x02	; 2
    49de:	60 e0       	ldi	r22, 0x00	; 0
    49e0:	40 e0       	ldi	r20, 0x00	; 0
    49e2:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_SetPinValue>

	TIM0_Initialization();
    49e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIM0_Initialization>
	TIM0_OverFlowCallBack(Toggle);
    49ea:	8e e0       	ldi	r24, 0x0E	; 14
    49ec:	95 e2       	ldi	r25, 0x25	; 37
    49ee:	0e 94 2e 06 	call	0xc5c	; 0xc5c <TIM0_OverFlowCallBack>

	TIM0_SetTimerValue(6); /*prescaler = 1024 and F = 1Mhz so F = 1Khz Ttimer = 1ms so from 6 to 256 = 250 ms
    49f2:	86 e0       	ldi	r24, 0x06	; 6
    49f4:	0e 94 20 06 	call	0xc40	; 0xc40 <TIM0_SetTimerValue>
	so every 2 overflow will be 0.5 sec */

	TIM0_OverFlowIntEnable();
    49f8:	0e 94 f6 05 	call	0xbec	; 0xbec <TIM0_OverFlowIntEnable>
	GIE_Enable_Global();
    49fc:	0e 94 ac 06 	call	0xd58	; 0xd58 <GIE_Enable_Global>
	while(1)
	{
		if(num == 4) //Toggle every Sec
    4a00:	80 91 91 00 	lds	r24, 0x0091
    4a04:	84 30       	cpi	r24, 0x04	; 4
    4a06:	e1 f7       	brne	.-8      	; 0x4a00 <TIMER_LAB+0x36>
		{
			DIO_ToggleBit(PORTC, Pin0);
    4a08:	82 e0       	ldi	r24, 0x02	; 2
    4a0a:	60 e0       	ldi	r22, 0x00	; 0
    4a0c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_ToggleBit>
			num = 0;
    4a10:	10 92 91 00 	sts	0x0091, r1
			TIM0_SetTimerValue(6);
    4a14:	86 e0       	ldi	r24, 0x06	; 6
    4a16:	0e 94 20 06 	call	0xc40	; 0xc40 <TIM0_SetTimerValue>
    4a1a:	f2 cf       	rjmp	.-28     	; 0x4a00 <TIMER_LAB+0x36>

00004a1c <Toggle>:
		}
	}
}
void Toggle()
{
    4a1c:	df 93       	push	r29
    4a1e:	cf 93       	push	r28
    4a20:	cd b7       	in	r28, 0x3d	; 61
    4a22:	de b7       	in	r29, 0x3e	; 62
	TIM0_SetTimerValue(6);
    4a24:	86 e0       	ldi	r24, 0x06	; 6
    4a26:	0e 94 20 06 	call	0xc40	; 0xc40 <TIM0_SetTimerValue>
	num ++;
    4a2a:	80 91 91 00 	lds	r24, 0x0091
    4a2e:	8f 5f       	subi	r24, 0xFF	; 255
    4a30:	80 93 91 00 	sts	0x0091, r24
}
    4a34:	cf 91       	pop	r28
    4a36:	df 91       	pop	r29
    4a38:	08 95       	ret

00004a3a <main>:
 *      Author: Ahmed
 */


int main(void)
{
    4a3a:	df 93       	push	r29
    4a3c:	cf 93       	push	r28
    4a3e:	cd b7       	in	r28, 0x3d	; 61
    4a40:	de b7       	in	r29, 0x3e	; 62
	Challenge1();
    4a42:	0e 94 ee 13 	call	0x27dc	; 0x27dc <Challenge1>
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
}
    4a4a:	cf 91       	pop	r28
    4a4c:	df 91       	pop	r29
    4a4e:	08 95       	ret

00004a50 <__udivmodqi4>:
    4a50:	99 1b       	sub	r25, r25
    4a52:	79 e0       	ldi	r23, 0x09	; 9
    4a54:	04 c0       	rjmp	.+8      	; 0x4a5e <__udivmodqi4_ep>

00004a56 <__udivmodqi4_loop>:
    4a56:	99 1f       	adc	r25, r25
    4a58:	96 17       	cp	r25, r22
    4a5a:	08 f0       	brcs	.+2      	; 0x4a5e <__udivmodqi4_ep>
    4a5c:	96 1b       	sub	r25, r22

00004a5e <__udivmodqi4_ep>:
    4a5e:	88 1f       	adc	r24, r24
    4a60:	7a 95       	dec	r23
    4a62:	c9 f7       	brne	.-14     	; 0x4a56 <__udivmodqi4_loop>
    4a64:	80 95       	com	r24
    4a66:	08 95       	ret

00004a68 <__prologue_saves__>:
    4a68:	2f 92       	push	r2
    4a6a:	3f 92       	push	r3
    4a6c:	4f 92       	push	r4
    4a6e:	5f 92       	push	r5
    4a70:	6f 92       	push	r6
    4a72:	7f 92       	push	r7
    4a74:	8f 92       	push	r8
    4a76:	9f 92       	push	r9
    4a78:	af 92       	push	r10
    4a7a:	bf 92       	push	r11
    4a7c:	cf 92       	push	r12
    4a7e:	df 92       	push	r13
    4a80:	ef 92       	push	r14
    4a82:	ff 92       	push	r15
    4a84:	0f 93       	push	r16
    4a86:	1f 93       	push	r17
    4a88:	cf 93       	push	r28
    4a8a:	df 93       	push	r29
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	ca 1b       	sub	r28, r26
    4a92:	db 0b       	sbc	r29, r27
    4a94:	0f b6       	in	r0, 0x3f	; 63
    4a96:	f8 94       	cli
    4a98:	de bf       	out	0x3e, r29	; 62
    4a9a:	0f be       	out	0x3f, r0	; 63
    4a9c:	cd bf       	out	0x3d, r28	; 61
    4a9e:	09 94       	ijmp

00004aa0 <__epilogue_restores__>:
    4aa0:	2a 88       	ldd	r2, Y+18	; 0x12
    4aa2:	39 88       	ldd	r3, Y+17	; 0x11
    4aa4:	48 88       	ldd	r4, Y+16	; 0x10
    4aa6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4aa8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4aaa:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aac:	8c 84       	ldd	r8, Y+12	; 0x0c
    4aae:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ab0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ab2:	b9 84       	ldd	r11, Y+9	; 0x09
    4ab4:	c8 84       	ldd	r12, Y+8	; 0x08
    4ab6:	df 80       	ldd	r13, Y+7	; 0x07
    4ab8:	ee 80       	ldd	r14, Y+6	; 0x06
    4aba:	fd 80       	ldd	r15, Y+5	; 0x05
    4abc:	0c 81       	ldd	r16, Y+4	; 0x04
    4abe:	1b 81       	ldd	r17, Y+3	; 0x03
    4ac0:	aa 81       	ldd	r26, Y+2	; 0x02
    4ac2:	b9 81       	ldd	r27, Y+1	; 0x01
    4ac4:	ce 0f       	add	r28, r30
    4ac6:	d1 1d       	adc	r29, r1
    4ac8:	0f b6       	in	r0, 0x3f	; 63
    4aca:	f8 94       	cli
    4acc:	de bf       	out	0x3e, r29	; 62
    4ace:	0f be       	out	0x3f, r0	; 63
    4ad0:	cd bf       	out	0x3d, r28	; 61
    4ad2:	ed 01       	movw	r28, r26
    4ad4:	08 95       	ret

00004ad6 <itoa>:
    4ad6:	fb 01       	movw	r30, r22
    4ad8:	9f 01       	movw	r18, r30
    4ada:	e8 94       	clt
    4adc:	42 30       	cpi	r20, 0x02	; 2
    4ade:	c4 f0       	brlt	.+48     	; 0x4b10 <itoa+0x3a>
    4ae0:	45 32       	cpi	r20, 0x25	; 37
    4ae2:	b4 f4       	brge	.+44     	; 0x4b10 <itoa+0x3a>
    4ae4:	4a 30       	cpi	r20, 0x0A	; 10
    4ae6:	29 f4       	brne	.+10     	; 0x4af2 <itoa+0x1c>
    4ae8:	97 fb       	bst	r25, 7
    4aea:	1e f4       	brtc	.+6      	; 0x4af2 <itoa+0x1c>
    4aec:	90 95       	com	r25
    4aee:	81 95       	neg	r24
    4af0:	9f 4f       	sbci	r25, 0xFF	; 255
    4af2:	64 2f       	mov	r22, r20
    4af4:	77 27       	eor	r23, r23
    4af6:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <__udivmodhi4>
    4afa:	80 5d       	subi	r24, 0xD0	; 208
    4afc:	8a 33       	cpi	r24, 0x3A	; 58
    4afe:	0c f0       	brlt	.+2      	; 0x4b02 <itoa+0x2c>
    4b00:	89 5d       	subi	r24, 0xD9	; 217
    4b02:	81 93       	st	Z+, r24
    4b04:	cb 01       	movw	r24, r22
    4b06:	00 97       	sbiw	r24, 0x00	; 0
    4b08:	a1 f7       	brne	.-24     	; 0x4af2 <itoa+0x1c>
    4b0a:	16 f4       	brtc	.+4      	; 0x4b10 <itoa+0x3a>
    4b0c:	5d e2       	ldi	r21, 0x2D	; 45
    4b0e:	51 93       	st	Z+, r21
    4b10:	10 82       	st	Z, r1
    4b12:	c9 01       	movw	r24, r18
    4b14:	0c 94 8c 25 	jmp	0x4b18	; 0x4b18 <strrev>

00004b18 <strrev>:
    4b18:	dc 01       	movw	r26, r24
    4b1a:	fc 01       	movw	r30, r24
    4b1c:	67 2f       	mov	r22, r23
    4b1e:	71 91       	ld	r23, Z+
    4b20:	77 23       	and	r23, r23
    4b22:	e1 f7       	brne	.-8      	; 0x4b1c <strrev+0x4>
    4b24:	32 97       	sbiw	r30, 0x02	; 2
    4b26:	04 c0       	rjmp	.+8      	; 0x4b30 <strrev+0x18>
    4b28:	7c 91       	ld	r23, X
    4b2a:	6d 93       	st	X+, r22
    4b2c:	70 83       	st	Z, r23
    4b2e:	62 91       	ld	r22, -Z
    4b30:	ae 17       	cp	r26, r30
    4b32:	bf 07       	cpc	r27, r31
    4b34:	c8 f3       	brcs	.-14     	; 0x4b28 <strrev+0x10>
    4b36:	08 95       	ret

00004b38 <__udivmodhi4>:
    4b38:	aa 1b       	sub	r26, r26
    4b3a:	bb 1b       	sub	r27, r27
    4b3c:	51 e1       	ldi	r21, 0x11	; 17
    4b3e:	07 c0       	rjmp	.+14     	; 0x4b4e <__udivmodhi4_ep>

00004b40 <__udivmodhi4_loop>:
    4b40:	aa 1f       	adc	r26, r26
    4b42:	bb 1f       	adc	r27, r27
    4b44:	a6 17       	cp	r26, r22
    4b46:	b7 07       	cpc	r27, r23
    4b48:	10 f0       	brcs	.+4      	; 0x4b4e <__udivmodhi4_ep>
    4b4a:	a6 1b       	sub	r26, r22
    4b4c:	b7 0b       	sbc	r27, r23

00004b4e <__udivmodhi4_ep>:
    4b4e:	88 1f       	adc	r24, r24
    4b50:	99 1f       	adc	r25, r25
    4b52:	5a 95       	dec	r21
    4b54:	a9 f7       	brne	.-22     	; 0x4b40 <__udivmodhi4_loop>
    4b56:	80 95       	com	r24
    4b58:	90 95       	com	r25
    4b5a:	bc 01       	movw	r22, r24
    4b5c:	cd 01       	movw	r24, r26
    4b5e:	08 95       	ret

00004b60 <_exit>:
    4b60:	f8 94       	cli

00004b62 <__stop_program>:
    4b62:	ff cf       	rjmp	.-2      	; 0x4b62 <__stop_program>
